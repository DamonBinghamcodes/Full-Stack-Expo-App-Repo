"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/better-auth";
exports.ids = ["vendor-chunks/better-auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/better-auth/dist/adapters/prisma-adapter/index.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/better-auth/dist/adapters/prisma-adapter/index.mjs ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prismaAdapter: () => (/* binding */ prismaAdapter)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_WByh1Fkk_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../shared/better-auth.WByh1Fkk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.WByh1Fkk.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_DGdvqtd1_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../shared/better-auth.DGdvqtd1.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DGdvqtd1.mjs\");\n/* harmony import */ var _shared_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../shared/better-auth.DORkW_Ge.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../shared/better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst prismaAdapter = (prisma, config) => (0,_shared_better_auth_WByh1Fkk_mjs__WEBPACK_IMPORTED_MODULE_1__.c)({\n  config: {\n    adapterId: \"prisma\",\n    adapterName: \"Prisma Adapter\",\n    usePlural: config.usePlural ?? false,\n    debugLogs: config.debugLogs ?? false\n  },\n  adapter: ({ getFieldName }) => {\n    const db = prisma;\n    const convertSelect = (select, model) => {\n      if (!select || !model) return void 0;\n      return select.reduce((prev, cur) => {\n        return {\n          ...prev,\n          [getFieldName({ model, field: cur })]: true\n        };\n      }, {});\n    };\n    function operatorToPrismaOperator(operator) {\n      switch (operator) {\n        case \"starts_with\":\n          return \"startsWith\";\n        case \"ends_with\":\n          return \"endsWith\";\n        default:\n          return operator;\n      }\n    }\n    const convertWhereClause = (model, where) => {\n      if (!where) return {};\n      if (where.length === 1) {\n        const w = where[0];\n        if (!w) {\n          return;\n        }\n        return {\n          [getFieldName({ model, field: w.field })]: w.operator === \"eq\" || !w.operator ? w.value : {\n            [operatorToPrismaOperator(w.operator)]: w.value\n          }\n        };\n      }\n      const and = where.filter((w) => w.connector === \"AND\" || !w.connector);\n      const or = where.filter((w) => w.connector === \"OR\");\n      const andClause = and.map((w) => {\n        return {\n          [getFieldName({ model, field: w.field })]: w.operator === \"eq\" || !w.operator ? w.value : {\n            [operatorToPrismaOperator(w.operator)]: w.value\n          }\n        };\n      });\n      const orClause = or.map((w) => {\n        return {\n          [getFieldName({ model, field: w.field })]: w.operator === \"eq\" || !w.operator ? w.value : {\n            [operatorToPrismaOperator(w.operator)]: w.value\n          }\n        };\n      });\n      return {\n        ...andClause.length ? { AND: andClause } : {},\n        ...orClause.length ? { OR: orClause } : {}\n      };\n    };\n    return {\n      async create({ model, data: values, select }) {\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].create({\n          data: values,\n          select: convertSelect(select, model)\n        });\n      },\n      async findOne({ model, where, select }) {\n        const whereClause = convertWhereClause(model, where);\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].findFirst({\n          where: whereClause,\n          select: convertSelect(select, model)\n        });\n      },\n      async findMany({ model, where, limit, offset, sortBy }) {\n        const whereClause = convertWhereClause(model, where);\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].findMany({\n          where: whereClause,\n          take: limit || 100,\n          skip: offset || 0,\n          ...sortBy?.field ? {\n            orderBy: {\n              [getFieldName({ model, field: sortBy.field })]: sortBy.direction === \"desc\" ? \"desc\" : \"asc\"\n            }\n          } : {}\n        });\n      },\n      async count({ model, where }) {\n        const whereClause = convertWhereClause(model, where);\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        return await db[model].count({\n          where: whereClause\n        });\n      },\n      async update({ model, where, update }) {\n        if (!db[model]) {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n            `Model ${model} does not exist in the database. If you haven't generated the Prisma client, you need to run 'npx prisma generate'`\n          );\n        }\n        const whereClause = convertWhereClause(model, where);\n        return await db[model].update({\n          where: whereClause,\n          data: update\n        });\n      },\n      async updateMany({ model, where, update }) {\n        const whereClause = convertWhereClause(model, where);\n        const result = await db[model].updateMany({\n          where: whereClause,\n          data: update\n        });\n        return result ? result.count : 0;\n      },\n      async delete({ model, where }) {\n        const whereClause = convertWhereClause(model, where);\n        try {\n          await db[model].delete({\n            where: whereClause\n          });\n        } catch (e) {\n        }\n      },\n      async deleteMany({ model, where }) {\n        const whereClause = convertWhereClause(model, where);\n        const result = await db[model].deleteMany({\n          where: whereClause\n        });\n        return result ? result.count : 0;\n      },\n      options: config\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/adapters/prisma-adapter/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/api/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/better-auth/dist/api/index.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIError: () => (/* reexport safe */ better_call__WEBPACK_IMPORTED_MODULE_0__.APIError),\n/* harmony export */   accountInfo: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.m),\n/* harmony export */   callbackOAuth: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.P),\n/* harmony export */   changeEmail: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.I),\n/* harmony export */   changePassword: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.G),\n/* harmony export */   createAuthEndpoint: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.a),\n/* harmony export */   createAuthMiddleware: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.c),\n/* harmony export */   createEmailVerificationToken: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.e),\n/* harmony export */   deleteUser: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.E),\n/* harmony export */   deleteUserCallback: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.q),\n/* harmony export */   error: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.j),\n/* harmony export */   forgetPassword: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.M),\n/* harmony export */   forgetPasswordCallback: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.D),\n/* harmony export */   freshSessionMiddleware: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.f),\n/* harmony export */   getAccessToken: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.n),\n/* harmony export */   getEndpoints: () => (/* binding */ getEndpoints),\n/* harmony export */   getSession: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.b),\n/* harmony export */   getSessionFromCtx: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.g),\n/* harmony export */   linkSocialAccount: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.v),\n/* harmony export */   listSessions: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.l),\n/* harmony export */   listUserAccounts: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.t),\n/* harmony export */   ok: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.k),\n/* harmony export */   optionsMiddleware: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.S),\n/* harmony export */   originCheck: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.o),\n/* harmony export */   originCheckMiddleware: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.i),\n/* harmony export */   refreshToken: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.r),\n/* harmony export */   requestOnlySessionMiddleware: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.R),\n/* harmony export */   requestPasswordReset: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.C),\n/* harmony export */   requestPasswordResetCallback: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.A),\n/* harmony export */   resetPassword: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.L),\n/* harmony export */   revokeOtherSessions: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.x),\n/* harmony export */   revokeSession: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.z),\n/* harmony export */   revokeSessions: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.y),\n/* harmony export */   router: () => (/* binding */ router),\n/* harmony export */   sendVerificationEmail: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.J),\n/* harmony export */   sendVerificationEmailFn: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.d),\n/* harmony export */   sessionMiddleware: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.s),\n/* harmony export */   setPassword: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.F),\n/* harmony export */   signInEmail: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.N),\n/* harmony export */   signInSocial: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.Q),\n/* harmony export */   signOut: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.O),\n/* harmony export */   signUpEmail: () => (/* binding */ signUpEmail),\n/* harmony export */   unlinkAccount: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.p),\n/* harmony export */   updateUser: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.u),\n/* harmony export */   verifyEmail: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.K)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/better-auth.oUCDPPbQ.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.oUCDPPbQ.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _shared_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shared/better-auth.Cc72UxUH.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var _shared_better_auth_iKoUsdFE_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../shared/better-auth.iKoUsdFE.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _shared_better_auth_dn8_oqOu_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../shared/better-auth.dn8_oqOu.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.dn8_oqOu.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../social-providers/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../shared/better-auth.DufyW0qf.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _shared_better_auth_DDEbWX_S_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../shared/better-auth.DDEbWX-S.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../shared/better-auth.VTXNLFMT.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst signUpEmail = () => (0,_shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.a)(\n  \"/sign-up/email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_2__.z.record(zod__WEBPACK_IMPORTED_MODULE_2__.z.string(), zod__WEBPACK_IMPORTED_MODULE_2__.z.any()),\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Sign up a user using email and password\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  email: {\n                    type: \"string\",\n                    description: \"The email of the user\"\n                  },\n                  password: {\n                    type: \"string\",\n                    description: \"The password of the user\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\"\n                  }\n                },\n                required: [\"name\", \"email\", \"password\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Successfully created user\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      description: \"Authentication token for the session\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                  // token is optional\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.enabled || ctx.context.options.emailAndPassword?.disableSignUp) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: \"Email and password sign up is not enabled\"\n      });\n    }\n    const body = ctx.body;\n    const { name, email, password, image, callbackURL, ...additionalFields } = body;\n    const isValidEmail = zod__WEBPACK_IMPORTED_MODULE_2__.z.string().email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.INVALID_EMAIL\n      });\n    }\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (password.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (password.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.PASSWORD_TOO_LONG\n      });\n    }\n    const dbUser = await ctx.context.internalAdapter.findUserByEmail(email);\n    if (dbUser?.user) {\n      ctx.context.logger.info(`Sign-up attempt for existing email: ${email}`);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.USER_ALREADY_EXISTS\n      });\n    }\n    const additionalData = (0,_shared_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_4__.f)(\n      ctx.context.options,\n      additionalFields\n    );\n    const hash = await ctx.context.password.hash(password);\n    let createdUser;\n    try {\n      createdUser = await ctx.context.internalAdapter.createUser(\n        {\n          email: email.toLowerCase(),\n          name,\n          image,\n          ...additionalData,\n          emailVerified: false\n        },\n        ctx\n      );\n      if (!createdUser) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n          message: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER\n        });\n      }\n    } catch (e) {\n      if (_shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_5__.b) {\n        ctx.context.logger.error(\"Failed to create user\", e);\n      }\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n        throw e;\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER,\n        details: e\n      });\n    }\n    if (!createdUser) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"UNPROCESSABLE_ENTITY\", {\n        message: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_USER\n      });\n    }\n    await ctx.context.internalAdapter.linkAccount(\n      {\n        userId: createdUser.id,\n        providerId: \"credential\",\n        accountId: createdUser.id,\n        password: hash\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.sendOnSignUp || ctx.context.options.emailAndPassword.requireEmailVerification) {\n      const token = await (0,_shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.e)(\n        ctx.context.secret,\n        createdUser.email,\n        void 0,\n        ctx.context.options.emailVerification?.expiresIn\n      );\n      const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${body.callbackURL || \"/\"}`;\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: createdUser,\n          url,\n          token\n        },\n        ctx.request\n      );\n    }\n    if (ctx.context.options.emailAndPassword.autoSignIn === false || ctx.context.options.emailAndPassword.requireEmailVerification) {\n      return ctx.json({\n        token: null,\n        user: {\n          id: createdUser.id,\n          email: createdUser.email,\n          name: createdUser.name,\n          image: createdUser.image,\n          emailVerified: createdUser.emailVerified,\n          createdAt: createdUser.createdAt,\n          updatedAt: createdUser.updatedAt\n        }\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      createdUser.id,\n      ctx\n    );\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n        message: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.B.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_3__.setSessionCookie)(ctx, {\n      session,\n      user: createdUser\n    });\n    return ctx.json({\n      token: session.token,\n      user: {\n        id: createdUser.id,\n        email: createdUser.email,\n        name: createdUser.name,\n        image: createdUser.image,\n        emailVerified: createdUser.emailVerified,\n        createdAt: createdUser.createdAt,\n        updatedAt: createdUser.updatedAt\n      }\n    });\n  }\n);\n\nfunction shouldRateLimit(max, window, rateLimitData) {\n  const now = Date.now();\n  const windowInMs = window * 1e3;\n  const timeSinceLastRequest = now - rateLimitData.lastRequest;\n  return timeSinceLastRequest < windowInMs && rateLimitData.count >= max;\n}\nfunction rateLimitResponse(retryAfter) {\n  return new Response(\n    JSON.stringify({\n      message: \"Too many requests. Please try again later.\"\n    }),\n    {\n      status: 429,\n      statusText: \"Too Many Requests\",\n      headers: {\n        \"X-Retry-After\": retryAfter.toString()\n      }\n    }\n  );\n}\nfunction getRetryAfter(lastRequest, window) {\n  const now = Date.now();\n  const windowInMs = window * 1e3;\n  return Math.ceil((lastRequest + windowInMs - now) / 1e3);\n}\nfunction createDBStorage(ctx, modelName) {\n  const model = ctx.options.rateLimit?.modelName || \"rateLimit\";\n  const db = ctx.adapter;\n  return {\n    get: async (key) => {\n      const res = await db.findMany({\n        model,\n        where: [{ field: \"key\", value: key }]\n      });\n      const data = res[0];\n      if (typeof data?.lastRequest === \"bigint\") {\n        data.lastRequest = Number(data.lastRequest);\n      }\n      return data;\n    },\n    set: async (key, value, _update) => {\n      try {\n        if (_update) {\n          await db.updateMany({\n            model: \"rateLimit\",\n            where: [{ field: \"key\", value: key }],\n            update: {\n              count: value.count,\n              lastRequest: value.lastRequest\n            }\n          });\n        } else {\n          await db.create({\n            model: \"rateLimit\",\n            data: {\n              key,\n              count: value.count,\n              lastRequest: value.lastRequest\n            }\n          });\n        }\n      } catch (e) {\n        ctx.logger.error(\"Error setting rate limit\", e);\n      }\n    }\n  };\n}\nconst memory = /* @__PURE__ */ new Map();\nfunction getRateLimitStorage(ctx) {\n  if (ctx.options.rateLimit?.customStorage) {\n    return ctx.options.rateLimit.customStorage;\n  }\n  if (ctx.rateLimit.storage === \"secondary-storage\") {\n    return {\n      get: async (key) => {\n        const stringified = await ctx.options.secondaryStorage?.get(key);\n        return stringified ? JSON.parse(stringified) : void 0;\n      },\n      set: async (key, value) => {\n        await ctx.options.secondaryStorage?.set?.(key, JSON.stringify(value));\n      }\n    };\n  }\n  const storage = ctx.rateLimit.storage;\n  if (storage === \"memory\") {\n    return {\n      async get(key) {\n        return memory.get(key);\n      },\n      async set(key, value, _update) {\n        memory.set(key, value);\n      }\n    };\n  }\n  return createDBStorage(ctx, ctx.rateLimit.modelName);\n}\nasync function onRequestRateLimit(req, ctx) {\n  if (!ctx.rateLimit.enabled) {\n    return;\n  }\n  const path = new URL(req.url).pathname.replace(\n    ctx.options.basePath || \"/api/auth\",\n    \"\"\n  );\n  let window = ctx.rateLimit.window;\n  let max = ctx.rateLimit.max;\n  const ip = (0,_shared_better_auth_iKoUsdFE_mjs__WEBPACK_IMPORTED_MODULE_7__.g)(req, ctx.options);\n  if (!ip) {\n    return;\n  }\n  const key = ip + path;\n  const specialRules = getDefaultSpecialRules();\n  const specialRule = specialRules.find((rule) => rule.pathMatcher(path));\n  if (specialRule) {\n    window = specialRule.window;\n    max = specialRule.max;\n  }\n  for (const plugin of ctx.options.plugins || []) {\n    if (plugin.rateLimit) {\n      const matchedRule = plugin.rateLimit.find(\n        (rule) => rule.pathMatcher(path)\n      );\n      if (matchedRule) {\n        window = matchedRule.window;\n        max = matchedRule.max;\n        break;\n      }\n    }\n  }\n  if (ctx.rateLimit.customRules) {\n    const _path = Object.keys(ctx.rateLimit.customRules).find((p) => {\n      if (p.includes(\"*\")) {\n        const isMatch = (0,_shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(p)(path);\n        return isMatch;\n      }\n      return p === path;\n    });\n    if (_path) {\n      const customRule = ctx.rateLimit.customRules[_path];\n      const resolved = typeof customRule === \"function\" ? await customRule(req) : customRule;\n      if (resolved) {\n        window = resolved.window;\n        max = resolved.max;\n      }\n    }\n  }\n  const storage = getRateLimitStorage(ctx);\n  const data = await storage.get(key);\n  const now = Date.now();\n  if (!data) {\n    await storage.set(key, {\n      key,\n      count: 1,\n      lastRequest: now\n    });\n  } else {\n    const timeSinceLastRequest = now - data.lastRequest;\n    if (shouldRateLimit(max, window, data)) {\n      const retryAfter = getRetryAfter(data.lastRequest, window);\n      return rateLimitResponse(retryAfter);\n    } else if (timeSinceLastRequest > window * 1e3) {\n      await storage.set(\n        key,\n        {\n          ...data,\n          count: 1,\n          lastRequest: now\n        },\n        true\n      );\n    } else {\n      await storage.set(\n        key,\n        {\n          ...data,\n          count: data.count + 1,\n          lastRequest: now\n        },\n        true\n      );\n    }\n  }\n}\nfunction getDefaultSpecialRules() {\n  const specialRules = [\n    {\n      pathMatcher(path) {\n        return path.startsWith(\"/sign-in\") || path.startsWith(\"/sign-up\") || path.startsWith(\"/change-password\") || path.startsWith(\"/change-email\");\n      },\n      window: 10,\n      max: 3\n    }\n  ];\n  return specialRules;\n}\n\nfunction toAuthEndpoints(endpoints, ctx) {\n  const api = {};\n  for (const [key, endpoint] of Object.entries(endpoints)) {\n    api[key] = async (context) => {\n      const authContext = await ctx;\n      let internalContext = {\n        ...context,\n        context: {\n          ...authContext,\n          returned: void 0,\n          responseHeaders: void 0,\n          session: null\n        },\n        path: endpoint.path,\n        headers: context?.headers ? new Headers(context?.headers) : void 0\n      };\n      const { beforeHooks, afterHooks } = getHooks(authContext);\n      const before = await runBeforeHooks(internalContext, beforeHooks);\n      if (\"context\" in before && before.context && typeof before.context === \"object\") {\n        const { headers, ...rest } = before.context;\n        if (headers) {\n          headers.forEach((value, key2) => {\n            internalContext.headers.set(key2, value);\n          });\n        }\n        internalContext = (0,defu__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(rest, internalContext);\n      } else if (before) {\n        return before;\n      }\n      internalContext.asResponse = false;\n      internalContext.returnHeaders = true;\n      const result = await endpoint(internalContext).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      internalContext.context.returned = result.response;\n      internalContext.context.responseHeaders = result.headers;\n      const after = await runAfterHooks(internalContext, afterHooks);\n      if (after.response) {\n        result.response = after.response;\n      }\n      if (result.response instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError && !context?.asResponse) {\n        throw result.response;\n      }\n      const response = context?.asResponse ? (0,better_call__WEBPACK_IMPORTED_MODULE_0__.toResponse)(result.response, {\n        headers: result.headers\n      }) : context?.returnHeaders ? {\n        headers: result.headers,\n        response: result.response\n      } : result.response;\n      return response;\n    };\n    api[key].path = endpoint.path;\n    api[key].options = endpoint.options;\n  }\n  return api;\n}\nasync function runBeforeHooks(context, hooks) {\n  let modifiedContext = {};\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler({\n        ...context,\n        returnHeaders: false\n      });\n      if (result && typeof result === \"object\") {\n        if (\"context\" in result && typeof result.context === \"object\") {\n          const { headers, ...rest } = result.context;\n          if (headers instanceof Headers) {\n            if (modifiedContext.headers) {\n              headers.forEach((value, key) => {\n                modifiedContext.headers?.set(key, value);\n              });\n            } else {\n              modifiedContext.headers = headers;\n            }\n          }\n          modifiedContext = (0,defu__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(rest, modifiedContext);\n          continue;\n        }\n        return result;\n      }\n    }\n  }\n  return { context: modifiedContext };\n}\nasync function runAfterHooks(context, hooks) {\n  for (const hook of hooks) {\n    if (hook.matcher(context)) {\n      const result = await hook.handler(context).catch((e) => {\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          return {\n            response: e,\n            headers: e.headers ? new Headers(e.headers) : null\n          };\n        }\n        throw e;\n      });\n      if (result.headers) {\n        result.headers.forEach((value, key) => {\n          if (!context.context.responseHeaders) {\n            context.context.responseHeaders = new Headers({\n              [key]: value\n            });\n          } else {\n            if (key.toLowerCase() === \"set-cookie\") {\n              context.context.responseHeaders.append(key, value);\n            } else {\n              context.context.responseHeaders.set(key, value);\n            }\n          }\n        });\n      }\n      if (result.response) {\n        context.context.returned = result.response;\n      }\n    }\n  }\n  return {\n    response: context.context.returned,\n    headers: context.context.responseHeaders\n  };\n}\nfunction getHooks(authContext) {\n  const plugins = authContext.options.plugins || [];\n  const beforeHooks = [];\n  const afterHooks = [];\n  if (authContext.options.hooks?.before) {\n    beforeHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.before\n    });\n  }\n  if (authContext.options.hooks?.after) {\n    afterHooks.push({\n      matcher: () => true,\n      handler: authContext.options.hooks.after\n    });\n  }\n  const pluginBeforeHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.before) {\n      return plugin.hooks.before;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  const pluginAfterHooks = plugins.map((plugin) => {\n    if (plugin.hooks?.after) {\n      return plugin.hooks.after;\n    }\n  }).filter((plugin) => plugin !== void 0).flat();\n  pluginBeforeHooks.length && beforeHooks.push(...pluginBeforeHooks);\n  pluginAfterHooks.length && afterHooks.push(...pluginAfterHooks);\n  return {\n    beforeHooks,\n    afterHooks\n  };\n}\n\nfunction getEndpoints(ctx, options) {\n  const pluginEndpoints = options.plugins?.reduce(\n    (acc, plugin) => {\n      return {\n        ...acc,\n        ...plugin.endpoints\n      };\n    },\n    {}\n  );\n  const middlewares = options.plugins?.map(\n    (plugin) => plugin.middlewares?.map((m) => {\n      const middleware = async (context) => {\n        return m.middleware({\n          ...context,\n          context: {\n            ...ctx,\n            ...context.context\n          }\n        });\n      };\n      middleware.options = m.middleware.options;\n      return {\n        path: m.path,\n        middleware\n      };\n    })\n  ).filter((plugin) => plugin !== void 0).flat() || [];\n  const baseEndpoints = {\n    signInSocial: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.Q,\n    callbackOAuth: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.P,\n    getSession: (0,_shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(),\n    signOut: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.O,\n    signUpEmail: signUpEmail(),\n    signInEmail: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.N,\n    forgetPassword: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.M,\n    resetPassword: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.L,\n    verifyEmail: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.K,\n    sendVerificationEmail: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.J,\n    changeEmail: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.I,\n    changePassword: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.G,\n    setPassword: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.F,\n    updateUser: (0,_shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.u)(),\n    deleteUser: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.E,\n    forgetPasswordCallback: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.D,\n    requestPasswordReset: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.C,\n    requestPasswordResetCallback: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.A,\n    listSessions: (0,_shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.l)(),\n    revokeSession: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.z,\n    revokeSessions: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.y,\n    revokeOtherSessions: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.x,\n    linkSocialAccount: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.v,\n    listUserAccounts: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.t,\n    deleteUserCallback: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.q,\n    unlinkAccount: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.p,\n    refreshToken: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.r,\n    getAccessToken: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.n,\n    accountInfo: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.m\n  };\n  const endpoints = {\n    ...baseEndpoints,\n    ...pluginEndpoints,\n    ok: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.k,\n    error: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.j\n  };\n  const api = toAuthEndpoints(endpoints, ctx);\n  return {\n    api,\n    middlewares\n  };\n}\nconst router = (ctx, options) => {\n  const { api, middlewares } = getEndpoints(ctx, options);\n  const basePath = new URL(ctx.baseURL).pathname;\n  return (0,better_call__WEBPACK_IMPORTED_MODULE_0__.createRouter)(api, {\n    routerContext: ctx,\n    openapi: {\n      disabled: true\n    },\n    basePath,\n    routerMiddleware: [\n      {\n        path: \"/**\",\n        middleware: _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_1__.i\n      },\n      ...middlewares\n    ],\n    async onRequest(req) {\n      const disabledPaths = ctx.options.disabledPaths || [];\n      const path = new URL(req.url).pathname.replace(basePath, \"\");\n      if (disabledPaths.includes(path)) {\n        return new Response(\"Not Found\", { status: 404 });\n      }\n      for (const plugin of ctx.options.plugins || []) {\n        if (plugin.onRequest) {\n          const response = await plugin.onRequest(req, ctx);\n          if (response && \"response\" in response) {\n            return response.response;\n          }\n        }\n      }\n      return onRequestRateLimit(req, ctx);\n    },\n    async onResponse(res) {\n      for (const plugin of ctx.options.plugins || []) {\n        if (plugin.onResponse) {\n          const response = await plugin.onResponse(res, ctx);\n          if (response) {\n            return response.response;\n          }\n        }\n      }\n      return res;\n    },\n    onError(e) {\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError && e.status === \"FOUND\") {\n        return;\n      }\n      if (options.onAPIError?.throw) {\n        throw e;\n      }\n      if (options.onAPIError?.onError) {\n        options.onAPIError.onError(e, ctx);\n        return;\n      }\n      const optLogLevel = options.logger?.level;\n      const log = optLogLevel === \"error\" || optLogLevel === \"warn\" || optLogLevel === \"debug\" ? _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_6__.l : void 0;\n      if (options.logger?.disabled !== true) {\n        if (e && typeof e === \"object\" && \"message\" in e && typeof e.message === \"string\") {\n          if (e.message.includes(\"no column\") || e.message.includes(\"column\") || e.message.includes(\"relation\") || e.message.includes(\"table\") || e.message.includes(\"does not exist\")) {\n            ctx.logger?.error(e.message);\n            return;\n          }\n        }\n        if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_0__.APIError) {\n          if (e.status === \"INTERNAL_SERVER_ERROR\") {\n            ctx.logger.error(e.status, e);\n          }\n          log?.error(e.message);\n        } else {\n          ctx.logger?.error(\n            e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n            e\n          );\n        }\n      }\n    }\n  });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/api/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs":
/*!*********************************************************************!*\
  !*** ./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BunSqliteAdapter: () => (/* binding */ BunSqliteAdapter),\n/* harmony export */   BunSqliteDialect: () => (/* binding */ BunSqliteDialect),\n/* harmony export */   BunSqliteDriver: () => (/* binding */ BunSqliteDriver),\n/* harmony export */   BunSqliteIntrospector: () => (/* binding */ BunSqliteIntrospector),\n/* harmony export */   BunSqliteQueryCompiler: () => (/* binding */ BunSqliteQueryCompiler)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/query-compiler/compiled-query.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/migration/migrator.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/raw-builder/sql.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js\");\n\n\nclass BunSqliteAdapter {\n  get supportsCreateIfNotExists() {\n    return true;\n  }\n  get supportsTransactionalDdl() {\n    return false;\n  }\n  get supportsReturning() {\n    return true;\n  }\n  async acquireMigrationLock() {\n  }\n  async releaseMigrationLock() {\n  }\n  get supportsOutput() {\n    return true;\n  }\n}\nclass BunSqliteDriver {\n  #config;\n  #connectionMutex = new ConnectionMutex();\n  #db;\n  #connection;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  async init() {\n    this.#db = this.#config.database;\n    this.#connection = new BunSqliteConnection(this.#db);\n    if (this.#config.onCreateConnection) {\n      await this.#config.onCreateConnection(this.#connection);\n    }\n  }\n  async acquireConnection() {\n    await this.#connectionMutex.lock();\n    return this.#connection;\n  }\n  async beginTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"begin\"));\n  }\n  async commitTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"commit\"));\n  }\n  async rollbackTransaction(connection) {\n    await connection.executeQuery(kysely__WEBPACK_IMPORTED_MODULE_0__.CompiledQuery.raw(\"rollback\"));\n  }\n  async releaseConnection() {\n    this.#connectionMutex.unlock();\n  }\n  async destroy() {\n    this.#db?.close();\n  }\n}\nclass BunSqliteConnection {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  executeQuery(compiledQuery) {\n    const { sql: sql2, parameters } = compiledQuery;\n    const stmt = this.#db.prepare(sql2);\n    return Promise.resolve({\n      rows: stmt.all(parameters)\n    });\n  }\n  async *streamQuery() {\n    throw new Error(\"Streaming query is not supported by SQLite driver.\");\n  }\n}\nclass ConnectionMutex {\n  #promise;\n  #resolve;\n  async lock() {\n    while (this.#promise) {\n      await this.#promise;\n    }\n    this.#promise = new Promise((resolve) => {\n      this.#resolve = resolve;\n    });\n  }\n  unlock() {\n    const resolve = this.#resolve;\n    this.#promise = void 0;\n    this.#resolve = void 0;\n    resolve?.();\n  }\n}\nclass BunSqliteIntrospector {\n  #db;\n  constructor(db) {\n    this.#db = db;\n  }\n  async getSchemas() {\n    return [];\n  }\n  async getTables(options = { withInternalKyselyTables: false }) {\n    let query = this.#db.selectFrom(\"sqlite_schema\").where(\"type\", \"=\", \"table\").where(\"name\", \"not like\", \"sqlite_%\").select(\"name\").$castTo();\n    if (!options.withInternalKyselyTables) {\n      query = query.where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_TABLE).where(\"name\", \"!=\", kysely__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_MIGRATION_LOCK_TABLE);\n    }\n    const tables = await query.execute();\n    return Promise.all(tables.map(({ name }) => this.#getTableMetadata(name)));\n  }\n  async getMetadata(options) {\n    return {\n      tables: await this.getTables(options)\n    };\n  }\n  async #getTableMetadata(table) {\n    const db = this.#db;\n    const createSql = await db.selectFrom(\"sqlite_master\").where(\"name\", \"=\", table).select(\"sql\").$castTo().execute();\n    const autoIncrementCol = createSql[0]?.sql?.split(/[\\(\\),]/)?.find((it) => it.toLowerCase().includes(\"autoincrement\"))?.split(/\\s+/)?.[0]?.replace(/[\"`]/g, \"\");\n    const columns = await db.selectFrom(\n      (0,kysely__WEBPACK_IMPORTED_MODULE_2__.sql)`pragma_table_info(${table})`.as(\"table_info\")\n    ).select([\"name\", \"type\", \"notnull\", \"dflt_value\"]).execute();\n    return {\n      name: table,\n      columns: columns.map((col) => ({\n        name: col.name,\n        dataType: col.type,\n        isNullable: !col.notnull,\n        isAutoIncrementing: col.name === autoIncrementCol,\n        hasDefaultValue: col.dflt_value != null\n      })),\n      isView: true\n    };\n  }\n}\nclass BunSqliteQueryCompiler extends kysely__WEBPACK_IMPORTED_MODULE_3__.DefaultQueryCompiler {\n  getCurrentParameterPlaceholder() {\n    return \"?\";\n  }\n  getLeftIdentifierWrapper() {\n    return '\"';\n  }\n  getRightIdentifierWrapper() {\n    return '\"';\n  }\n  getAutoIncrement() {\n    return \"autoincrement\";\n  }\n}\nclass BunSqliteDialect {\n  #config;\n  constructor(config) {\n    this.#config = { ...config };\n  }\n  createDriver() {\n    return new BunSqliteDriver(this.#config);\n  }\n  createQueryCompiler() {\n    return new BunSqliteQueryCompiler();\n  }\n  createAdapter() {\n    return new BunSqliteAdapter();\n  }\n  createIntrospector(db) {\n    return new BunSqliteIntrospector(db);\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9jaHVua3MvYnVuLXNxbGl0ZS1kaWFsZWN0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBeUg7O0FBRXpIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxpREFBYTtBQUMvQztBQUNBO0FBQ0Esa0NBQWtDLGlEQUFhO0FBQy9DO0FBQ0E7QUFDQSxrQ0FBa0MsaURBQWE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlDQUFpQztBQUMvRDtBQUNBO0FBQ0Esd0NBQXdDLDJEQUF1QixzQkFBc0IsZ0VBQTRCO0FBQ2pIO0FBQ0E7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSwyQ0FBRyxxQkFBcUIsTUFBTTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsd0RBQW9CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRThHIiwic291cmNlcyI6WyIvVXNlcnMvYmFpbGV5cGFya2VyL0RvY3VtZW50cy9Db2RpbmcvcmFwaWQtZGV2LWV4cG8tZnVsbHN0YWNrLXN0YXJ0ZXItcmVwby9iYWNrZW5kL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L2NodW5rcy9idW4tc3FsaXRlLWRpYWxlY3QubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBpbGVkUXVlcnksIERlZmF1bHRRdWVyeUNvbXBpbGVyLCBERUZBVUxUX01JR1JBVElPTl9UQUJMRSwgREVGQVVMVF9NSUdSQVRJT05fTE9DS19UQUJMRSwgc3FsIH0gZnJvbSAna3lzZWx5JztcblxuY2xhc3MgQnVuU3FsaXRlQWRhcHRlciB7XG4gIGdldCBzdXBwb3J0c0NyZWF0ZUlmTm90RXhpc3RzKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGdldCBzdXBwb3J0c1RyYW5zYWN0aW9uYWxEZGwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGdldCBzdXBwb3J0c1JldHVybmluZygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhc3luYyBhY3F1aXJlTWlncmF0aW9uTG9jaygpIHtcbiAgfVxuICBhc3luYyByZWxlYXNlTWlncmF0aW9uTG9jaygpIHtcbiAgfVxuICBnZXQgc3VwcG9ydHNPdXRwdXQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbmNsYXNzIEJ1blNxbGl0ZURyaXZlciB7XG4gICNjb25maWc7XG4gICNjb25uZWN0aW9uTXV0ZXggPSBuZXcgQ29ubmVjdGlvbk11dGV4KCk7XG4gICNkYjtcbiAgI2Nvbm5lY3Rpb247XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuI2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gIH1cbiAgYXN5bmMgaW5pdCgpIHtcbiAgICB0aGlzLiNkYiA9IHRoaXMuI2NvbmZpZy5kYXRhYmFzZTtcbiAgICB0aGlzLiNjb25uZWN0aW9uID0gbmV3IEJ1blNxbGl0ZUNvbm5lY3Rpb24odGhpcy4jZGIpO1xuICAgIGlmICh0aGlzLiNjb25maWcub25DcmVhdGVDb25uZWN0aW9uKSB7XG4gICAgICBhd2FpdCB0aGlzLiNjb25maWcub25DcmVhdGVDb25uZWN0aW9uKHRoaXMuI2Nvbm5lY3Rpb24pO1xuICAgIH1cbiAgfVxuICBhc3luYyBhY3F1aXJlQ29ubmVjdGlvbigpIHtcbiAgICBhd2FpdCB0aGlzLiNjb25uZWN0aW9uTXV0ZXgubG9jaygpO1xuICAgIHJldHVybiB0aGlzLiNjb25uZWN0aW9uO1xuICB9XG4gIGFzeW5jIGJlZ2luVHJhbnNhY3Rpb24oY29ubmVjdGlvbikge1xuICAgIGF3YWl0IGNvbm5lY3Rpb24uZXhlY3V0ZVF1ZXJ5KENvbXBpbGVkUXVlcnkucmF3KFwiYmVnaW5cIikpO1xuICB9XG4gIGFzeW5jIGNvbW1pdFRyYW5zYWN0aW9uKGNvbm5lY3Rpb24pIHtcbiAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGVRdWVyeShDb21waWxlZFF1ZXJ5LnJhdyhcImNvbW1pdFwiKSk7XG4gIH1cbiAgYXN5bmMgcm9sbGJhY2tUcmFuc2FjdGlvbihjb25uZWN0aW9uKSB7XG4gICAgYXdhaXQgY29ubmVjdGlvbi5leGVjdXRlUXVlcnkoQ29tcGlsZWRRdWVyeS5yYXcoXCJyb2xsYmFja1wiKSk7XG4gIH1cbiAgYXN5bmMgcmVsZWFzZUNvbm5lY3Rpb24oKSB7XG4gICAgdGhpcy4jY29ubmVjdGlvbk11dGV4LnVubG9jaygpO1xuICB9XG4gIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4jZGI/LmNsb3NlKCk7XG4gIH1cbn1cbmNsYXNzIEJ1blNxbGl0ZUNvbm5lY3Rpb24ge1xuICAjZGI7XG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy4jZGIgPSBkYjtcbiAgfVxuICBleGVjdXRlUXVlcnkoY29tcGlsZWRRdWVyeSkge1xuICAgIGNvbnN0IHsgc3FsOiBzcWwyLCBwYXJhbWV0ZXJzIH0gPSBjb21waWxlZFF1ZXJ5O1xuICAgIGNvbnN0IHN0bXQgPSB0aGlzLiNkYi5wcmVwYXJlKHNxbDIpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgcm93czogc3RtdC5hbGwocGFyYW1ldGVycylcbiAgICB9KTtcbiAgfVxuICBhc3luYyAqc3RyZWFtUXVlcnkoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyZWFtaW5nIHF1ZXJ5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgU1FMaXRlIGRyaXZlci5cIik7XG4gIH1cbn1cbmNsYXNzIENvbm5lY3Rpb25NdXRleCB7XG4gICNwcm9taXNlO1xuICAjcmVzb2x2ZTtcbiAgYXN5bmMgbG9jaygpIHtcbiAgICB3aGlsZSAodGhpcy4jcHJvbWlzZSkge1xuICAgICAgYXdhaXQgdGhpcy4jcHJvbWlzZTtcbiAgICB9XG4gICAgdGhpcy4jcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLiNyZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgfVxuICB1bmxvY2soKSB7XG4gICAgY29uc3QgcmVzb2x2ZSA9IHRoaXMuI3Jlc29sdmU7XG4gICAgdGhpcy4jcHJvbWlzZSA9IHZvaWQgMDtcbiAgICB0aGlzLiNyZXNvbHZlID0gdm9pZCAwO1xuICAgIHJlc29sdmU/LigpO1xuICB9XG59XG5jbGFzcyBCdW5TcWxpdGVJbnRyb3NwZWN0b3Ige1xuICAjZGI7XG4gIGNvbnN0cnVjdG9yKGRiKSB7XG4gICAgdGhpcy4jZGIgPSBkYjtcbiAgfVxuICBhc3luYyBnZXRTY2hlbWFzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBhc3luYyBnZXRUYWJsZXMob3B0aW9ucyA9IHsgd2l0aEludGVybmFsS3lzZWx5VGFibGVzOiBmYWxzZSB9KSB7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy4jZGIuc2VsZWN0RnJvbShcInNxbGl0ZV9zY2hlbWFcIikud2hlcmUoXCJ0eXBlXCIsIFwiPVwiLCBcInRhYmxlXCIpLndoZXJlKFwibmFtZVwiLCBcIm5vdCBsaWtlXCIsIFwic3FsaXRlXyVcIikuc2VsZWN0KFwibmFtZVwiKS4kY2FzdFRvKCk7XG4gICAgaWYgKCFvcHRpb25zLndpdGhJbnRlcm5hbEt5c2VseVRhYmxlcykge1xuICAgICAgcXVlcnkgPSBxdWVyeS53aGVyZShcIm5hbWVcIiwgXCIhPVwiLCBERUZBVUxUX01JR1JBVElPTl9UQUJMRSkud2hlcmUoXCJuYW1lXCIsIFwiIT1cIiwgREVGQVVMVF9NSUdSQVRJT05fTE9DS19UQUJMRSk7XG4gICAgfVxuICAgIGNvbnN0IHRhYmxlcyA9IGF3YWl0IHF1ZXJ5LmV4ZWN1dGUoKTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGFibGVzLm1hcCgoeyBuYW1lIH0pID0+IHRoaXMuI2dldFRhYmxlTWV0YWRhdGEobmFtZSkpKTtcbiAgfVxuICBhc3luYyBnZXRNZXRhZGF0YShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhYmxlczogYXdhaXQgdGhpcy5nZXRUYWJsZXMob3B0aW9ucylcbiAgICB9O1xuICB9XG4gIGFzeW5jICNnZXRUYWJsZU1ldGFkYXRhKHRhYmxlKSB7XG4gICAgY29uc3QgZGIgPSB0aGlzLiNkYjtcbiAgICBjb25zdCBjcmVhdGVTcWwgPSBhd2FpdCBkYi5zZWxlY3RGcm9tKFwic3FsaXRlX21hc3RlclwiKS53aGVyZShcIm5hbWVcIiwgXCI9XCIsIHRhYmxlKS5zZWxlY3QoXCJzcWxcIikuJGNhc3RUbygpLmV4ZWN1dGUoKTtcbiAgICBjb25zdCBhdXRvSW5jcmVtZW50Q29sID0gY3JlYXRlU3FsWzBdPy5zcWw/LnNwbGl0KC9bXFwoXFwpLF0vKT8uZmluZCgoaXQpID0+IGl0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoXCJhdXRvaW5jcmVtZW50XCIpKT8uc3BsaXQoL1xccysvKT8uWzBdPy5yZXBsYWNlKC9bXCJgXS9nLCBcIlwiKTtcbiAgICBjb25zdCBjb2x1bW5zID0gYXdhaXQgZGIuc2VsZWN0RnJvbShcbiAgICAgIHNxbGBwcmFnbWFfdGFibGVfaW5mbygke3RhYmxlfSlgLmFzKFwidGFibGVfaW5mb1wiKVxuICAgICkuc2VsZWN0KFtcIm5hbWVcIiwgXCJ0eXBlXCIsIFwibm90bnVsbFwiLCBcImRmbHRfdmFsdWVcIl0pLmV4ZWN1dGUoKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGFibGUsXG4gICAgICBjb2x1bW5zOiBjb2x1bW5zLm1hcCgoY29sKSA9PiAoe1xuICAgICAgICBuYW1lOiBjb2wubmFtZSxcbiAgICAgICAgZGF0YVR5cGU6IGNvbC50eXBlLFxuICAgICAgICBpc051bGxhYmxlOiAhY29sLm5vdG51bGwsXG4gICAgICAgIGlzQXV0b0luY3JlbWVudGluZzogY29sLm5hbWUgPT09IGF1dG9JbmNyZW1lbnRDb2wsXG4gICAgICAgIGhhc0RlZmF1bHRWYWx1ZTogY29sLmRmbHRfdmFsdWUgIT0gbnVsbFxuICAgICAgfSkpLFxuICAgICAgaXNWaWV3OiB0cnVlXG4gICAgfTtcbiAgfVxufVxuY2xhc3MgQnVuU3FsaXRlUXVlcnlDb21waWxlciBleHRlbmRzIERlZmF1bHRRdWVyeUNvbXBpbGVyIHtcbiAgZ2V0Q3VycmVudFBhcmFtZXRlclBsYWNlaG9sZGVyKCkge1xuICAgIHJldHVybiBcIj9cIjtcbiAgfVxuICBnZXRMZWZ0SWRlbnRpZmllcldyYXBwZXIoKSB7XG4gICAgcmV0dXJuICdcIic7XG4gIH1cbiAgZ2V0UmlnaHRJZGVudGlmaWVyV3JhcHBlcigpIHtcbiAgICByZXR1cm4gJ1wiJztcbiAgfVxuICBnZXRBdXRvSW5jcmVtZW50KCkge1xuICAgIHJldHVybiBcImF1dG9pbmNyZW1lbnRcIjtcbiAgfVxufVxuY2xhc3MgQnVuU3FsaXRlRGlhbGVjdCB7XG4gICNjb25maWc7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuI2NvbmZpZyA9IHsgLi4uY29uZmlnIH07XG4gIH1cbiAgY3JlYXRlRHJpdmVyKCkge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlRHJpdmVyKHRoaXMuI2NvbmZpZyk7XG4gIH1cbiAgY3JlYXRlUXVlcnlDb21waWxlcigpIHtcbiAgICByZXR1cm4gbmV3IEJ1blNxbGl0ZVF1ZXJ5Q29tcGlsZXIoKTtcbiAgfVxuICBjcmVhdGVBZGFwdGVyKCkge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlQWRhcHRlcigpO1xuICB9XG4gIGNyZWF0ZUludHJvc3BlY3RvcihkYikge1xuICAgIHJldHVybiBuZXcgQnVuU3FsaXRlSW50cm9zcGVjdG9yKGRiKTtcbiAgfVxufVxuXG5leHBvcnQgeyBCdW5TcWxpdGVBZGFwdGVyLCBCdW5TcWxpdGVEaWFsZWN0LCBCdW5TcWxpdGVEcml2ZXIsIEJ1blNxbGl0ZUludHJvc3BlY3RvciwgQnVuU3FsaXRlUXVlcnlDb21waWxlciB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/cookies/index.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/better-auth/dist/cookies/index.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCookieGetter: () => (/* binding */ createCookieGetter),\n/* harmony export */   deleteSessionCookie: () => (/* binding */ deleteSessionCookie),\n/* harmony export */   getCookieCache: () => (/* binding */ getCookieCache),\n/* harmony export */   getCookies: () => (/* binding */ getCookies),\n/* harmony export */   getSessionCookie: () => (/* binding */ getSessionCookie),\n/* harmony export */   parseCookies: () => (/* binding */ parseCookies),\n/* harmony export */   parseSetCookieHeader: () => (/* binding */ parseSetCookieHeader),\n/* harmony export */   setCookieCache: () => (/* binding */ setCookieCache),\n/* harmony export */   setCookieToHeader: () => (/* binding */ setCookieToHeader),\n/* harmony export */   setSessionCookie: () => (/* binding */ setSessionCookie)\n/* harmony export */ });\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shared/better-auth.VTXNLFMT.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n\n\n\n\n\n\n\n\n\nconst createTime = (value, format) => {\n  const toMilliseconds = () => {\n    switch (format) {\n      case \"ms\":\n        return value;\n      case \"s\":\n        return value * 1e3;\n      case \"m\":\n        return value * 1e3 * 60;\n      case \"h\":\n        return value * 1e3 * 60 * 60;\n      case \"d\":\n        return value * 1e3 * 60 * 60 * 24;\n      case \"w\":\n        return value * 1e3 * 60 * 60 * 24 * 7;\n      case \"y\":\n        return value * 1e3 * 60 * 60 * 24 * 365;\n    }\n  };\n  const time = {\n    t: `${value}${format}`,\n    value,\n    tFormat: format,\n    toMilliseconds,\n    toSeconds: () => time.toMilliseconds() / 1e3,\n    toMinutes: () => time.toSeconds() / 60,\n    toHours: () => time.toMinutes() / 60,\n    toDays: () => time.toHours() / 24,\n    toWeeks: () => time.toDays() / 7,\n    toYears: () => time.toDays() / 365,\n    getDate: () => new Date(Date.now() + time.toMilliseconds()),\n    add: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return createTime(time.toMilliseconds() + otherMs, \"ms\");\n    },\n    subtract: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return createTime(time.toMilliseconds() - otherMs, \"ms\");\n    },\n    multiply: (factor) => createTime(time.toMilliseconds() * factor, \"ms\"),\n    divide: (divisor) => createTime(time.toMilliseconds() / divisor, \"ms\"),\n    equals: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() === otherMs;\n    },\n    lessThan: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() < otherMs;\n    },\n    greaterThan: (other) => {\n      const otherMs = typeof other === \"string\" ? parseTime(other).toMilliseconds() : other.toMilliseconds();\n      return time.toMilliseconds() > otherMs;\n    },\n    format: (pattern) => {\n      const date = time.getDate();\n      return pattern.replace(/YYYY|MM|DD|HH|mm|ss/g, (match) => {\n        switch (match) {\n          case \"YYYY\":\n            return date.getFullYear().toString();\n          case \"MM\":\n            return (date.getMonth() + 1).toString().padStart(2, \"0\");\n          case \"DD\":\n            return date.getDate().toString().padStart(2, \"0\");\n          case \"HH\":\n            return date.getHours().toString().padStart(2, \"0\");\n          case \"mm\":\n            return date.getMinutes().toString().padStart(2, \"0\");\n          case \"ss\":\n            return date.getSeconds().toString().padStart(2, \"0\");\n          default:\n            return match;\n        }\n      });\n    },\n    fromNow: () => {\n      const ms = time.toMilliseconds();\n      if (ms < 0) return time.ago();\n      if (ms < 1e3) return \"in a few seconds\";\n      if (ms < 6e4) return `in ${Math.round(ms / 1e3)} seconds`;\n      if (ms < 36e5) return `in ${Math.round(ms / 6e4)} minutes`;\n      if (ms < 864e5) return `in ${Math.round(ms / 36e5)} hours`;\n      if (ms < 6048e5) return `in ${Math.round(ms / 864e5)} days`;\n      if (ms < 26298e5) return `in ${Math.round(ms / 6048e5)} weeks`;\n      if (ms < 315576e5) return `in ${Math.round(ms / 26298e5)} months`;\n      return `in ${Math.round(ms / 315576e5)} years`;\n    },\n    ago: () => {\n      const ms = -time.toMilliseconds();\n      if (ms < 0) return time.fromNow();\n      if (ms < 1e3) return \"a few seconds ago\";\n      if (ms < 6e4) return `${Math.round(ms / 1e3)} seconds ago`;\n      if (ms < 36e5) return `${Math.round(ms / 6e4)} minutes ago`;\n      if (ms < 864e5) return `${Math.round(ms / 36e5)} hours ago`;\n      if (ms < 6048e5) return `${Math.round(ms / 864e5)} days ago`;\n      if (ms < 26298e5) return `${Math.round(ms / 6048e5)} weeks ago`;\n      if (ms < 315576e5) return `${Math.round(ms / 26298e5)} months ago`;\n      return `${Math.round(ms / 315576e5)} years ago`;\n    }\n  };\n  return time;\n};\nconst parseTime = (time) => {\n  const match = time.match(/^(\\d+)(ms|s|m|h|d|w|y)$/);\n  if (!match) throw new Error(\"Invalid time format\");\n  return createTime(parseInt(match[1]), match[2]);\n};\n\nfunction parseSetCookieHeader(setCookie) {\n  const cookies = /* @__PURE__ */ new Map();\n  const cookieArray = setCookie.split(\", \");\n  cookieArray.forEach((cookieString) => {\n    const parts = cookieString.split(\";\").map((part) => part.trim());\n    const [nameValue, ...attributes] = parts;\n    const [name, ...valueParts] = nameValue.split(\"=\");\n    const value = valueParts.join(\"=\");\n    if (!name || value === void 0) {\n      return;\n    }\n    const attrObj = { value };\n    attributes.forEach((attribute) => {\n      const [attrName, ...attrValueParts] = attribute.split(\"=\");\n      const attrValue = attrValueParts.join(\"=\");\n      const normalizedAttrName = attrName.trim().toLowerCase();\n      switch (normalizedAttrName) {\n        case \"max-age\":\n          attrObj[\"max-age\"] = attrValue ? parseInt(attrValue.trim(), 10) : void 0;\n          break;\n        case \"expires\":\n          attrObj.expires = attrValue ? new Date(attrValue.trim()) : void 0;\n          break;\n        case \"domain\":\n          attrObj.domain = attrValue ? attrValue.trim() : void 0;\n          break;\n        case \"path\":\n          attrObj.path = attrValue ? attrValue.trim() : void 0;\n          break;\n        case \"secure\":\n          attrObj.secure = true;\n          break;\n        case \"httponly\":\n          attrObj.httponly = true;\n          break;\n        case \"samesite\":\n          attrObj.samesite = attrValue ? attrValue.trim().toLowerCase() : void 0;\n          break;\n        default:\n          attrObj[normalizedAttrName] = attrValue ? attrValue.trim() : true;\n          break;\n      }\n    });\n    cookies.set(name, attrObj);\n  });\n  return cookies;\n}\nfunction setCookieToHeader(headers) {\n  return (context) => {\n    const setCookieHeader = context.response.headers.get(\"set-cookie\");\n    if (!setCookieHeader) {\n      return;\n    }\n    const cookieMap = /* @__PURE__ */ new Map();\n    const existingCookiesHeader = headers.get(\"cookie\") || \"\";\n    existingCookiesHeader.split(\";\").forEach((cookie) => {\n      const [name, ...rest] = cookie.trim().split(\"=\");\n      if (name && rest.length > 0) {\n        cookieMap.set(name, rest.join(\"=\"));\n      }\n    });\n    const setCookieHeaders = setCookieHeader.split(\",\");\n    setCookieHeaders.forEach((header) => {\n      const cookies = parseSetCookieHeader(header);\n      cookies.forEach((value, name) => {\n        cookieMap.set(name, value.value);\n      });\n    });\n    const updatedCookies = Array.from(cookieMap.entries()).map(([name, value]) => `${name}=${value}`).join(\"; \");\n    headers.set(\"cookie\", updatedCookies);\n  };\n}\n\nfunction createCookieGetter(options) {\n  const secure = options.advanced?.useSecureCookies !== void 0 ? options.advanced?.useSecureCookies : options.baseURL !== void 0 ? options.baseURL.startsWith(\"https://\") ? true : false : _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.a;\n  const secureCookiePrefix = secure ? \"__Secure-\" : \"\";\n  const crossSubdomainEnabled = !!options.advanced?.crossSubDomainCookies?.enabled;\n  const domain = crossSubdomainEnabled ? options.advanced?.crossSubDomainCookies?.domain || (options.baseURL ? new URL(options.baseURL).hostname : void 0) : void 0;\n  if (crossSubdomainEnabled && !domain) {\n    throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n      \"baseURL is required when crossSubdomainCookies are enabled\"\n    );\n  }\n  function createCookie(cookieName, overrideAttributes = {}) {\n    const prefix = options.advanced?.cookiePrefix || \"better-auth\";\n    const name = options.advanced?.cookies?.[cookieName]?.name || `${prefix}.${cookieName}`;\n    const attributes = options.advanced?.cookies?.[cookieName]?.attributes;\n    return {\n      name: `${secureCookiePrefix}${name}`,\n      attributes: {\n        secure: !!secureCookiePrefix,\n        sameSite: \"lax\",\n        path: \"/\",\n        httpOnly: true,\n        ...crossSubdomainEnabled ? { domain } : {},\n        ...options.advanced?.defaultCookieAttributes,\n        ...overrideAttributes,\n        ...attributes\n      }\n    };\n  }\n  return createCookie;\n}\nfunction getCookies(options) {\n  const createCookie = createCookieGetter(options);\n  const sessionMaxAge = options.session?.expiresIn || createTime(7, \"d\").toSeconds();\n  const sessionToken = createCookie(\"session_token\", {\n    maxAge: sessionMaxAge\n  });\n  const sessionData = createCookie(\"session_data\", {\n    maxAge: options.session?.cookieCache?.maxAge || 60 * 5\n  });\n  const dontRememberToken = createCookie(\"dont_remember\");\n  return {\n    sessionToken: {\n      name: sessionToken.name,\n      options: sessionToken.attributes\n    },\n    /**\n     * This cookie is used to store the session data in the cookie\n     * This is useful for when you want to cache the session in the cookie\n     */\n    sessionData: {\n      name: sessionData.name,\n      options: sessionData.attributes\n    },\n    dontRememberToken: {\n      name: dontRememberToken.name,\n      options: dontRememberToken.attributes\n    }\n  };\n}\nasync function setCookieCache(ctx, session) {\n  const shouldStoreSessionDataInCookie = ctx.context.options.session?.cookieCache?.enabled;\n  if (shouldStoreSessionDataInCookie) {\n    const filteredSession = Object.entries(session.session).reduce(\n      (acc, [key, value]) => {\n        const fieldConfig = ctx.context.options.session?.additionalFields?.[key];\n        if (!fieldConfig || fieldConfig.returned !== false) {\n          acc[key] = value;\n        }\n        return acc;\n      },\n      {}\n    );\n    const sessionData = { session: filteredSession, user: session.user };\n    const data = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.encode(\n      JSON.stringify({\n        session: sessionData,\n        expiresAt: (0,_shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(\n          ctx.context.authCookies.sessionData.options.maxAge || 60,\n          \"sec\"\n        ).getTime(),\n        signature: await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__.createHMAC)(\"SHA-256\", \"base64urlnopad\").sign(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionData,\n            expiresAt: (0,_shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_1__.g)(\n              ctx.context.authCookies.sessionData.options.maxAge || 60,\n              \"sec\"\n            ).getTime()\n          })\n        )\n      }),\n      {\n        padding: false\n      }\n    );\n    if (data.length > 4093) {\n      throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n        \"Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data\"\n      );\n    }\n    ctx.setCookie(\n      ctx.context.authCookies.sessionData.name,\n      data,\n      ctx.context.authCookies.sessionData.options\n    );\n  }\n}\nasync function setSessionCookie(ctx, session, dontRememberMe, overrides) {\n  const dontRememberMeCookie = await ctx.getSignedCookie(\n    ctx.context.authCookies.dontRememberToken.name,\n    ctx.context.secret\n  );\n  dontRememberMe = dontRememberMe !== void 0 ? dontRememberMe : !!dontRememberMeCookie;\n  const options = ctx.context.authCookies.sessionToken.options;\n  const maxAge = dontRememberMe ? void 0 : ctx.context.sessionConfig.expiresIn;\n  await ctx.setSignedCookie(\n    ctx.context.authCookies.sessionToken.name,\n    session.session.token,\n    ctx.context.secret,\n    {\n      ...options,\n      maxAge,\n      ...overrides\n    }\n  );\n  if (dontRememberMe) {\n    await ctx.setSignedCookie(\n      ctx.context.authCookies.dontRememberToken.name,\n      \"true\",\n      ctx.context.secret,\n      ctx.context.authCookies.dontRememberToken.options\n    );\n  }\n  await setCookieCache(ctx, session);\n  ctx.context.setNewSession(session);\n  if (ctx.context.options.secondaryStorage) {\n    await ctx.context.secondaryStorage?.set(\n      session.session.token,\n      JSON.stringify({\n        user: session.user,\n        session: session.session\n      }),\n      Math.floor(\n        (new Date(session.session.expiresAt).getTime() - Date.now()) / 1e3\n      )\n    );\n  }\n}\nfunction deleteSessionCookie(ctx, skipDontRememberMe) {\n  ctx.setCookie(ctx.context.authCookies.sessionToken.name, \"\", {\n    ...ctx.context.authCookies.sessionToken.options,\n    maxAge: 0\n  });\n  ctx.setCookie(ctx.context.authCookies.sessionData.name, \"\", {\n    ...ctx.context.authCookies.sessionData.options,\n    maxAge: 0\n  });\n  if (!skipDontRememberMe) {\n    ctx.setCookie(ctx.context.authCookies.dontRememberToken.name, \"\", {\n      ...ctx.context.authCookies.dontRememberToken.options,\n      maxAge: 0\n    });\n  }\n}\nfunction parseCookies(cookieHeader) {\n  const cookies = cookieHeader.split(\"; \");\n  const cookieMap = /* @__PURE__ */ new Map();\n  cookies.forEach((cookie) => {\n    const [name, value] = cookie.split(\"=\");\n    cookieMap.set(name, value);\n  });\n  return cookieMap;\n}\nconst getSessionCookie = (request, config) => {\n  if (config?.cookiePrefix) {\n    if (config.cookieName) {\n      config.cookiePrefix = `${config.cookiePrefix}-`;\n    } else {\n      config.cookiePrefix = `${config.cookiePrefix}.`;\n    }\n  }\n  const headers = \"headers\" in request ? request.headers : request;\n  const req = request instanceof Request ? request : void 0;\n  (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_6__.a)(req?.url, config?.path, req);\n  const cookies = headers.get(\"cookie\");\n  if (!cookies) {\n    return null;\n  }\n  const { cookieName = \"session_token\", cookiePrefix = \"better-auth.\" } = config || {};\n  const name = `${cookiePrefix}${cookieName}`;\n  const secureCookieName = `__Secure-${name}`;\n  const parsedCookie = parseCookies(cookies);\n  const sessionToken = parsedCookie.get(name) || parsedCookie.get(secureCookieName);\n  if (sessionToken) {\n    return sessionToken;\n  }\n  return null;\n};\nconst getCookieCache = async (request, config) => {\n  const headers = request instanceof Headers ? request : request.headers;\n  const cookies = headers.get(\"cookie\");\n  if (!cookies) {\n    return null;\n  }\n  const { cookieName = \"session_data\", cookiePrefix = \"better-auth\" } = config || {};\n  const name = config?.isSecure !== void 0 ? config.isSecure ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}` : _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.a ? `__Secure-${cookiePrefix}.${cookieName}` : `${cookiePrefix}.${cookieName}`;\n  const parsedCookie = parseCookies(cookies);\n  const sessionData = parsedCookie.get(name);\n  if (sessionData) {\n    const sessionDataPayload = (0,_shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_5__.s)(_better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_7__.binary.decode(_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__.base64Url.decode(sessionData)));\n    if (!sessionDataPayload) {\n      return null;\n    }\n    const secret = config?.secret || _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_2__.e.BETTER_AUTH_SECRET;\n    if (!secret) {\n      throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_0__.B(\n        \"getCookieCache requires a secret to be provided. Either pass it as an option or set the BETTER_AUTH_SECRET environment variable\"\n      );\n    }\n    const isValid = await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_4__.createHMAC)(\"SHA-256\", \"base64urlnopad\").verify(\n      secret,\n      JSON.stringify({\n        ...sessionDataPayload.session,\n        expiresAt: sessionDataPayload.expiresAt\n      }),\n      sessionDataPayload.signature\n    );\n    if (!isValid) {\n      return null;\n    }\n    return sessionDataPayload.session;\n  }\n  return null;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/cookies/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/index.mjs":
/*!*************************************************!*\
  !*** ./node_modules/better-auth/dist/index.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetterAuthError: () => (/* reexport safe */ _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_18__.B),\n/* harmony export */   HIDE_METADATA: () => (/* reexport safe */ _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_19__.H),\n/* harmony export */   MissingDependencyError: () => (/* reexport safe */ _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_18__.M),\n/* harmony export */   betterAuth: () => (/* binding */ betterAuth),\n/* harmony export */   capitalizeFirstLetter: () => (/* reexport safe */ _shared_better_auth_D_2CmEwz_mjs__WEBPACK_IMPORTED_MODULE_20__.c),\n/* harmony export */   createLogger: () => (/* reexport safe */ _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_8__.c),\n/* harmony export */   generateId: () => (/* reexport safe */ _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_10__.g),\n/* harmony export */   generateState: () => (/* reexport safe */ _shared_better_auth_dn8_oqOu_mjs__WEBPACK_IMPORTED_MODULE_21__.g),\n/* harmony export */   levels: () => (/* reexport safe */ _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_8__.a),\n/* harmony export */   logger: () => (/* reexport safe */ _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_8__.l),\n/* harmony export */   parseState: () => (/* reexport safe */ _shared_better_auth_dn8_oqOu_mjs__WEBPACK_IMPORTED_MODULE_21__.p),\n/* harmony export */   shouldPublishLog: () => (/* reexport safe */ _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_8__.s)\n/* harmony export */ });\n/* harmony import */ var _api_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/api/index.mjs\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _shared_better_auth_OT3XFeFk_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./shared/better-auth.OT3XFeFk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.OT3XFeFk.mjs\");\n/* harmony import */ var _shared_better_auth_gs0ZuLWb_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/better-auth.gs0ZuLWb.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.gs0ZuLWb.mjs\");\n/* harmony import */ var _shared_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared/better-auth.DORkW_Ge.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var _shared_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./shared/better-auth.Cc72UxUH.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cookies/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./shared/better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./social-providers/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs\");\n/* harmony import */ var _shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./shared/better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./shared/better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _shared_better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./shared/better-auth.YwDQhoPc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\");\n/* harmony import */ var _shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./shared/better-auth.VTXNLFMT.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./shared/better-auth.oUCDPPbQ.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.oUCDPPbQ.mjs\");\n/* harmony import */ var _shared_better_auth_D_2CmEwz_mjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./shared/better-auth.D-2CmEwz.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs\");\n/* harmony import */ var _shared_better_auth_dn8_oqOu_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./shared/better-auth.dn8_oqOu.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.dn8_oqOu.mjs\");\n/* harmony import */ var _shared_better_auth_iKoUsdFE_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./shared/better-auth.iKoUsdFE.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _shared_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./shared/better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _shared_better_auth_Cue6reJU_mjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./shared/better-auth.Cue6reJU.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cue6reJU.mjs\");\n/* harmony import */ var _shared_better_auth_WByh1Fkk_mjs__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./shared/better-auth.WByh1Fkk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.WByh1Fkk.mjs\");\n/* harmony import */ var _shared_better_auth_DGdvqtd1_mjs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./shared/better-auth.DGdvqtd1.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DGdvqtd1.mjs\");\n/* harmony import */ var _shared_better_auth_CTsDOF_S_mjs__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./shared/better-auth.CTsDOF_S.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CTsDOF_S.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var _shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./shared/better-auth.DufyW0qf.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs\");\n/* harmony import */ var _shared_better_auth_DDEbWX_S_mjs__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./shared/better-auth.DDEbWX-S.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst DEFAULT_SECRET = \"better-auth-secret-123456789\";\n\nconst init = async (options) => {\n  const adapter = await (0,_shared_better_auth_gs0ZuLWb_mjs__WEBPACK_IMPORTED_MODULE_3__.a)(options);\n  const plugins = options.plugins || [];\n  const internalPlugins = getInternalPlugins(options);\n  const logger = (0,_shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_8__.c)(options.logger);\n  const baseURL = (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_17__.a)(options.baseURL, options.basePath);\n  const secret = options.secret || _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_15__.e.BETTER_AUTH_SECRET || _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_15__.e.AUTH_SECRET || DEFAULT_SECRET;\n  if (secret === DEFAULT_SECRET) {\n    if (_shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_15__.a) {\n      logger.error(\n        \"You are using the default secret. Please set `BETTER_AUTH_SECRET` in your environment variables or pass `secret` in your auth config.\"\n      );\n    }\n  }\n  options = {\n    ...options,\n    secret,\n    baseURL: baseURL ? new URL(baseURL).origin : \"\",\n    basePath: options.basePath || \"/api/auth\",\n    plugins: plugins.concat(internalPlugins)\n  };\n  const cookies = (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_7__.getCookies)(options);\n  const tables = (0,_shared_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(options);\n  const providers = Object.keys(options.socialProviders || {}).map((key) => {\n    const value = options.socialProviders?.[key];\n    if (!value || value.enabled === false) {\n      return null;\n    }\n    if (!value.clientId) {\n      logger.warn(\n        `Social provider ${key} is missing clientId or clientSecret`\n      );\n    }\n    const provider = _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_9__.socialProviders[key](\n      value\n      // TODO: fix this\n    );\n    provider.disableImplicitSignUp = value.disableImplicitSignUp;\n    return provider;\n  }).filter((x) => x !== null);\n  const generateIdFunc = ({ model, size }) => {\n    if (typeof options.advanced?.generateId === \"function\") {\n      return options.advanced.generateId({ model, size });\n    }\n    if (typeof options?.advanced?.database?.generateId === \"function\") {\n      return options.advanced.database.generateId({ model, size });\n    }\n    return (0,_shared_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_10__.g)(size);\n  };\n  const ctx = {\n    appName: options.appName || \"Better Auth\",\n    socialProviders: providers,\n    options,\n    tables,\n    trustedOrigins: getTrustedOrigins(options),\n    baseURL: baseURL || \"\",\n    sessionConfig: {\n      updateAge: options.session?.updateAge !== void 0 ? options.session.updateAge : 24 * 60 * 60,\n      // 24 hours\n      expiresIn: options.session?.expiresIn || 60 * 60 * 24 * 7,\n      // 7 days\n      freshAge: options.session?.freshAge === void 0 ? 60 * 60 * 24 : options.session.freshAge\n    },\n    secret,\n    rateLimit: {\n      ...options.rateLimit,\n      enabled: options.rateLimit?.enabled ?? _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_15__.a,\n      window: options.rateLimit?.window || 10,\n      max: options.rateLimit?.max || 100,\n      storage: options.rateLimit?.storage || (options.secondaryStorage ? \"secondary-storage\" : \"memory\")\n    },\n    authCookies: cookies,\n    logger,\n    generateId: generateIdFunc,\n    session: null,\n    secondaryStorage: options.secondaryStorage,\n    password: {\n      hash: options.emailAndPassword?.password?.hash || _shared_better_auth_OT3XFeFk_mjs__WEBPACK_IMPORTED_MODULE_2__.h,\n      verify: options.emailAndPassword?.password?.verify || _shared_better_auth_OT3XFeFk_mjs__WEBPACK_IMPORTED_MODULE_2__.v,\n      config: {\n        minPasswordLength: options.emailAndPassword?.minPasswordLength || 8,\n        maxPasswordLength: options.emailAndPassword?.maxPasswordLength || 128\n      },\n      checkPassword: _shared_better_auth_YwDQhoPc_mjs__WEBPACK_IMPORTED_MODULE_16__.c\n    },\n    setNewSession(session) {\n      this.newSession = session;\n    },\n    newSession: null,\n    adapter,\n    internalAdapter: (0,_shared_better_auth_gs0ZuLWb_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(adapter, {\n      options,\n      hooks: options.databaseHooks ? [options.databaseHooks] : []}),\n    createAuthCookie: (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_7__.createCookieGetter)(options),\n    async runMigrations() {\n      if (!options.database || \"updateMany\" in options.database) {\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_18__.B(\n          \"Database is not provided or it's an adapter. Migrations are only supported with a database instance.\"\n        );\n      }\n      const { runMigrations } = await (0,_shared_better_auth_gs0ZuLWb_mjs__WEBPACK_IMPORTED_MODULE_3__.e)(options);\n      await runMigrations();\n    }\n  };\n  let { context } = runPluginInit(ctx);\n  return context;\n};\nfunction runPluginInit(ctx) {\n  let options = ctx.options;\n  const plugins = options.plugins || [];\n  let context = ctx;\n  const dbHooks = [];\n  for (const plugin of plugins) {\n    if (plugin.init) {\n      const result = plugin.init(context);\n      if (typeof result === \"object\") {\n        if (result.options) {\n          const { databaseHooks, ...restOpts } = result.options;\n          if (databaseHooks) {\n            dbHooks.push(databaseHooks);\n          }\n          options = (0,defu__WEBPACK_IMPORTED_MODULE_1__.defu)(options, restOpts);\n        }\n        if (result.context) {\n          context = {\n            ...context,\n            ...result.context\n          };\n        }\n      }\n    }\n  }\n  dbHooks.push(options.databaseHooks);\n  context.internalAdapter = (0,_shared_better_auth_gs0ZuLWb_mjs__WEBPACK_IMPORTED_MODULE_3__.c)(ctx.adapter, {\n    options,\n    hooks: dbHooks.filter((u) => u !== void 0),\n    generateId: ctx.generateId\n  });\n  context.options = options;\n  return { context };\n}\nfunction getInternalPlugins(options) {\n  const plugins = [];\n  if (options.advanced?.crossSubDomainCookies?.enabled) ;\n  return plugins;\n}\nfunction getTrustedOrigins(options) {\n  const baseURL = (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_17__.a)(options.baseURL, options.basePath);\n  if (!baseURL) {\n    return [];\n  }\n  const trustedOrigins = [new URL(baseURL).origin];\n  if (options.trustedOrigins && Array.isArray(options.trustedOrigins)) {\n    trustedOrigins.push(...options.trustedOrigins);\n  }\n  const envTrustedOrigins = _shared_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_15__.e.BETTER_AUTH_TRUSTED_ORIGINS;\n  if (envTrustedOrigins) {\n    trustedOrigins.push(...envTrustedOrigins.split(\",\"));\n  }\n  if (trustedOrigins.filter((x) => !x).length) {\n    throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_18__.B(\n      \"A provided trusted origin is invalid, make sure your trusted origins list is properly defined.\"\n    );\n  }\n  return trustedOrigins;\n}\n\nconst betterAuth = (options) => {\n  const authContext = init(options);\n  const { api } = (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getEndpoints)(authContext, options);\n  const errorCodes = options.plugins?.reduce((acc, plugin) => {\n    if (plugin.$ERROR_CODES) {\n      return {\n        ...acc,\n        ...plugin.$ERROR_CODES\n      };\n    }\n    return acc;\n  }, {});\n  return {\n    handler: async (request) => {\n      const ctx = await authContext;\n      const basePath = ctx.options.basePath || \"/api/auth\";\n      if (!ctx.options.baseURL) {\n        const baseURL = (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_17__.a)(void 0, basePath, request);\n        if (baseURL) {\n          ctx.baseURL = baseURL;\n          ctx.options.baseURL = (0,_shared_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_17__.g)(ctx.baseURL) || void 0;\n        } else {\n          throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_18__.B(\n            \"Could not get base URL from request. Please provide a valid base URL.\"\n          );\n        }\n      }\n      ctx.trustedOrigins = [\n        ...options.trustedOrigins ? Array.isArray(options.trustedOrigins) ? options.trustedOrigins : await options.trustedOrigins(request) : [],\n        ctx.options.baseURL\n      ];\n      const { handler } = (0,_api_index_mjs__WEBPACK_IMPORTED_MODULE_0__.router)(ctx, options);\n      return handler(request);\n    },\n    api,\n    options,\n    $context: authContext,\n    $Infer: {},\n    $ERROR_CODES: {\n      ...errorCodes,\n      ..._shared_better_auth_oUCDPPbQ_mjs__WEBPACK_IMPORTED_MODULE_19__.B\n    }\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ isProduction),\n/* harmony export */   b: () => (/* binding */ isDevelopment),\n/* harmony export */   e: () => (/* binding */ env),\n/* harmony export */   i: () => (/* binding */ isTest)\n/* harmony export */ });\nconst _envShim = /* @__PURE__ */ Object.create(null);\nconst _getEnv = (useShim) => globalThis.process?.env || //@ts-expect-error\nglobalThis.Deno?.env.toObject() || //@ts-expect-error\nglobalThis.__env__ || (useShim ? _envShim : globalThis);\nconst env = new Proxy(_envShim, {\n  get(_, prop) {\n    const env2 = _getEnv();\n    return env2[prop] ?? _envShim[prop];\n  },\n  has(_, prop) {\n    const env2 = _getEnv();\n    return prop in env2 || prop in _envShim;\n  },\n  set(_, prop, value) {\n    const env2 = _getEnv(true);\n    env2[prop] = value;\n    return true;\n  },\n  deleteProperty(_, prop) {\n    if (!prop) {\n      return false;\n    }\n    const env2 = _getEnv(true);\n    delete env2[prop];\n    return true;\n  },\n  ownKeys() {\n    const env2 = _getEnv(true);\n    return Object.keys(env2);\n  }\n});\nfunction toBoolean(val) {\n  return val ? val !== \"false\" : false;\n}\nconst nodeENV = typeof process !== \"undefined\" && process.env && \"development\" || \"\";\nconst isProduction = nodeENV === \"production\";\nconst isDevelopment = nodeENV === \"dev\" || nodeENV === \"development\";\nconst isTest = nodeENV === \"test\" || toBoolean(env.TEST);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguOHpveHpnLUYubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsYUFBb0I7QUFDckY7QUFDQTtBQUNBOztBQUV3RSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhaWxleXBhcmtlci9Eb2N1bWVudHMvQ29kaW5nL3JhcGlkLWRldi1leHBvLWZ1bGxzdGFjay1zdGFydGVyLXJlcG8vYmFja2VuZC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguOHpveHpnLUYubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF9lbnZTaGltID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBfZ2V0RW52ID0gKHVzZVNoaW0pID0+IGdsb2JhbFRoaXMucHJvY2Vzcz8uZW52IHx8IC8vQHRzLWV4cGVjdC1lcnJvclxuZ2xvYmFsVGhpcy5EZW5vPy5lbnYudG9PYmplY3QoKSB8fCAvL0B0cy1leHBlY3QtZXJyb3Jcbmdsb2JhbFRoaXMuX19lbnZfXyB8fCAodXNlU2hpbSA/IF9lbnZTaGltIDogZ2xvYmFsVGhpcyk7XG5jb25zdCBlbnYgPSBuZXcgUHJveHkoX2VudlNoaW0sIHtcbiAgZ2V0KF8sIHByb3ApIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudigpO1xuICAgIHJldHVybiBlbnYyW3Byb3BdID8/IF9lbnZTaGltW3Byb3BdO1xuICB9LFxuICBoYXMoXywgcHJvcCkge1xuICAgIGNvbnN0IGVudjIgPSBfZ2V0RW52KCk7XG4gICAgcmV0dXJuIHByb3AgaW4gZW52MiB8fCBwcm9wIGluIF9lbnZTaGltO1xuICB9LFxuICBzZXQoXywgcHJvcCwgdmFsdWUpIHtcbiAgICBjb25zdCBlbnYyID0gX2dldEVudih0cnVlKTtcbiAgICBlbnYyW3Byb3BdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KF8sIHByb3ApIHtcbiAgICBpZiAoIXByb3ApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYodHJ1ZSk7XG4gICAgZGVsZXRlIGVudjJbcHJvcF07XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIG93bktleXMoKSB7XG4gICAgY29uc3QgZW52MiA9IF9nZXRFbnYodHJ1ZSk7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGVudjIpO1xuICB9XG59KTtcbmZ1bmN0aW9uIHRvQm9vbGVhbih2YWwpIHtcbiAgcmV0dXJuIHZhbCA/IHZhbCAhPT0gXCJmYWxzZVwiIDogZmFsc2U7XG59XG5jb25zdCBub2RlRU5WID0gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgXCJcIjtcbmNvbnN0IGlzUHJvZHVjdGlvbiA9IG5vZGVFTlYgPT09IFwicHJvZHVjdGlvblwiO1xuY29uc3QgaXNEZXZlbG9wbWVudCA9IG5vZGVFTlYgPT09IFwiZGV2XCIgfHwgbm9kZUVOViA9PT0gXCJkZXZlbG9wbWVudFwiO1xuY29uc3QgaXNUZXN0ID0gbm9kZUVOViA9PT0gXCJ0ZXN0XCIgfHwgdG9Cb29sZWFuKGVudi5URVNUKTtcblxuZXhwb3J0IHsgaXNQcm9kdWN0aW9uIGFzIGEsIGlzRGV2ZWxvcG1lbnQgYXMgYiwgZW52IGFzIGUsIGlzVGVzdCBhcyBpIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ generateRandomString)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n\n\nconst generateRandomString = (0,_better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__.createRandomStringGenerator)(\n  \"a-z\",\n  \"0-9\",\n  \"A-Z\",\n  \"-_\"\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQjRRb3hkZ2MubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdFOztBQUV4RSw2QkFBNkIsc0ZBQTJCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXFDIiwic291cmNlcyI6WyIvVXNlcnMvYmFpbGV5cGFya2VyL0RvY3VtZW50cy9Db2RpbmcvcmFwaWQtZGV2LWV4cG8tZnVsbHN0YWNrLXN0YXJ0ZXItcmVwby9iYWNrZW5kL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5CNFFveGRnYy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUmFuZG9tU3RyaW5nR2VuZXJhdG9yIH0gZnJvbSAnQGJldHRlci1hdXRoL3V0aWxzL3JhbmRvbSc7XG5cbmNvbnN0IGdlbmVyYXRlUmFuZG9tU3RyaW5nID0gY3JlYXRlUmFuZG9tU3RyaW5nR2VuZXJhdG9yKFxuICBcImEtelwiLFxuICBcIjAtOVwiLFxuICBcIkEtWlwiLFxuICBcIi1fXCJcbik7XG5cbmV4cG9ydCB7IGdlbmVyYXRlUmFuZG9tU3RyaW5nIGFzIGcgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ generateId)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n\n\nconst generateId = (size) => {\n  return (0,_better_auth_utils_random__WEBPACK_IMPORTED_MODULE_0__.createRandomStringGenerator)(\"a-z\", \"A-Z\", \"0-9\")(size || 32);\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQlVQUFJYZksubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdFOztBQUV4RTtBQUNBLFNBQVMsc0ZBQTJCO0FBQ3BDOztBQUUyQiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhaWxleXBhcmtlci9Eb2N1bWVudHMvQ29kaW5nL3JhcGlkLWRldi1leHBvLWZ1bGxzdGFjay1zdGFydGVyLXJlcG8vYmFja2VuZC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQlVQUFJYZksubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVJhbmRvbVN0cmluZ0dlbmVyYXRvciB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscy9yYW5kb20nO1xuXG5jb25zdCBnZW5lcmF0ZUlkID0gKHNpemUpID0+IHtcbiAgcmV0dXJuIGNyZWF0ZVJhbmRvbVN0cmluZ0dlbmVyYXRvcihcImEtelwiLCBcIkEtWlwiLCBcIjAtOVwiKShzaXplIHx8IDMyKTtcbn07XG5cbmV4cG9ydCB7IGdlbmVyYXRlSWQgYXMgZyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.CTsDOF_S.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.CTsDOF_S.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   m: () => (/* binding */ memoryAdapter)\n/* harmony export */ });\n/* harmony import */ var _better_auth_WByh1Fkk_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.WByh1Fkk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.WByh1Fkk.mjs\");\n\n\nconst memoryAdapter = (db, config) => (0,_better_auth_WByh1Fkk_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n  config: {\n    adapterId: \"memory\",\n    adapterName: \"Memory Adapter\",\n    usePlural: false,\n    debugLogs: config?.debugLogs || false,\n    customTransformInput(props) {\n      if (props.options.advanced?.database?.useNumberId && props.field === \"id\" && props.action === \"create\") {\n        return db[props.model].length + 1;\n      }\n      return props.data;\n    }\n  },\n  adapter: ({ getFieldName, options }) => {\n    function convertWhereClause(where, table) {\n      return table.filter((record) => {\n        return where.every((clause) => {\n          let { field, value, operator } = clause;\n          if (operator === \"in\") {\n            if (!Array.isArray(value)) {\n              throw new Error(\"Value must be an array\");\n            }\n            return value.includes(record[field]);\n          } else if (operator === \"contains\") {\n            return record[field].includes(value);\n          } else if (operator === \"starts_with\") {\n            return record[field].startsWith(value);\n          } else if (operator === \"ends_with\") {\n            return record[field].endsWith(value);\n          } else {\n            return record[field] === value;\n          }\n        });\n      });\n    }\n    return {\n      create: async ({ model, data }) => {\n        if (options.advanced?.database?.useNumberId) {\n          data.id = db[model].length + 1;\n        }\n        db[model].push(data);\n        return data;\n      },\n      findOne: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, table);\n        const record = res[0] || null;\n        return record;\n      },\n      findMany: async ({ model, where, sortBy, limit, offset }) => {\n        let table = db[model];\n        if (where) {\n          table = convertWhereClause(where, table);\n        }\n        if (sortBy) {\n          table = table.sort((a, b) => {\n            const field = getFieldName({ model, field: sortBy.field });\n            if (sortBy.direction === \"asc\") {\n              return a[field] > b[field] ? 1 : -1;\n            } else {\n              return a[field] < b[field] ? 1 : -1;\n            }\n          });\n        }\n        if (offset !== void 0) {\n          table = table.slice(offset);\n        }\n        if (limit !== void 0) {\n          table = table.slice(0, limit);\n        }\n        return table;\n      },\n      count: async ({ model }) => {\n        return db[model].length;\n      },\n      update: async ({ model, where, update }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, table);\n        res.forEach((record) => {\n          Object.assign(record, update);\n        });\n        return res[0] || null;\n      },\n      delete: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, table);\n        db[model] = table.filter((record) => !res.includes(record));\n      },\n      deleteMany: async ({ model, where }) => {\n        const table = db[model];\n        const res = convertWhereClause(where, table);\n        let count = 0;\n        db[model] = table.filter((record) => {\n          if (res.includes(record)) {\n            count++;\n            return false;\n          }\n          return !res.includes(record);\n        });\n        return count;\n      },\n      updateMany({ model, where, update }) {\n        const table = db[model];\n        const res = convertWhereClause(where, table);\n        res.forEach((record) => {\n          Object.assign(record, update);\n        });\n        return res[0] || null;\n      }\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ1RzRE9GX1MubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWdFOztBQUVoRSxzQ0FBc0MsNERBQWE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxjQUFjLHVCQUF1QjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUJBQXlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBLHVCQUF1QixhQUFhO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1Asd0JBQXdCLGNBQWM7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AseUJBQXlCLHFDQUFxQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsNEJBQTRCO0FBQ3JFO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0EsT0FBTztBQUNQLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxPQUFPO0FBQ1AsdUJBQXVCLGNBQWM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLDJCQUEyQixjQUFjO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUCxtQkFBbUIsc0JBQXNCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFNkIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWlsZXlwYXJrZXIvRG9jdW1lbnRzL0NvZGluZy9yYXBpZC1kZXYtZXhwby1mdWxsc3RhY2stc3RhcnRlci1yZXBvL2JhY2tlbmQvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLkNUc0RPRl9TLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjIGFzIGNyZWF0ZUFkYXB0ZXIgfSBmcm9tICcuL2JldHRlci1hdXRoLldCeWgxRmtrLm1qcyc7XG5cbmNvbnN0IG1lbW9yeUFkYXB0ZXIgPSAoZGIsIGNvbmZpZykgPT4gY3JlYXRlQWRhcHRlcih7XG4gIGNvbmZpZzoge1xuICAgIGFkYXB0ZXJJZDogXCJtZW1vcnlcIixcbiAgICBhZGFwdGVyTmFtZTogXCJNZW1vcnkgQWRhcHRlclwiLFxuICAgIHVzZVBsdXJhbDogZmFsc2UsXG4gICAgZGVidWdMb2dzOiBjb25maWc/LmRlYnVnTG9ncyB8fCBmYWxzZSxcbiAgICBjdXN0b21UcmFuc2Zvcm1JbnB1dChwcm9wcykge1xuICAgICAgaWYgKHByb3BzLm9wdGlvbnMuYWR2YW5jZWQ/LmRhdGFiYXNlPy51c2VOdW1iZXJJZCAmJiBwcm9wcy5maWVsZCA9PT0gXCJpZFwiICYmIHByb3BzLmFjdGlvbiA9PT0gXCJjcmVhdGVcIikge1xuICAgICAgICByZXR1cm4gZGJbcHJvcHMubW9kZWxdLmxlbmd0aCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcHMuZGF0YTtcbiAgICB9XG4gIH0sXG4gIGFkYXB0ZXI6ICh7IGdldEZpZWxkTmFtZSwgb3B0aW9ucyB9KSA9PiB7XG4gICAgZnVuY3Rpb24gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCB0YWJsZSkge1xuICAgICAgcmV0dXJuIHRhYmxlLmZpbHRlcigocmVjb3JkKSA9PiB7XG4gICAgICAgIHJldHVybiB3aGVyZS5ldmVyeSgoY2xhdXNlKSA9PiB7XG4gICAgICAgICAgbGV0IHsgZmllbGQsIHZhbHVlLCBvcGVyYXRvciB9ID0gY2xhdXNlO1xuICAgICAgICAgIGlmIChvcGVyYXRvciA9PT0gXCJpblwiKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlIG11c3QgYmUgYW4gYXJyYXlcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuaW5jbHVkZXMocmVjb3JkW2ZpZWxkXSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJjb250YWluc1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXS5pbmNsdWRlcyh2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gXCJzdGFydHNfd2l0aFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXS5zdGFydHNXaXRoKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSBcImVuZHNfd2l0aFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb3JkW2ZpZWxkXS5lbmRzV2l0aCh2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvcmRbZmllbGRdID09PSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGU6IGFzeW5jICh7IG1vZGVsLCBkYXRhIH0pID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYWR2YW5jZWQ/LmRhdGFiYXNlPy51c2VOdW1iZXJJZCkge1xuICAgICAgICAgIGRhdGEuaWQgPSBkYlttb2RlbF0ubGVuZ3RoICsgMTtcbiAgICAgICAgfVxuICAgICAgICBkYlttb2RlbF0ucHVzaChkYXRhKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9LFxuICAgICAgZmluZE9uZTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlIH0pID0+IHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBkYlttb2RlbF07XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgdGFibGUpO1xuICAgICAgICBjb25zdCByZWNvcmQgPSByZXNbMF0gfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICAgIH0sXG4gICAgICBmaW5kTWFueTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlLCBzb3J0QnksIGxpbWl0LCBvZmZzZXQgfSkgPT4ge1xuICAgICAgICBsZXQgdGFibGUgPSBkYlttb2RlbF07XG4gICAgICAgIGlmICh3aGVyZSkge1xuICAgICAgICAgIHRhYmxlID0gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCB0YWJsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvcnRCeSkge1xuICAgICAgICAgIHRhYmxlID0gdGFibGUuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGQgPSBnZXRGaWVsZE5hbWUoeyBtb2RlbCwgZmllbGQ6IHNvcnRCeS5maWVsZCB9KTtcbiAgICAgICAgICAgIGlmIChzb3J0QnkuZGlyZWN0aW9uID09PSBcImFzY1wiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhW2ZpZWxkXSA+IGJbZmllbGRdID8gMSA6IC0xO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFbZmllbGRdIDwgYltmaWVsZF0gPyAxIDogLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgdGFibGUgPSB0YWJsZS5zbGljZShvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgdGFibGUgPSB0YWJsZS5zbGljZSgwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgICAgfSxcbiAgICAgIGNvdW50OiBhc3luYyAoeyBtb2RlbCB9KSA9PiB7XG4gICAgICAgIHJldHVybiBkYlttb2RlbF0ubGVuZ3RoO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlLCB1cGRhdGUgfSkgPT4ge1xuICAgICAgICBjb25zdCB0YWJsZSA9IGRiW21vZGVsXTtcbiAgICAgICAgY29uc3QgcmVzID0gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCB0YWJsZSk7XG4gICAgICAgIHJlcy5mb3JFYWNoKChyZWNvcmQpID0+IHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHJlY29yZCwgdXBkYXRlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNbMF0gfHwgbnVsbDtcbiAgICAgIH0sXG4gICAgICBkZWxldGU6IGFzeW5jICh7IG1vZGVsLCB3aGVyZSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gZGJbbW9kZWxdO1xuICAgICAgICBjb25zdCByZXMgPSBjb252ZXJ0V2hlcmVDbGF1c2Uod2hlcmUsIHRhYmxlKTtcbiAgICAgICAgZGJbbW9kZWxdID0gdGFibGUuZmlsdGVyKChyZWNvcmQpID0+ICFyZXMuaW5jbHVkZXMocmVjb3JkKSk7XG4gICAgICB9LFxuICAgICAgZGVsZXRlTWFueTogYXN5bmMgKHsgbW9kZWwsIHdoZXJlIH0pID0+IHtcbiAgICAgICAgY29uc3QgdGFibGUgPSBkYlttb2RlbF07XG4gICAgICAgIGNvbnN0IHJlcyA9IGNvbnZlcnRXaGVyZUNsYXVzZSh3aGVyZSwgdGFibGUpO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBkYlttb2RlbF0gPSB0YWJsZS5maWx0ZXIoKHJlY29yZCkgPT4ge1xuICAgICAgICAgIGlmIChyZXMuaW5jbHVkZXMocmVjb3JkKSkge1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICFyZXMuaW5jbHVkZXMocmVjb3JkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICAgIH0sXG4gICAgICB1cGRhdGVNYW55KHsgbW9kZWwsIHdoZXJlLCB1cGRhdGUgfSkge1xuICAgICAgICBjb25zdCB0YWJsZSA9IGRiW21vZGVsXTtcbiAgICAgICAgY29uc3QgcmVzID0gY29udmVydFdoZXJlQ2xhdXNlKHdoZXJlLCB0YWJsZSk7XG4gICAgICAgIHJlcy5mb3JFYWNoKChyZWNvcmQpID0+IHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHJlY29yZCwgdXBkYXRlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXNbMF0gfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcblxuZXhwb3J0IHsgbWVtb3J5QWRhcHRlciBhcyBtIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.CTsDOF_S.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getDate)\n/* harmony export */ });\nconst getDate = (span, unit = \"ms\") => {\n  return new Date(Date.now() + (unit === \"sec\" ? span * 1e3 : span));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ1c2RDllU3gubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRXdCIiwic291cmNlcyI6WyIvVXNlcnMvYmFpbGV5cGFya2VyL0RvY3VtZW50cy9Db2RpbmcvcmFwaWQtZGV2LWV4cG8tZnVsbHN0YWNrLXN0YXJ0ZXItcmVwby9iYWNrZW5kL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5DVzZEOWVTeC5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ2V0RGF0ZSA9IChzcGFuLCB1bml0ID0gXCJtc1wiKSA9PiB7XG4gIHJldHVybiBuZXcgRGF0ZShEYXRlLm5vdygpICsgKHVuaXQgPT09IFwic2VjXCIgPyBzcGFuICogMWUzIDogc3BhbikpO1xufTtcblxuZXhwb3J0IHsgZ2V0RGF0ZSBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ accountSchema),\n/* harmony export */   b: () => (/* binding */ parseUserOutput),\n/* harmony export */   c: () => (/* binding */ parseAccountOutput),\n/* harmony export */   d: () => (/* binding */ parseSessionOutput),\n/* harmony export */   e: () => (/* binding */ parseInputData),\n/* harmony export */   f: () => (/* binding */ parseUserInput),\n/* harmony export */   g: () => (/* binding */ getAllFields),\n/* harmony export */   h: () => (/* binding */ parseAdditionalUserInput),\n/* harmony export */   i: () => (/* binding */ parseAccountInput),\n/* harmony export */   j: () => (/* binding */ parseSessionInput),\n/* harmony export */   m: () => (/* binding */ mergeSchema),\n/* harmony export */   p: () => (/* binding */ parseOutputData),\n/* harmony export */   s: () => (/* binding */ sessionSchema),\n/* harmony export */   u: () => (/* binding */ userSchema),\n/* harmony export */   v: () => (/* binding */ verificationSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n\n\n\nconst accountSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  providerId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  accountId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  userId: zod__WEBPACK_IMPORTED_MODULE_0__.z.coerce.string(),\n  accessToken: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  refreshToken: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  idToken: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  /**\n   * Access token expires at\n   */\n  accessTokenExpiresAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().nullish(),\n  /**\n   * Refresh token expires at\n   */\n  refreshTokenExpiresAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().nullish(),\n  /**\n   * The scopes that the user has authorized\n   */\n  scope: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  /**\n   * Password is only stored in the credential provider\n   */\n  password: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(() => /* @__PURE__ */ new Date())\n});\nconst userSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  email: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((val) => val.toLowerCase()),\n  emailVerified: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false),\n  name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  image: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(() => /* @__PURE__ */ new Date())\n});\nconst sessionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  userId: zod__WEBPACK_IMPORTED_MODULE_0__.z.coerce.string(),\n  expiresAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(() => /* @__PURE__ */ new Date()),\n  token: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  ipAddress: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish(),\n  userAgent: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullish()\n});\nconst verificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  value: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  createdAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(() => /* @__PURE__ */ new Date()),\n  updatedAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date().default(() => /* @__PURE__ */ new Date()),\n  expiresAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.date(),\n  identifier: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nfunction parseOutputData(data, schema) {\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in data) {\n    const field = fields[key];\n    if (!field) {\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (field.returned === false) {\n      continue;\n    }\n    parsedData[key] = data[key];\n  }\n  return parsedData;\n}\nfunction getAllFields(options, table) {\n  let schema = {\n    ...table === \"user\" ? options.user?.additionalFields : {},\n    ...table === \"session\" ? options.session?.additionalFields : {}\n  };\n  for (const plugin of options.plugins || []) {\n    if (plugin.schema && plugin.schema[table]) {\n      schema = {\n        ...schema,\n        ...plugin.schema[table].fields\n      };\n    }\n  }\n  return schema;\n}\nfunction parseUserOutput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseOutputData(user, { fields: schema });\n}\nfunction parseAccountOutput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseOutputData(account, { fields: schema });\n}\nfunction parseSessionOutput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseOutputData(session, { fields: schema });\n}\nfunction parseInputData(data, schema) {\n  const action = schema.action || \"create\";\n  const fields = schema.fields;\n  const parsedData = {};\n  for (const key in fields) {\n    if (key in data) {\n      if (fields[key].input === false) {\n        if (fields[key].defaultValue) {\n          parsedData[key] = fields[key].defaultValue;\n          continue;\n        }\n        continue;\n      }\n      if (fields[key].validator?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].validator.input.parse(data[key]);\n        continue;\n      }\n      if (fields[key].transform?.input && data[key] !== void 0) {\n        parsedData[key] = fields[key].transform?.input(data[key]);\n        continue;\n      }\n      parsedData[key] = data[key];\n      continue;\n    }\n    if (fields[key].defaultValue && action === \"create\") {\n      parsedData[key] = fields[key].defaultValue;\n      continue;\n    }\n    if (fields[key].required && action === \"create\") {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n        message: `${key} is required`\n      });\n    }\n  }\n  return parsedData;\n}\nfunction parseUserInput(options, user, action) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema, action });\n}\nfunction parseAdditionalUserInput(options, user) {\n  const schema = getAllFields(options, \"user\");\n  return parseInputData(user || {}, { fields: schema });\n}\nfunction parseAccountInput(options, account) {\n  const schema = getAllFields(options, \"account\");\n  return parseInputData(account, { fields: schema });\n}\nfunction parseSessionInput(options, session) {\n  const schema = getAllFields(options, \"session\");\n  return parseInputData(session, { fields: schema });\n}\nfunction mergeSchema(schema, newSchema) {\n  if (!newSchema) {\n    return schema;\n  }\n  for (const table in newSchema) {\n    const newModelName = newSchema[table]?.modelName;\n    if (newModelName) {\n      schema[table].modelName = newModelName;\n    }\n    for (const field in schema[table].fields) {\n      const newField = newSchema[table]?.fields?.[field];\n      if (!newField) {\n        continue;\n      }\n      schema[table].fields[field].fieldName = newField;\n    }\n  }\n  return schema;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ levels),\n/* harmony export */   c: () => (/* binding */ createLogger),\n/* harmony export */   l: () => (/* binding */ logger),\n/* harmony export */   s: () => (/* binding */ shouldPublishLog)\n/* harmony export */ });\nconst levels = [\"info\", \"success\", \"warn\", \"error\", \"debug\"];\nfunction shouldPublishLog(currentLogLevel, logLevel) {\n  return levels.indexOf(logLevel) <= levels.indexOf(currentLogLevel);\n}\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    red: \"\\x1B[31m\",\n    green: \"\\x1B[32m\",\n    yellow: \"\\x1B[33m\",\n    blue: \"\\x1B[34m\",\n    magenta: \"\\x1B[35m\"}};\nconst levelColors = {\n  info: colors.fg.blue,\n  success: colors.fg.green,\n  warn: colors.fg.yellow,\n  error: colors.fg.red,\n  debug: colors.fg.magenta\n};\nconst formatMessage = (level, message) => {\n  const timestamp = (/* @__PURE__ */ new Date()).toISOString();\n  return `${colors.dim}${timestamp}${colors.reset} ${levelColors[level]}${level.toUpperCase()}${colors.reset} ${colors.bright}[Better Auth]:${colors.reset} ${message}`;\n};\nconst createLogger = (options) => {\n  const enabled = options?.disabled !== true;\n  const logLevel = options?.level ?? \"error\";\n  const LogFunc = (level, message, args = []) => {\n    if (!enabled || !shouldPublishLog(logLevel, level)) {\n      return;\n    }\n    const formattedMessage = formatMessage(level, message);\n    if (!options || typeof options.log !== \"function\") {\n      if (level === \"error\") {\n        console.error(formattedMessage, ...args);\n      } else if (level === \"warn\") {\n        console.warn(formattedMessage, ...args);\n      } else {\n        console.log(formattedMessage, ...args);\n      }\n      return;\n    }\n    options.log(level === \"success\" ? \"info\" : level, message, ...args);\n  };\n  return Object.fromEntries(\n    levels.map((level) => [\n      level,\n      (...[message, ...args]) => LogFunc(level, message, args)\n    ])\n  );\n};\nconst logger = createLogger();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguQ3F5a2o4MkoubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxXQUFXLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsY0FBYyxnQkFBZ0IsY0FBYyxFQUFFLFFBQVE7QUFDdEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRThFIiwic291cmNlcyI6WyIvVXNlcnMvYmFpbGV5cGFya2VyL0RvY3VtZW50cy9Db2RpbmcvcmFwaWQtZGV2LWV4cG8tZnVsbHN0YWNrLXN0YXJ0ZXItcmVwby9iYWNrZW5kL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5DcXlrajgySi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbGV2ZWxzID0gW1wiaW5mb1wiLCBcInN1Y2Nlc3NcIiwgXCJ3YXJuXCIsIFwiZXJyb3JcIiwgXCJkZWJ1Z1wiXTtcbmZ1bmN0aW9uIHNob3VsZFB1Ymxpc2hMb2coY3VycmVudExvZ0xldmVsLCBsb2dMZXZlbCkge1xuICByZXR1cm4gbGV2ZWxzLmluZGV4T2YobG9nTGV2ZWwpIDw9IGxldmVscy5pbmRleE9mKGN1cnJlbnRMb2dMZXZlbCk7XG59XG5jb25zdCBjb2xvcnMgPSB7XG4gIHJlc2V0OiBcIlxceDFCWzBtXCIsXG4gIGJyaWdodDogXCJcXHgxQlsxbVwiLFxuICBkaW06IFwiXFx4MUJbMm1cIixcbiAgZmc6IHtcbiAgICByZWQ6IFwiXFx4MUJbMzFtXCIsXG4gICAgZ3JlZW46IFwiXFx4MUJbMzJtXCIsXG4gICAgeWVsbG93OiBcIlxceDFCWzMzbVwiLFxuICAgIGJsdWU6IFwiXFx4MUJbMzRtXCIsXG4gICAgbWFnZW50YTogXCJcXHgxQlszNW1cIn19O1xuY29uc3QgbGV2ZWxDb2xvcnMgPSB7XG4gIGluZm86IGNvbG9ycy5mZy5ibHVlLFxuICBzdWNjZXNzOiBjb2xvcnMuZmcuZ3JlZW4sXG4gIHdhcm46IGNvbG9ycy5mZy55ZWxsb3csXG4gIGVycm9yOiBjb2xvcnMuZmcucmVkLFxuICBkZWJ1ZzogY29sb3JzLmZnLm1hZ2VudGFcbn07XG5jb25zdCBmb3JtYXRNZXNzYWdlID0gKGxldmVsLCBtZXNzYWdlKSA9PiB7XG4gIGNvbnN0IHRpbWVzdGFtcCA9ICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSkudG9JU09TdHJpbmcoKTtcbiAgcmV0dXJuIGAke2NvbG9ycy5kaW19JHt0aW1lc3RhbXB9JHtjb2xvcnMucmVzZXR9ICR7bGV2ZWxDb2xvcnNbbGV2ZWxdfSR7bGV2ZWwudG9VcHBlckNhc2UoKX0ke2NvbG9ycy5yZXNldH0gJHtjb2xvcnMuYnJpZ2h0fVtCZXR0ZXIgQXV0aF06JHtjb2xvcnMucmVzZXR9ICR7bWVzc2FnZX1gO1xufTtcbmNvbnN0IGNyZWF0ZUxvZ2dlciA9IChvcHRpb25zKSA9PiB7XG4gIGNvbnN0IGVuYWJsZWQgPSBvcHRpb25zPy5kaXNhYmxlZCAhPT0gdHJ1ZTtcbiAgY29uc3QgbG9nTGV2ZWwgPSBvcHRpb25zPy5sZXZlbCA/PyBcImVycm9yXCI7XG4gIGNvbnN0IExvZ0Z1bmMgPSAobGV2ZWwsIG1lc3NhZ2UsIGFyZ3MgPSBbXSkgPT4ge1xuICAgIGlmICghZW5hYmxlZCB8fCAhc2hvdWxkUHVibGlzaExvZyhsb2dMZXZlbCwgbGV2ZWwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGZvcm1hdHRlZE1lc3NhZ2UgPSBmb3JtYXRNZXNzYWdlKGxldmVsLCBtZXNzYWdlKTtcbiAgICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMubG9nICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGlmIChsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0dGVkTWVzc2FnZSwgLi4uYXJncyk7XG4gICAgICB9IGVsc2UgaWYgKGxldmVsID09PSBcIndhcm5cIikge1xuICAgICAgICBjb25zb2xlLndhcm4oZm9ybWF0dGVkTWVzc2FnZSwgLi4uYXJncyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhmb3JtYXR0ZWRNZXNzYWdlLCAuLi5hcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3B0aW9ucy5sb2cobGV2ZWwgPT09IFwic3VjY2Vzc1wiID8gXCJpbmZvXCIgOiBsZXZlbCwgbWVzc2FnZSwgLi4uYXJncyk7XG4gIH07XG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgbGV2ZWxzLm1hcCgobGV2ZWwpID0+IFtcbiAgICAgIGxldmVsLFxuICAgICAgKC4uLlttZXNzYWdlLCAuLi5hcmdzXSkgPT4gTG9nRnVuYyhsZXZlbCwgbWVzc2FnZSwgYXJncylcbiAgICBdKVxuICApO1xufTtcbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcigpO1xuXG5leHBvcnQgeyBsZXZlbHMgYXMgYSwgY3JlYXRlTG9nZ2VyIGFzIGMsIGxvZ2dlciBhcyBsLCBzaG91bGRQdWJsaXNoTG9nIGFzIHMgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cue6reJU.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.Cue6reJU.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createKyselyAdapter),\n/* harmony export */   k: () => (/* binding */ kyselyAdapter)\n/* harmony export */ });\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/dialect/mssql/mssql-dialect.js\");\n/* harmony import */ var kysely__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! kysely */ \"(rsc)/./node_modules/kysely/dist/esm/kysely.js\");\n/* harmony import */ var _better_auth_WByh1Fkk_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.WByh1Fkk.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.WByh1Fkk.mjs\");\n\n\n\nfunction getDatabaseType(db) {\n  if (!db) {\n    return null;\n  }\n  if (\"dialect\" in db) {\n    return getDatabaseType(db.dialect);\n  }\n  if (\"createDriver\" in db) {\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_1__.SqliteDialect) {\n      return \"sqlite\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_2__.MysqlDialect) {\n      return \"mysql\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_3__.PostgresDialect) {\n      return \"postgres\";\n    }\n    if (db instanceof kysely__WEBPACK_IMPORTED_MODULE_4__.MssqlDialect) {\n      return \"mssql\";\n    }\n  }\n  if (\"aggregate\" in db) {\n    return \"sqlite\";\n  }\n  if (\"getConnection\" in db) {\n    return \"mysql\";\n  }\n  if (\"connect\" in db) {\n    return \"postgres\";\n  }\n  if (\"fileControl\" in db) {\n    return \"sqlite\";\n  }\n  return null;\n}\nconst createKyselyAdapter = async (config) => {\n  const db = config.database;\n  if (!db) {\n    return {\n      kysely: null,\n      databaseType: null\n    };\n  }\n  if (\"db\" in db) {\n    return {\n      kysely: db.db,\n      databaseType: db.type\n    };\n  }\n  if (\"dialect\" in db) {\n    return {\n      kysely: new kysely__WEBPACK_IMPORTED_MODULE_5__.Kysely({ dialect: db.dialect }),\n      databaseType: db.type\n    };\n  }\n  let dialect = void 0;\n  const databaseType = getDatabaseType(db);\n  if (\"createDriver\" in db) {\n    dialect = db;\n  }\n  if (\"aggregate\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_1__.SqliteDialect({\n      database: db\n    });\n  }\n  if (\"getConnection\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_2__.MysqlDialect(db);\n  }\n  if (\"connect\" in db) {\n    dialect = new kysely__WEBPACK_IMPORTED_MODULE_3__.PostgresDialect({\n      pool: db\n    });\n  }\n  if (\"fileControl\" in db) {\n    const { BunSqliteDialect } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/better-auth\").then(__webpack_require__.bind(__webpack_require__, /*! ../chunks/bun-sqlite-dialect.mjs */ \"(rsc)/./node_modules/better-auth/dist/chunks/bun-sqlite-dialect.mjs\"));\n    dialect = new BunSqliteDialect({\n      database: db\n    });\n  }\n  return {\n    kysely: dialect ? new kysely__WEBPACK_IMPORTED_MODULE_5__.Kysely({ dialect }) : null,\n    databaseType\n  };\n};\n\nconst kyselyAdapter = (db, config) => (0,_better_auth_WByh1Fkk_mjs__WEBPACK_IMPORTED_MODULE_0__.c)({\n  config: {\n    adapterId: \"kysely\",\n    adapterName: \"Kysely Adapter\",\n    usePlural: config?.usePlural,\n    debugLogs: config?.debugLogs,\n    supportsBooleans: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n    supportsDates: config?.type === \"sqlite\" || config?.type === \"mssql\" || !config?.type ? false : true,\n    supportsJSON: false\n  },\n  adapter: ({ getFieldName, schema }) => {\n    const withReturning = async (values, builder, model, where) => {\n      let res;\n      if (config?.type === \"mysql\") {\n        await builder.execute();\n        const field = values.id ? \"id\" : where.length > 0 && where[0].field ? where[0].field : \"id\";\n        if (!values.id && where.length === 0) {\n          res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").limit(1).executeTakeFirst();\n          return res;\n        }\n        const value = values[field] || where[0].value;\n        res = await db.selectFrom(model).selectAll().orderBy(getFieldName({ model, field }), \"desc\").where(getFieldName({ model, field }), \"=\", value).limit(1).executeTakeFirst();\n        return res;\n      }\n      if (config?.type === \"mssql\") {\n        res = await builder.outputAll(\"inserted\").executeTakeFirst();\n        return res;\n      }\n      res = await builder.returningAll().executeTakeFirst();\n      return res;\n    };\n    function transformValueToDB(value, model, field) {\n      if (field === \"id\") {\n        return value;\n      }\n      const { type = \"sqlite\" } = config || {};\n      let f = schema[model]?.fields[field];\n      if (!f) {\n        f = Object.values(schema).find((f2) => f2.modelName === model);\n      }\n      if (f.type === \"boolean\" && (type === \"sqlite\" || type === \"mssql\") && value !== null && value !== void 0) {\n        return value ? 1 : 0;\n      }\n      if (f.type === \"date\" && value && value instanceof Date) {\n        return type === \"sqlite\" ? value.toISOString() : value;\n      }\n      return value;\n    }\n    function convertWhereClause(model, w) {\n      if (!w)\n        return {\n          and: null,\n          or: null\n        };\n      const conditions = {\n        and: [],\n        or: []\n      };\n      w.forEach((condition) => {\n        let {\n          field: _field,\n          value,\n          operator = \"=\",\n          connector = \"AND\"\n        } = condition;\n        const field = getFieldName({ model, field: _field });\n        value = transformValueToDB(value, model, _field);\n        const expr = (eb) => {\n          if (operator.toLowerCase() === \"in\") {\n            return eb(field, \"in\", Array.isArray(value) ? value : [value]);\n          }\n          if (operator === \"contains\") {\n            return eb(field, \"like\", `%${value}%`);\n          }\n          if (operator === \"starts_with\") {\n            return eb(field, \"like\", `${value}%`);\n          }\n          if (operator === \"ends_with\") {\n            return eb(field, \"like\", `%${value}`);\n          }\n          if (operator === \"eq\") {\n            return eb(field, \"=\", value);\n          }\n          if (operator === \"ne\") {\n            return eb(field, \"<>\", value);\n          }\n          if (operator === \"gt\") {\n            return eb(field, \">\", value);\n          }\n          if (operator === \"gte\") {\n            return eb(field, \">=\", value);\n          }\n          if (operator === \"lt\") {\n            return eb(field, \"<\", value);\n          }\n          if (operator === \"lte\") {\n            return eb(field, \"<=\", value);\n          }\n          return eb(field, operator, value);\n        };\n        if (connector === \"OR\") {\n          conditions.or.push(expr);\n        } else {\n          conditions.and.push(expr);\n        }\n      });\n      return {\n        and: conditions.and.length ? conditions.and : null,\n        or: conditions.or.length ? conditions.or : null\n      };\n    }\n    return {\n      async create({ data, model }) {\n        const builder = db.insertInto(model).values(data);\n        return await withReturning(data, builder, model, []);\n      },\n      async findOne({ model, where, select }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model).selectAll();\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.executeTakeFirst();\n        if (!res) return null;\n        return res;\n      },\n      async findMany({ model, where, limit, offset, sortBy }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        if (config?.type === \"mssql\") {\n          if (!offset) {\n            query = query.top(limit || 100);\n          }\n        } else {\n          query = query.limit(limit || 100);\n        }\n        if (sortBy) {\n          query = query.orderBy(\n            getFieldName({ model, field: sortBy.field }),\n            sortBy.direction\n          );\n        }\n        if (offset) {\n          if (config?.type === \"mssql\") {\n            if (!sortBy) {\n              query = query.orderBy(getFieldName({ model, field: \"id\" }));\n            }\n            query = query.offset(offset).fetch(limit || 100);\n          } else {\n            query = query.offset(offset);\n          }\n        }\n        const res = await query.selectAll().execute();\n        if (!res) return [];\n        return res;\n      },\n      async update({ model, where, update: values }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.updateTable(model).set(values);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        return await withReturning(values, query, model, where);\n      },\n      async updateMany({ model, where, update: values }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.updateTable(model).set(values);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.execute();\n        return res.length;\n      },\n      async count({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.selectFrom(model).select(db.fn.count(\"id\").as(\"count\"));\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        const res = await query.execute();\n        return res[0].count;\n      },\n      async delete({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.deleteFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        await query.execute();\n      },\n      async deleteMany({ model, where }) {\n        const { and, or } = convertWhereClause(model, where);\n        let query = db.deleteFrom(model);\n        if (and) {\n          query = query.where((eb) => eb.and(and.map((expr) => expr(eb))));\n        }\n        if (or) {\n          query = query.where((eb) => eb.or(or.map((expr) => expr(eb))));\n        }\n        return (await query.execute()).length;\n      },\n      options: config\n    };\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cue6reJU.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ capitalizeFirstLetter)\n/* harmony export */ });\nfunction capitalizeFirstLetter(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRC0yQ21Fd3oubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRXNDIiwic291cmNlcyI6WyIvVXNlcnMvYmFpbGV5cGFya2VyL0RvY3VtZW50cy9Db2RpbmcvcmFwaWQtZGV2LWV4cG8tZnVsbHN0YWNrLXN0YXJ0ZXItcmVwby9iYWNrZW5kL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5ELTJDbUV3ei5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuXG5leHBvcnQgeyBjYXBpdGFsaXplRmlyc3RMZXR0ZXIgYXMgYyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.D-2CmEwz.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s: () => (/* binding */ signJWT)\n/* harmony export */ });\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwt/sign.js\");\n\n\nasync function signJWT(payload, secret, expiresIn = 3600) {\n  const jwt = await new jose__WEBPACK_IMPORTED_MODULE_0__.SignJWT(payload).setProtectedHeader({ alg: \"HS256\" }).setIssuedAt().setExpirationTime(Math.floor(Date.now() / 1e3) + expiresIn).sign(new TextEncoder().encode(secret));\n  return jwt;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRERFYldYLVMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStCOztBQUUvQjtBQUNBLHdCQUF3Qix5Q0FBTywrQkFBK0IsY0FBYztBQUM1RTtBQUNBOztBQUV3QiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhaWxleXBhcmtlci9Eb2N1bWVudHMvQ29kaW5nL3JhcGlkLWRldi1leHBvLWZ1bGxzdGFjay1zdGFydGVyLXJlcG8vYmFja2VuZC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRERFYldYLVMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpZ25KV1QgfSBmcm9tICdqb3NlJztcblxuYXN5bmMgZnVuY3Rpb24gc2lnbkpXVChwYXlsb2FkLCBzZWNyZXQsIGV4cGlyZXNJbiA9IDM2MDApIHtcbiAgY29uc3Qgand0ID0gYXdhaXQgbmV3IFNpZ25KV1QocGF5bG9hZCkuc2V0UHJvdGVjdGVkSGVhZGVyKHsgYWxnOiBcIkhTMjU2XCIgfSkuc2V0SXNzdWVkQXQoKS5zZXRFeHBpcmF0aW9uVGltZShNYXRoLmZsb29yKERhdGUubm93KCkgLyAxZTMpICsgZXhwaXJlc0luKS5zaWduKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzZWNyZXQpKTtcbiAgcmV0dXJuIGp3dDtcbn1cblxuZXhwb3J0IHsgc2lnbkpXVCBhcyBzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DGdvqtd1.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DGdvqtd1.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   w: () => (/* binding */ withApplyDefault)\n/* harmony export */ });\nfunction withApplyDefault(value, field, action) {\n  if (action === \"update\") {\n    return value;\n  }\n  if (value === void 0 || value === null) {\n    if (field.defaultValue !== void 0) {\n      if (typeof field.defaultValue === \"function\") {\n        return field.defaultValue();\n      }\n      return field.defaultValue;\n    }\n  }\n  return value;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguREdkdnF0ZDEubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVpQyIsInNvdXJjZXMiOlsiL1VzZXJzL2JhaWxleXBhcmtlci9Eb2N1bWVudHMvQ29kaW5nL3JhcGlkLWRldi1leHBvLWZ1bGxzdGFjay1zdGFydGVyLXJlcG8vYmFja2VuZC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguREdkdnF0ZDEubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHdpdGhBcHBseURlZmF1bHQodmFsdWUsIGZpZWxkLCBhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbiA9PT0gXCJ1cGRhdGVcIikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT09IHZvaWQgMCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgIGlmIChmaWVsZC5kZWZhdWx0VmFsdWUgIT09IHZvaWQgMCkge1xuICAgICAgaWYgKHR5cGVvZiBmaWVsZC5kZWZhdWx0VmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gZmllbGQuZGVmYXVsdFZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmllbGQuZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCB7IHdpdGhBcHBseURlZmF1bHQgYXMgdyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DGdvqtd1.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getAuthTables)\n/* harmony export */ });\nconst getAuthTables = (options) => {\n  const pluginSchema = options.plugins?.reduce(\n    (acc, plugin) => {\n      const schema = plugin.schema;\n      if (!schema) return acc;\n      for (const [key, value] of Object.entries(schema)) {\n        acc[key] = {\n          fields: {\n            ...acc[key]?.fields,\n            ...value.fields\n          },\n          modelName: value.modelName || key\n        };\n      }\n      return acc;\n    },\n    {}\n  );\n  const shouldAddRateLimitTable = options.rateLimit?.storage === \"database\";\n  const rateLimitTable = {\n    rateLimit: {\n      modelName: options.rateLimit?.modelName || \"rateLimit\",\n      fields: {\n        key: {\n          type: \"string\",\n          fieldName: options.rateLimit?.fields?.key || \"key\"\n        },\n        count: {\n          type: \"number\",\n          fieldName: options.rateLimit?.fields?.count || \"count\"\n        },\n        lastRequest: {\n          type: \"number\",\n          bigint: true,\n          fieldName: options.rateLimit?.fields?.lastRequest || \"lastRequest\"\n        }\n      }\n    }\n  };\n  const { user, session, account, ...pluginTables } = pluginSchema || {};\n  const sessionTable = {\n    session: {\n      modelName: options.session?.modelName || \"session\",\n      fields: {\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.expiresAt || \"expiresAt\"\n        },\n        token: {\n          type: \"string\",\n          required: true,\n          fieldName: options.session?.fields?.token || \"token\",\n          unique: true\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.session?.fields?.updatedAt || \"updatedAt\"\n        },\n        ipAddress: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.ipAddress || \"ipAddress\"\n        },\n        userAgent: {\n          type: \"string\",\n          required: false,\n          fieldName: options.session?.fields?.userAgent || \"userAgent\"\n        },\n        userId: {\n          type: \"string\",\n          fieldName: options.session?.fields?.userId || \"userId\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true\n        },\n        ...session?.fields,\n        ...options.session?.additionalFields\n      },\n      order: 2\n    }\n  };\n  return {\n    user: {\n      modelName: options.user?.modelName || \"user\",\n      fields: {\n        name: {\n          type: \"string\",\n          required: true,\n          fieldName: options.user?.fields?.name || \"name\",\n          sortable: true\n        },\n        email: {\n          type: \"string\",\n          unique: true,\n          required: true,\n          fieldName: options.user?.fields?.email || \"email\",\n          sortable: true\n        },\n        emailVerified: {\n          type: \"boolean\",\n          defaultValue: () => false,\n          required: true,\n          fieldName: options.user?.fields?.emailVerified || \"emailVerified\"\n        },\n        image: {\n          type: \"string\",\n          required: false,\n          fieldName: options.user?.fields?.image || \"image\"\n        },\n        createdAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          required: true,\n          fieldName: options.user?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...user?.fields,\n        ...options.user?.additionalFields\n      },\n      order: 1\n    },\n    //only add session table if it's not stored in secondary storage\n    ...!options.secondaryStorage || options.session?.storeSessionInDatabase ? sessionTable : {},\n    account: {\n      modelName: options.account?.modelName || \"account\",\n      fields: {\n        accountId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.accountId || \"accountId\"\n        },\n        providerId: {\n          type: \"string\",\n          required: true,\n          fieldName: options.account?.fields?.providerId || \"providerId\"\n        },\n        userId: {\n          type: \"string\",\n          references: {\n            model: options.user?.modelName || \"user\",\n            field: \"id\",\n            onDelete: \"cascade\"\n          },\n          required: true,\n          fieldName: options.account?.fields?.userId || \"userId\"\n        },\n        accessToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.accessToken || \"accessToken\"\n        },\n        refreshToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.refreshToken || \"refreshToken\"\n        },\n        idToken: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.idToken || \"idToken\"\n        },\n        accessTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"accessTokenExpiresAt\"\n        },\n        refreshTokenExpiresAt: {\n          type: \"date\",\n          required: false,\n          fieldName: options.account?.fields?.accessTokenExpiresAt || \"refreshTokenExpiresAt\"\n        },\n        scope: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.scope || \"scope\"\n        },\n        password: {\n          type: \"string\",\n          required: false,\n          fieldName: options.account?.fields?.password || \"password\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.account?.fields?.updatedAt || \"updatedAt\"\n        },\n        ...account?.fields\n      },\n      order: 3\n    },\n    verification: {\n      modelName: options.verification?.modelName || \"verification\",\n      fields: {\n        identifier: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.identifier || \"identifier\"\n        },\n        value: {\n          type: \"string\",\n          required: true,\n          fieldName: options.verification?.fields?.value || \"value\"\n        },\n        expiresAt: {\n          type: \"date\",\n          required: true,\n          fieldName: options.verification?.fields?.expiresAt || \"expiresAt\"\n        },\n        createdAt: {\n          type: \"date\",\n          required: false,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.createdAt || \"createdAt\"\n        },\n        updatedAt: {\n          type: \"date\",\n          required: false,\n          defaultValue: () => /* @__PURE__ */ new Date(),\n          fieldName: options.verification?.fields?.updatedAt || \"updatedAt\"\n        }\n      },\n      order: 4\n    },\n    ...pluginTables,\n    ...shouldAddRateLimitTable ? rateLimitTable : {}\n  };\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   B: () => (/* binding */ BetterAuthError),\n/* harmony export */   M: () => (/* binding */ MissingDependencyError)\n/* harmony export */ });\nclass BetterAuthError extends Error {\n  constructor(message, cause) {\n    super(message);\n    this.name = \"BetterAuthError\";\n    this.message = message;\n    this.cause = cause;\n    this.stack = \"\";\n  }\n}\nclass MissingDependencyError extends BetterAuthError {\n  constructor(pkgName) {\n    super(\n      `The package \"${pkgName}\" is required. Make sure it is installed.`,\n      pkgName\n    );\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguRGR6U0pmLW4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRTZEIiwic291cmNlcyI6WyIvVXNlcnMvYmFpbGV5cGFya2VyL0RvY3VtZW50cy9Db2RpbmcvcmFwaWQtZGV2LWV4cG8tZnVsbHN0YWNrLXN0YXJ0ZXItcmVwby9iYWNrZW5kL25vZGVfbW9kdWxlcy9iZXR0ZXItYXV0aC9kaXN0L3NoYXJlZC9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQmV0dGVyQXV0aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjYXVzZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubmFtZSA9IFwiQmV0dGVyQXV0aEVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmNhdXNlID0gY2F1c2U7XG4gICAgdGhpcy5zdGFjayA9IFwiXCI7XG4gIH1cbn1cbmNsYXNzIE1pc3NpbmdEZXBlbmRlbmN5RXJyb3IgZXh0ZW5kcyBCZXR0ZXJBdXRoRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcihwa2dOYW1lKSB7XG4gICAgc3VwZXIoXG4gICAgICBgVGhlIHBhY2thZ2UgXCIke3BrZ05hbWV9XCIgaXMgcmVxdWlyZWQuIE1ha2Ugc3VyZSBpdCBpcyBpbnN0YWxsZWQuYCxcbiAgICAgIHBrZ05hbWVcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB7IEJldHRlckF1dGhFcnJvciBhcyBCLCBNaXNzaW5nRGVwZW5kZW5jeUVycm9yIGFzIE0gfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ validateToken),\n/* harmony export */   b: () => (/* binding */ getOAuth2Tokens),\n/* harmony export */   c: () => (/* binding */ createAuthorizationURL),\n/* harmony export */   e: () => (/* binding */ encodeOAuthParameter),\n/* harmony export */   g: () => (/* binding */ generateCodeChallenge),\n/* harmony export */   r: () => (/* binding */ refreshAccessToken),\n/* harmony export */   v: () => (/* binding */ validateAuthorizationCode)\n/* harmony export */ });\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwt/verify.js\");\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n\n\n\n\n\n\nasync function generateCodeChallenge(codeVerifier) {\n  const codeChallengeBytes = await (0,_better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_3__.createHash)(\"SHA-256\").digest(codeVerifier);\n  return _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_0__.base64Url.encode(new Uint8Array(codeChallengeBytes), {\n    padding: false\n  });\n}\nfunction getOAuth2Tokens(data) {\n  return {\n    tokenType: data.token_type,\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    accessTokenExpiresAt: data.expires_in ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(data.expires_in, \"sec\") : void 0,\n    scopes: data?.scope ? typeof data.scope === \"string\" ? data.scope.split(\" \") : data.scope : [],\n    idToken: data.id_token\n  };\n}\nconst encodeOAuthParameter = (value) => encodeURIComponent(value).replace(/%20/g, \"+\");\n\nasync function createAuthorizationURL({\n  id,\n  options,\n  authorizationEndpoint,\n  state,\n  codeVerifier,\n  scopes,\n  claims,\n  redirectURI,\n  duration,\n  prompt,\n  accessType,\n  responseType,\n  display,\n  loginHint,\n  hd,\n  responseMode,\n  additionalParams,\n  scopeJoiner\n}) {\n  const url = new URL(authorizationEndpoint);\n  url.searchParams.set(\"response_type\", responseType || \"code\");\n  url.searchParams.set(\"client_id\", options.clientId);\n  url.searchParams.set(\"state\", state);\n  url.searchParams.set(\"scope\", scopes.join(scopeJoiner || \" \"));\n  url.searchParams.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  duration && url.searchParams.set(\"duration\", duration);\n  display && url.searchParams.set(\"display\", display);\n  loginHint && url.searchParams.set(\"login_hint\", loginHint);\n  prompt && url.searchParams.set(\"prompt\", prompt);\n  hd && url.searchParams.set(\"hd\", hd);\n  accessType && url.searchParams.set(\"access_type\", accessType);\n  responseMode && url.searchParams.set(\"response_mode\", responseMode);\n  if (codeVerifier) {\n    const codeChallenge = await generateCodeChallenge(codeVerifier);\n    url.searchParams.set(\"code_challenge_method\", \"S256\");\n    url.searchParams.set(\"code_challenge\", codeChallenge);\n  }\n  if (claims) {\n    const claimsObj = claims.reduce(\n      (acc, claim) => {\n        acc[claim] = null;\n        return acc;\n      },\n      {}\n    );\n    url.searchParams.set(\n      \"claims\",\n      JSON.stringify({\n        id_token: { email: null, email_verified: null, ...claimsObj }\n      })\n    );\n  }\n  if (additionalParams) {\n    Object.entries(additionalParams).forEach(([key, value]) => {\n      url.searchParams.set(key, value);\n    });\n  }\n  return url;\n}\n\nasync function validateAuthorizationCode({\n  code,\n  codeVerifier,\n  redirectURI,\n  options,\n  tokenEndpoint,\n  authentication,\n  deviceId,\n  headers\n}) {\n  const body = new URLSearchParams();\n  const requestHeaders = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\",\n    \"user-agent\": \"better-auth\",\n    ...headers\n  };\n  body.set(\"grant_type\", \"authorization_code\");\n  body.set(\"code\", code);\n  codeVerifier && body.set(\"code_verifier\", codeVerifier);\n  options.clientKey && body.set(\"client_key\", options.clientKey);\n  deviceId && body.set(\"device_id\", deviceId);\n  body.set(\"redirect_uri\", options.redirectURI || redirectURI);\n  if (authentication === \"basic\") {\n    const encodedCredentials = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_0__.base64Url.encode(\n      `${options.clientId}:${options.clientSecret}`\n    );\n    requestHeaders[\"authorization\"] = `Basic ${encodedCredentials}`;\n  } else {\n    body.set(\"client_id\", options.clientId);\n    body.set(\"client_secret\", options.clientSecret);\n  }\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_1__.betterFetch)(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers: requestHeaders\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = getOAuth2Tokens(data);\n  return tokens;\n}\nasync function validateToken(token, jwksEndpoint) {\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_1__.betterFetch)(jwksEndpoint, {\n    method: \"GET\",\n    headers: {\n      accept: \"application/json\",\n      \"user-agent\": \"better-auth\"\n    }\n  });\n  if (error) {\n    throw error;\n  }\n  const keys = data[\"keys\"];\n  const header = JSON.parse(atob(token.split(\".\")[0]));\n  const key = keys.find((key2) => key2.kid === header.kid);\n  if (!key) {\n    throw new Error(\"Key not found\");\n  }\n  const verified = await (0,jose__WEBPACK_IMPORTED_MODULE_4__.jwtVerify)(token, key);\n  return verified;\n}\n\nasync function refreshAccessToken({\n  refreshToken,\n  options,\n  tokenEndpoint,\n  authentication,\n  extraParams,\n  grantType = \"refresh_token\"\n}) {\n  const body = new URLSearchParams();\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n    accept: \"application/json\"\n  };\n  body.set(\"grant_type\", grantType);\n  body.set(\"refresh_token\", refreshToken);\n  if (authentication === \"basic\") {\n    const encodedCredentials = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_0__.base64Url.encode(\n      `${options.clientId}:${options.clientSecret}`\n    );\n    headers[\"authorization\"] = `Basic ${encodedCredentials}`;\n  } else {\n    body.set(\"client_id\", options.clientId);\n    body.set(\"client_secret\", options.clientSecret);\n  }\n  if (extraParams) {\n    for (const [key, value] of Object.entries(extraParams)) {\n      body.set(key, value);\n    }\n  }\n  const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_1__.betterFetch)(tokenEndpoint, {\n    method: \"POST\",\n    body,\n    headers\n  });\n  if (error) {\n    throw error;\n  }\n  const tokens = {\n    accessToken: data.access_token,\n    refreshToken: data.refresh_token,\n    tokenType: data.token_type,\n    scopes: data.scope?.split(\" \"),\n    idToken: data.id_token\n  };\n  if (data.expires_in) {\n    const now = /* @__PURE__ */ new Date();\n    tokens.accessTokenExpiresAt = new Date(\n      now.getTime() + data.expires_in * 1e3\n    );\n  }\n  return tokens;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.OT3XFeFk.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.OT3XFeFk.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ constantTimeEqual),\n/* harmony export */   h: () => (/* binding */ hashPassword),\n/* harmony export */   v: () => (/* binding */ verifyPassword)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/scrypt */ \"(rsc)/./node_modules/@noble/hashes/esm/scrypt.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/utils */ \"(rsc)/./node_modules/@noble/hashes/esm/utils.js\");\n\n\n\n\n\nfunction constantTimeEqual(a, b) {\n  const aBuffer = new Uint8Array(a);\n  const bBuffer = new Uint8Array(b);\n  if (aBuffer.length !== bBuffer.length) {\n    return false;\n  }\n  let c = 0;\n  for (let i = 0; i < aBuffer.length; i++) {\n    c |= aBuffer[i] ^ bBuffer[i];\n  }\n  return c === 0;\n}\n\nconst config = {\n  N: 16384,\n  r: 16,\n  p: 1,\n  dkLen: 64\n};\nasync function generateKey(password, salt) {\n  return await (0,_noble_hashes_scrypt__WEBPACK_IMPORTED_MODULE_2__.scryptAsync)(password.normalize(\"NFKC\"), salt, {\n    N: config.N,\n    p: config.p,\n    r: config.r,\n    dkLen: config.dkLen,\n    maxmem: 128 * config.N * config.r * 2\n  });\n}\nconst hashPassword = async (password) => {\n  const salt = _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_1__.hex.encode((0,_better_auth_utils__WEBPACK_IMPORTED_MODULE_0__.getRandomValues)(new Uint8Array(16)));\n  const key = await generateKey(password, salt);\n  return `${salt}:${_better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_1__.hex.encode(key)}`;\n};\nconst verifyPassword = async ({\n  hash,\n  password\n}) => {\n  const [salt, key] = hash.split(\":\");\n  const targetKey = await generateKey(password, salt);\n  return constantTimeEqual(targetKey, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(key));\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguT1QzWEZlRmsubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBbUQ7QUFDRTtBQUNSO0FBQ0k7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUVBQVc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZUFBZSx1REFBRyxRQUFRLG1FQUFlO0FBQ3pDO0FBQ0EsWUFBWSxLQUFLLEdBQUcsdURBQUcsYUFBYTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0Esc0NBQXNDLCtEQUFVO0FBQ2hEOztBQUUwRSIsInNvdXJjZXMiOlsiL1VzZXJzL2JhaWxleXBhcmtlci9Eb2N1bWVudHMvQ29kaW5nL3JhcGlkLWRldi1leHBvLWZ1bGxzdGFjay1zdGFydGVyLXJlcG8vYmFja2VuZC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguT1QzWEZlRmsubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNjcnlwdEFzeW5jIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zY3J5cHQnO1xuaW1wb3J0IHsgZ2V0UmFuZG9tVmFsdWVzIH0gZnJvbSAnQGJldHRlci1hdXRoL3V0aWxzJztcbmltcG9ydCB7IGhleCB9IGZyb20gJ0BiZXR0ZXItYXV0aC91dGlscy9oZXgnO1xuaW1wb3J0IHsgaGV4VG9CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuXG5mdW5jdGlvbiBjb25zdGFudFRpbWVFcXVhbChhLCBiKSB7XG4gIGNvbnN0IGFCdWZmZXIgPSBuZXcgVWludDhBcnJheShhKTtcbiAgY29uc3QgYkJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGIpO1xuICBpZiAoYUJ1ZmZlci5sZW5ndGggIT09IGJCdWZmZXIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBjID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgYyB8PSBhQnVmZmVyW2ldIF4gYkJ1ZmZlcltpXTtcbiAgfVxuICByZXR1cm4gYyA9PT0gMDtcbn1cblxuY29uc3QgY29uZmlnID0ge1xuICBOOiAxNjM4NCxcbiAgcjogMTYsXG4gIHA6IDEsXG4gIGRrTGVuOiA2NFxufTtcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS2V5KHBhc3N3b3JkLCBzYWx0KSB7XG4gIHJldHVybiBhd2FpdCBzY3J5cHRBc3luYyhwYXNzd29yZC5ub3JtYWxpemUoXCJORktDXCIpLCBzYWx0LCB7XG4gICAgTjogY29uZmlnLk4sXG4gICAgcDogY29uZmlnLnAsXG4gICAgcjogY29uZmlnLnIsXG4gICAgZGtMZW46IGNvbmZpZy5ka0xlbixcbiAgICBtYXhtZW06IDEyOCAqIGNvbmZpZy5OICogY29uZmlnLnIgKiAyXG4gIH0pO1xufVxuY29uc3QgaGFzaFBhc3N3b3JkID0gYXN5bmMgKHBhc3N3b3JkKSA9PiB7XG4gIGNvbnN0IHNhbHQgPSBoZXguZW5jb2RlKGdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxNikpKTtcbiAgY29uc3Qga2V5ID0gYXdhaXQgZ2VuZXJhdGVLZXkocGFzc3dvcmQsIHNhbHQpO1xuICByZXR1cm4gYCR7c2FsdH06JHtoZXguZW5jb2RlKGtleSl9YDtcbn07XG5jb25zdCB2ZXJpZnlQYXNzd29yZCA9IGFzeW5jICh7XG4gIGhhc2gsXG4gIHBhc3N3b3JkXG59KSA9PiB7XG4gIGNvbnN0IFtzYWx0LCBrZXldID0gaGFzaC5zcGxpdChcIjpcIik7XG4gIGNvbnN0IHRhcmdldEtleSA9IGF3YWl0IGdlbmVyYXRlS2V5KHBhc3N3b3JkLCBzYWx0KTtcbiAgcmV0dXJuIGNvbnN0YW50VGltZUVxdWFsKHRhcmdldEtleSwgaGV4VG9CeXRlcyhrZXkpKTtcbn07XG5cbmV4cG9ydCB7IGNvbnN0YW50VGltZUVxdWFsIGFzIGMsIGhhc2hQYXNzd29yZCBhcyBoLCB2ZXJpZnlQYXNzd29yZCBhcyB2IH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.OT3XFeFk.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getBaseURL),\n/* harmony export */   b: () => (/* binding */ getHost),\n/* harmony export */   c: () => (/* binding */ getProtocol),\n/* harmony export */   g: () => (/* binding */ getOrigin)\n/* harmony export */ });\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n\n\n\nfunction checkHasPath(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.pathname !== \"/\";\n  } catch (error) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n      `Invalid base URL: ${url}. Please provide a valid base URL.`\n    );\n  }\n}\nfunction withPath(url, path = \"/api/auth\") {\n  const hasPath = checkHasPath(url);\n  if (hasPath) {\n    return url;\n  }\n  path = path.startsWith(\"/\") ? path : `/${path}`;\n  return `${url.replace(/\\/+$/, \"\")}${path}`;\n}\nfunction getBaseURL(url, path, request) {\n  if (url) {\n    return withPath(url, path);\n  }\n  const fromEnv = _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NEXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_BETTER_AUTH_URL || _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.NUXT_PUBLIC_AUTH_URL || (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL !== \"/\" ? _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.e.BASE_URL : void 0);\n  if (fromEnv) {\n    return withPath(fromEnv, path);\n  }\n  const fromRequest = request?.headers.get(\"x-forwarded-host\");\n  const fromRequestProto = request?.headers.get(\"x-forwarded-proto\");\n  if (fromRequest && fromRequestProto) {\n    return withPath(`${fromRequestProto}://${fromRequest}`, path);\n  }\n  if (request) {\n    const url2 = getOrigin(request.url);\n    if (!url2) {\n      throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_1__.B(\n        \"Could not get origin from request. Please provide a valid base URL.\"\n      );\n    }\n    return withPath(url2, path);\n  }\n  if (typeof window !== \"undefined\" && window.location) {\n    return withPath(window.location.origin, path);\n  }\n  return void 0;\n}\nfunction getOrigin(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.origin;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getProtocol(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getHost(url) {\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.host;\n  } catch (error) {\n    return url;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguVlRYTkxGTVQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFzRDtBQUNZOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixjQUFjLHdEQUFlO0FBQzdCLDJCQUEyQixJQUFJO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsS0FBSztBQUNoRCxZQUFZLHdCQUF3QixFQUFFLEtBQUs7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3REFBRyxvQkFBb0Isd0RBQUcsZ0NBQWdDLHdEQUFHLDJCQUEyQix3REFBRyxnQ0FBZ0Msd0RBQUcsMEJBQTBCLHdEQUFHLG9CQUFvQix3REFBRztBQUNwTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCLEtBQUssWUFBWTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix3REFBZTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFMkUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWlsZXlwYXJrZXIvRG9jdW1lbnRzL0NvZGluZy9yYXBpZC1kZXYtZXhwby1mdWxsc3RhY2stc3RhcnRlci1yZXBvL2JhY2tlbmQvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLlZUWE5MRk1ULm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlIGFzIGVudiB9IGZyb20gJy4vYmV0dGVyLWF1dGguOHpveHpnLUYubWpzJztcbmltcG9ydCB7IEIgYXMgQmV0dGVyQXV0aEVycm9yIH0gZnJvbSAnLi9iZXR0ZXItYXV0aC5EZHpTSmYtbi5tanMnO1xuXG5mdW5jdGlvbiBjaGVja0hhc1BhdGgodXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwucGF0aG5hbWUgIT09IFwiL1wiO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBCZXR0ZXJBdXRoRXJyb3IoXG4gICAgICBgSW52YWxpZCBiYXNlIFVSTDogJHt1cmx9LiBQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGJhc2UgVVJMLmBcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiB3aXRoUGF0aCh1cmwsIHBhdGggPSBcIi9hcGkvYXV0aFwiKSB7XG4gIGNvbnN0IGhhc1BhdGggPSBjaGVja0hhc1BhdGgodXJsKTtcbiAgaWYgKGhhc1BhdGgpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHBhdGggPSBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpID8gcGF0aCA6IGAvJHtwYXRofWA7XG4gIHJldHVybiBgJHt1cmwucmVwbGFjZSgvXFwvKyQvLCBcIlwiKX0ke3BhdGh9YDtcbn1cbmZ1bmN0aW9uIGdldEJhc2VVUkwodXJsLCBwYXRoLCByZXF1ZXN0KSB7XG4gIGlmICh1cmwpIHtcbiAgICByZXR1cm4gd2l0aFBhdGgodXJsLCBwYXRoKTtcbiAgfVxuICBjb25zdCBmcm9tRW52ID0gZW52LkJFVFRFUl9BVVRIX1VSTCB8fCBlbnYuTkVYVF9QVUJMSUNfQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5QVUJMSUNfQkVUVEVSX0FVVEhfVVJMIHx8IGVudi5OVVhUX1BVQkxJQ19CRVRURVJfQVVUSF9VUkwgfHwgZW52Lk5VWFRfUFVCTElDX0FVVEhfVVJMIHx8IChlbnYuQkFTRV9VUkwgIT09IFwiL1wiID8gZW52LkJBU0VfVVJMIDogdm9pZCAwKTtcbiAgaWYgKGZyb21FbnYpIHtcbiAgICByZXR1cm4gd2l0aFBhdGgoZnJvbUVudiwgcGF0aCk7XG4gIH1cbiAgY29uc3QgZnJvbVJlcXVlc3QgPSByZXF1ZXN0Py5oZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLWhvc3RcIik7XG4gIGNvbnN0IGZyb21SZXF1ZXN0UHJvdG8gPSByZXF1ZXN0Py5oZWFkZXJzLmdldChcIngtZm9yd2FyZGVkLXByb3RvXCIpO1xuICBpZiAoZnJvbVJlcXVlc3QgJiYgZnJvbVJlcXVlc3RQcm90bykge1xuICAgIHJldHVybiB3aXRoUGF0aChgJHtmcm9tUmVxdWVzdFByb3RvfTovLyR7ZnJvbVJlcXVlc3R9YCwgcGF0aCk7XG4gIH1cbiAgaWYgKHJlcXVlc3QpIHtcbiAgICBjb25zdCB1cmwyID0gZ2V0T3JpZ2luKHJlcXVlc3QudXJsKTtcbiAgICBpZiAoIXVybDIpIHtcbiAgICAgIHRocm93IG5ldyBCZXR0ZXJBdXRoRXJyb3IoXG4gICAgICAgIFwiQ291bGQgbm90IGdldCBvcmlnaW4gZnJvbSByZXF1ZXN0LiBQbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGJhc2UgVVJMLlwiXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gd2l0aFBhdGgodXJsMiwgcGF0aCk7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIHdpdGhQYXRoKHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4sIHBhdGgpO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBnZXRPcmlnaW4odXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiBwYXJzZWRVcmwub3JpZ2luO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBnZXRQcm90b2NvbCh1cmwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIHBhcnNlZFVybC5wcm90b2NvbDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0SG9zdCh1cmwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gICAgcmV0dXJuIHBhcnNlZFVybC5ob3N0O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbn1cblxuZXhwb3J0IHsgZ2V0QmFzZVVSTCBhcyBhLCBnZXRIb3N0IGFzIGIsIGdldFByb3RvY29sIGFzIGMsIGdldE9yaWdpbiBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.WByh1Fkk.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.WByh1Fkk.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ createAdapter)\n/* harmony export */ });\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_DGdvqtd1_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.DGdvqtd1.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DGdvqtd1.mjs\");\n/* harmony import */ var _better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.DORkW_Ge.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet debugLogs = [];\nlet transactionId = -1;\nconst colors = {\n  reset: \"\\x1B[0m\",\n  bright: \"\\x1B[1m\",\n  dim: \"\\x1B[2m\",\n  fg: {\n    yellow: \"\\x1B[33m\",\n    magenta: \"\\x1B[35m\"},\n  bg: {\n    black: \"\\x1B[40m\"}\n};\nconst createAdapter = ({\n  adapter,\n  config: cfg\n}) => (options) => {\n  const config = {\n    ...cfg,\n    supportsBooleans: cfg.supportsBooleans ?? true,\n    supportsDates: cfg.supportsDates ?? true,\n    supportsJSON: cfg.supportsJSON ?? false,\n    adapterName: cfg.adapterName ?? cfg.adapterId,\n    supportsNumericIds: cfg.supportsNumericIds ?? true\n  };\n  if (options.advanced?.database?.useNumberId === true && config.supportsNumericIds === false) {\n    throw new Error(\n      `[${config.adapterName}] Your database or database adapter does not support numeric ids. Please disable \"useNumberId\" in your config.`\n    );\n  }\n  const schema = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(options);\n  const getDefaultFieldName = ({\n    field,\n    model: unsafe_model\n  }) => {\n    if (field === \"id\") {\n      return field;\n    }\n    const model = getDefaultModelName(unsafe_model);\n    let f = schema[model]?.fields[field];\n    if (!f) {\n      f = Object.values(schema[model]?.fields).find(\n        (f2) => f2.fieldName === field\n      );\n    }\n    if (!f) {\n      debugLog(`Field ${field} not found in model ${model}`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Field ${field} not found in model ${model}`);\n    }\n    return field;\n  };\n  const getDefaultModelName = (model) => {\n    if (config.usePlural && model.charAt(model.length - 1) === \"s\") {\n      let pluralessModel = model.slice(0, -1);\n      let m2 = schema[pluralessModel] ? pluralessModel : void 0;\n      if (!m2) {\n        m2 = Object.entries(schema).find(\n          ([_, f]) => f.modelName === pluralessModel\n        )?.[0];\n      }\n      if (m2) {\n        return m2;\n      }\n    }\n    let m = schema[model] ? model : void 0;\n    if (!m) {\n      m = Object.entries(schema).find(([_, f]) => f.modelName === model)?.[0];\n    }\n    if (!m) {\n      debugLog(`Model \"${model}\" not found in schema`);\n      debugLog(`Schema:`, schema);\n      throw new Error(`Model \"${model}\" not found in schema`);\n    }\n    return m;\n  };\n  const getModelName = (model) => {\n    return schema[getDefaultModelName(model)].modelName !== model ? schema[getDefaultModelName(model)].modelName : config.usePlural ? `${model}s` : model;\n  };\n  function getFieldName({\n    model: model_name,\n    field: field_name\n  }) {\n    const model = getDefaultModelName(model_name);\n    const field = getDefaultFieldName({ model, field: field_name });\n    return schema[model]?.fields[field]?.fieldName || field;\n  }\n  const debugLog = (...args) => {\n    if (config.debugLogs === true || typeof config.debugLogs === \"object\") {\n      if (typeof config.debugLogs === \"object\" && \"isRunningAdapterTests\" in config.debugLogs) {\n        if (config.debugLogs.isRunningAdapterTests) {\n          args.shift();\n          debugLogs.push(args);\n        }\n        return;\n      }\n      if (typeof config.debugLogs === \"object\" && config.debugLogs.logCondition && !config.debugLogs.logCondition?.()) {\n        return;\n      }\n      if (typeof args[0] === \"object\" && \"method\" in args[0]) {\n        const method = args.shift().method;\n        if (typeof config.debugLogs === \"object\") {\n          if (method === \"create\" && !config.debugLogs.create) {\n            return;\n          } else if (method === \"update\" && !config.debugLogs.update) {\n            return;\n          } else if (method === \"updateMany\" && !config.debugLogs.updateMany) {\n            return;\n          } else if (method === \"findOne\" && !config.debugLogs.findOne) {\n            return;\n          } else if (method === \"findMany\" && !config.debugLogs.findMany) {\n            return;\n          } else if (method === \"delete\" && !config.debugLogs.delete) {\n            return;\n          } else if (method === \"deleteMany\" && !config.debugLogs.deleteMany) {\n            return;\n          } else if (method === \"count\" && !config.debugLogs.count) {\n            return;\n          }\n        }\n        _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_11__.l.info(`[${config.adapterName}]`, ...args);\n      } else {\n        _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_11__.l.info(`[${config.adapterName}]`, ...args);\n      }\n    }\n  };\n  const idField = ({\n    customModelName,\n    forceAllowId\n  }) => {\n    const shouldGenerateId = !config.disableIdGeneration && !options.advanced?.database?.useNumberId && !forceAllowId;\n    const model = getDefaultModelName(customModelName ?? \"id\");\n    return {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\",\n      required: shouldGenerateId ? true : false,\n      ...shouldGenerateId ? {\n        defaultValue() {\n          if (config.disableIdGeneration) return void 0;\n          const useNumberId = options.advanced?.database?.useNumberId;\n          let generateId$1 = options.advanced?.database?.generateId;\n          if (options.advanced?.generateId !== void 0) {\n            _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_11__.l.warn(\n              \"Your Better Auth config includes advanced.generateId which is deprecated. Please use advanced.database.generateId instead. This will be removed in future releases.\"\n            );\n            generateId$1 = options.advanced?.generateId;\n          }\n          if (generateId$1 === false || useNumberId) return void 0;\n          if (generateId$1) {\n            return generateId$1({\n              model\n            });\n          }\n          if (config.customIdGenerator) {\n            return config.customIdGenerator({ model });\n          }\n          return (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_3__.g)();\n        }\n      } : {}\n    };\n  };\n  const getFieldAttributes = ({\n    model,\n    field\n  }) => {\n    const defaultModelName = getDefaultModelName(model);\n    const defaultFieldName = getDefaultFieldName({\n      field,\n      model\n    });\n    const fields = schema[defaultModelName].fields;\n    fields.id = idField({ customModelName: defaultModelName });\n    return fields[defaultFieldName];\n  };\n  const adapterInstance = adapter({\n    options,\n    schema,\n    debugLog,\n    getFieldName,\n    getModelName,\n    getDefaultModelName,\n    getDefaultFieldName,\n    getFieldAttributes\n  });\n  const transformInput = async (data, unsafe_model, action, forceAllowId) => {\n    const transformedData = {};\n    const fields = schema[unsafe_model].fields;\n    const newMappedKeys = config.mapKeysTransformInput ?? {};\n    if (!config.disableIdGeneration && !options.advanced?.database?.useNumberId) {\n      fields.id = idField({ customModelName: unsafe_model, forceAllowId });\n    }\n    for (const field in fields) {\n      const value = data[field];\n      const fieldAttributes = fields[field];\n      let newFieldName = newMappedKeys[field] || fields[field].fieldName || field;\n      if (value === void 0 && (!fieldAttributes.defaultValue && !fieldAttributes.transform?.input || action === \"update\")) {\n        continue;\n      }\n      let newValue = (0,_better_auth_DGdvqtd1_mjs__WEBPACK_IMPORTED_MODULE_1__.w)(value, fieldAttributes, action);\n      if (fieldAttributes.transform?.input) {\n        newValue = await fieldAttributes.transform.input(newValue);\n      }\n      if (fieldAttributes.references?.field === \"id\" && options.advanced?.database?.useNumberId) {\n        if (Array.isArray(newValue)) {\n          newValue = newValue.map(Number);\n        } else {\n          newValue = Number(newValue);\n        }\n      } else if (config.supportsJSON === false && typeof newValue === \"object\" && //@ts-expect-error -Future proofing\n      fieldAttributes.type === \"json\") {\n        newValue = JSON.stringify(newValue);\n      } else if (config.supportsDates === false && newValue instanceof Date && fieldAttributes.type === \"date\") {\n        newValue = newValue.toISOString();\n      } else if (config.supportsBooleans === false && typeof newValue === \"boolean\") {\n        newValue = newValue ? 1 : 0;\n      }\n      if (config.customTransformInput) {\n        newValue = config.customTransformInput({\n          data: newValue,\n          action,\n          field: newFieldName,\n          fieldAttributes,\n          model: unsafe_model,\n          schema,\n          options\n        });\n      }\n      transformedData[newFieldName] = newValue;\n    }\n    return transformedData;\n  };\n  const transformOutput = async (data, unsafe_model, select = []) => {\n    if (!data) return null;\n    const newMappedKeys = config.mapKeysTransformOutput ?? {};\n    const transformedData = {};\n    const tableSchema = schema[unsafe_model].fields;\n    const idKey = Object.entries(newMappedKeys).find(\n      ([_, v]) => v === \"id\"\n    )?.[0];\n    tableSchema[idKey ?? \"id\"] = {\n      type: options.advanced?.database?.useNumberId ? \"number\" : \"string\"\n    };\n    for (const key in tableSchema) {\n      if (select.length && !select.includes(key)) {\n        continue;\n      }\n      const field = tableSchema[key];\n      if (field) {\n        const originalKey = field.fieldName || key;\n        let newValue = data[Object.entries(newMappedKeys).find(\n          ([_, v]) => v === originalKey\n        )?.[0] || originalKey];\n        if (field.transform?.output) {\n          newValue = await field.transform.output(newValue);\n        }\n        let newFieldName = newMappedKeys[key] || key;\n        if (originalKey === \"id\" || field.references?.field === \"id\") {\n          if (typeof newValue !== \"undefined\") newValue = String(newValue);\n        } else if (config.supportsJSON === false && typeof newValue === \"string\" && //@ts-expect-error - Future proofing\n        field.type === \"json\") {\n          newValue = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(newValue);\n        } else if (config.supportsDates === false && typeof newValue === \"string\" && field.type === \"date\") {\n          newValue = new Date(newValue);\n        } else if (config.supportsBooleans === false && typeof newValue === \"number\" && field.type === \"boolean\") {\n          newValue = newValue === 1;\n        }\n        if (config.customTransformOutput) {\n          newValue = config.customTransformOutput({\n            data: newValue,\n            field: newFieldName,\n            fieldAttributes: field,\n            select,\n            model: unsafe_model,\n            schema,\n            options\n          });\n        }\n        transformedData[newFieldName] = newValue;\n      }\n    }\n    return transformedData;\n  };\n  const transformWhereClause = ({\n    model,\n    where\n  }) => {\n    if (!where) return void 0;\n    return where.map((w) => {\n      const {\n        field: unsafe_field,\n        value,\n        operator = \"eq\",\n        connector = \"AND\"\n      } = w;\n      if (operator === \"in\") {\n        if (!Array.isArray(value)) {\n          throw new Error(\"Value must be an array\");\n        }\n      }\n      const defaultModelName = getDefaultModelName(model);\n      const defaultFieldName = getDefaultFieldName({\n        field: unsafe_field,\n        model\n      });\n      const fieldName = getFieldName({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      const fieldAttr = getFieldAttributes({\n        field: defaultFieldName,\n        model: defaultModelName\n      });\n      if (defaultFieldName === \"id\" || fieldAttr.references?.field === \"id\") {\n        if (options.advanced?.database?.useNumberId) {\n          if (Array.isArray(value)) {\n            return {\n              operator,\n              connector,\n              field: fieldName,\n              value: value.map(Number)\n            };\n          }\n          return {\n            operator,\n            connector,\n            field: fieldName,\n            value: Number(value)\n          };\n        }\n      }\n      return {\n        operator,\n        connector,\n        field: fieldName,\n        value\n      };\n    });\n  };\n  return {\n    create: async ({\n      data: unsafeData,\n      model: unsafeModel,\n      select,\n      forceAllowId = false\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      if (\"id\" in unsafeData && !forceAllowId) {\n        _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_11__.l.warn(\n          `[${config.adapterName}] - You are trying to create a record with an id. This is not allowed as we handle id generation for you, unless you pass in the \\`forceAllowId\\` parameter. The id will be ignored.`\n        );\n        const err = new Error();\n        const stack = err.stack?.split(\"\\n\").filter((_, i) => i !== 1).join(\"\\n\").replace(\"Error:\", \"Create method with `id` being called at:\");\n        console.log(stack);\n        unsafeData.id = void 0;\n      }\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(\n        unsafeData,\n        unsafeModel,\n        \"create\",\n        forceAllowId\n      );\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.create({ data, model });\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"DB Result\")}:`,\n        { model, res }\n      );\n      const transformed = await transformOutput(res, unsafeModel, select);\n      debugLog(\n        { method: \"create\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"create\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    update: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(\n        unsafeData,\n        unsafeModel,\n        \"update\"\n      );\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const res = await adapterInstance.update({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await transformOutput(res, unsafeModel);\n      debugLog(\n        { method: \"update\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"update\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    updateMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      update: unsafeData\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Unsafe Input\")}:`,\n        { model, data: unsafeData }\n      );\n      const data = await transformInput(unsafeData, unsafeModel, \"update\");\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Input\")}:`,\n        { model, data }\n      );\n      const updatedCount = await adapterInstance.updateMany({\n        model,\n        where,\n        update: data\n      });\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: updatedCount }\n      );\n      debugLog(\n        { method: \"updateMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(4, 4)}`,\n        `${formatMethod(\"updateMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: updatedCount }\n      );\n      return updatedCount;\n    },\n    findOne: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      select\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findOne\")}:`,\n        { model, where, select }\n      );\n      const res = await adapterInstance.findOne({\n        model,\n        where,\n        select\n      });\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await transformOutput(\n        res,\n        unsafeModel,\n        select\n      );\n      debugLog(\n        { method: \"findOne\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findOne\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    findMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere,\n      limit: unsafeLimit,\n      sortBy,\n      offset\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const limit = unsafeLimit ?? options.advanced?.database?.defaultFindManyLimit ?? 100;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 3)}`,\n        `${formatMethod(\"findMany\")}:`,\n        { model, where, limit, sortBy, offset }\n      );\n      const res = await adapterInstance.findMany({\n        model,\n        where,\n        limit,\n        sortBy,\n        offset\n      });\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      const transformed = await Promise.all(\n        res.map(async (r) => await transformOutput(r, unsafeModel))\n      );\n      debugLog(\n        { method: \"findMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(3, 3)}`,\n        `${formatMethod(\"findMany\")} ${formatAction(\"Parsed Result\")}:`,\n        { model, data: transformed }\n      );\n      return transformed;\n    },\n    delete: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"delete\")}:`,\n        { model, where }\n      );\n      await adapterInstance.delete({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"delete\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"delete\")} ${formatAction(\"DB Result\")}:`,\n        { model }\n      );\n    },\n    deleteMany: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DeleteMany\")}:`,\n        { model, where }\n      );\n      const res = await adapterInstance.deleteMany({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"deleteMany\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"deleteMany\")} ${formatAction(\"DB Result\")}:`,\n        { model, data: res }\n      );\n      return res;\n    },\n    count: async ({\n      model: unsafeModel,\n      where: unsafeWhere\n    }) => {\n      transactionId++;\n      let thisTransactionId = transactionId;\n      const model = getModelName(unsafeModel);\n      const where = transformWhereClause({\n        model: unsafeModel,\n        where: unsafeWhere\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(1, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          where\n        }\n      );\n      const res = await adapterInstance.count({\n        model,\n        where\n      });\n      debugLog(\n        { method: \"count\" },\n        `${formatTransactionId(thisTransactionId)} ${formatStep(2, 2)}`,\n        `${formatMethod(\"count\")}:`,\n        {\n          model,\n          data: res\n        }\n      );\n      return res;\n    },\n    createSchema: adapterInstance.createSchema ? async (_, file) => {\n      const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(options);\n      if (options.secondaryStorage && !options.session?.storeSessionInDatabase) {\n        delete tables.session;\n      }\n      if (options.rateLimit && options.rateLimit.storage === \"database\" && // rate-limit will default to enabled in production,\n      // and given storage is database, it will try to use the rate-limit table,\n      // so we should make sure to generate rate-limit table schema\n      (typeof options.rateLimit.enabled === \"undefined\" || // and of course if they forcefully set to true, then they want rate-limit,\n      // thus we should also generate rate-limit table schema\n      options.rateLimit.enabled === true)) {\n        tables.ratelimit = {\n          modelName: options.rateLimit.modelName ?? \"ratelimit\",\n          fields: {\n            key: {\n              type: \"string\",\n              unique: true,\n              required: true,\n              fieldName: options.rateLimit.fields?.key ?? \"key\"\n            },\n            count: {\n              type: \"number\",\n              required: true,\n              fieldName: options.rateLimit.fields?.count ?? \"count\"\n            },\n            lastRequest: {\n              type: \"number\",\n              required: true,\n              bigint: true,\n              defaultValue: () => Date.now(),\n              fieldName: options.rateLimit.fields?.lastRequest ?? \"lastRequest\"\n            }\n          }\n        };\n      }\n      return adapterInstance.createSchema({ file, tables });\n    } : void 0,\n    options: {\n      adapterConfig: config,\n      ...adapterInstance.options ?? {}\n    },\n    id: config.adapterId,\n    // Secretly export values ONLY if this adapter has enabled adapter-test-debug-logs.\n    // This would then be used during our adapter-tests to help print debug logs if a test fails.\n    //@ts-expect-error - ^^\n    ...config.debugLogs?.isRunningAdapterTests ? {\n      adapterTestDebugLogs: {\n        resetDebugLogs() {\n          debugLogs = [];\n        },\n        printDebugLogs() {\n          const separator = `\\u2500`.repeat(80);\n          let log = debugLogs.reverse().map((log2) => {\n            log2[0] = `\n${log2[0]}`;\n            return [...log2, \"\\n\"];\n          }).reduce(\n            (prev, curr) => {\n              return [...curr, ...prev];\n            },\n            [`\n${separator}`]\n          );\n          console.log(...log);\n        }\n      }\n    } : {}\n  };\n};\nfunction formatTransactionId(transactionId2) {\n  return `${colors.fg.magenta}#${transactionId2}${colors.reset}`;\n}\nfunction formatStep(step, total) {\n  return `${colors.bg.black}${colors.fg.yellow}[${step}/${total}]${colors.reset}`;\n}\nfunction formatMethod(method) {\n  return `${colors.bright}${method}${colors.reset}`;\n}\nfunction formatAction(action) {\n  return `${colors.dim}(${action})${colors.reset}`;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.WByh1Fkk.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   c: () => (/* binding */ checkPassword),\n/* harmony export */   v: () => (/* binding */ validatePassword)\n/* harmony export */ });\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n\n\nasync function validatePassword(ctx, data) {\n  const accounts = await ctx.context.internalAdapter.findAccounts(data.userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword) {\n    return false;\n  }\n  const compare = await ctx.context.password.verify({\n    hash: currentPassword,\n    password: data.password\n  });\n  return compare;\n}\nasync function checkPassword(userId, c) {\n  const accounts = await c.context.internalAdapter.findAccounts(userId);\n  const credentialAccount = accounts?.find(\n    (account) => account.providerId === \"credential\"\n  );\n  const currentPassword = credentialAccount?.password;\n  if (!credentialAccount || !currentPassword || !c.body.password) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"No password credential found\"\n    });\n  }\n  const compare = await c.context.password.verify({\n    hash: currentPassword,\n    password: c.body.password\n  });\n  if (!compare) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_0__.APIError(\"BAD_REQUEST\", {\n      message: \"Invalid password\"\n    });\n  }\n  return true;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguWXdEUWhvUGMubWpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1Qzs7QUFFdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaURBQVE7QUFDdEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxjQUFjLGlEQUFRO0FBQ3RCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFcUQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWlsZXlwYXJrZXIvRG9jdW1lbnRzL0NvZGluZy9yYXBpZC1kZXYtZXhwby1mdWxsc3RhY2stc3RhcnRlci1yZXBvL2JhY2tlbmQvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLll3RFFob1BjLm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElFcnJvciB9IGZyb20gJ2JldHRlci1jYWxsJztcblxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVQYXNzd29yZChjdHgsIGRhdGEpIHtcbiAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBjdHguY29udGV4dC5pbnRlcm5hbEFkYXB0ZXIuZmluZEFjY291bnRzKGRhdGEudXNlcklkKTtcbiAgY29uc3QgY3JlZGVudGlhbEFjY291bnQgPSBhY2NvdW50cz8uZmluZChcbiAgICAoYWNjb3VudCkgPT4gYWNjb3VudC5wcm92aWRlcklkID09PSBcImNyZWRlbnRpYWxcIlxuICApO1xuICBjb25zdCBjdXJyZW50UGFzc3dvcmQgPSBjcmVkZW50aWFsQWNjb3VudD8ucGFzc3dvcmQ7XG4gIGlmICghY3JlZGVudGlhbEFjY291bnQgfHwgIWN1cnJlbnRQYXNzd29yZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBjb21wYXJlID0gYXdhaXQgY3R4LmNvbnRleHQucGFzc3dvcmQudmVyaWZ5KHtcbiAgICBoYXNoOiBjdXJyZW50UGFzc3dvcmQsXG4gICAgcGFzc3dvcmQ6IGRhdGEucGFzc3dvcmRcbiAgfSk7XG4gIHJldHVybiBjb21wYXJlO1xufVxuYXN5bmMgZnVuY3Rpb24gY2hlY2tQYXNzd29yZCh1c2VySWQsIGMpIHtcbiAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCBjLmNvbnRleHQuaW50ZXJuYWxBZGFwdGVyLmZpbmRBY2NvdW50cyh1c2VySWQpO1xuICBjb25zdCBjcmVkZW50aWFsQWNjb3VudCA9IGFjY291bnRzPy5maW5kKFxuICAgIChhY2NvdW50KSA9PiBhY2NvdW50LnByb3ZpZGVySWQgPT09IFwiY3JlZGVudGlhbFwiXG4gICk7XG4gIGNvbnN0IGN1cnJlbnRQYXNzd29yZCA9IGNyZWRlbnRpYWxBY2NvdW50Py5wYXNzd29yZDtcbiAgaWYgKCFjcmVkZW50aWFsQWNjb3VudCB8fCAhY3VycmVudFBhc3N3b3JkIHx8ICFjLmJvZHkucGFzc3dvcmQpIHtcbiAgICB0aHJvdyBuZXcgQVBJRXJyb3IoXCJCQURfUkVRVUVTVFwiLCB7XG4gICAgICBtZXNzYWdlOiBcIk5vIHBhc3N3b3JkIGNyZWRlbnRpYWwgZm91bmRcIlxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGNvbXBhcmUgPSBhd2FpdCBjLmNvbnRleHQucGFzc3dvcmQudmVyaWZ5KHtcbiAgICBoYXNoOiBjdXJyZW50UGFzc3dvcmQsXG4gICAgcGFzc3dvcmQ6IGMuYm9keS5wYXNzd29yZFxuICB9KTtcbiAgaWYgKCFjb21wYXJlKSB7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFwiQkFEX1JFUVVFU1RcIiwge1xuICAgICAgbWVzc2FnZTogXCJJbnZhbGlkIHBhc3N3b3JkXCJcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHsgY2hlY2tQYXNzd29yZCBhcyBjLCB2YWxpZGF0ZVBhc3N3b3JkIGFzIHYgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.YwDQhoPc.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.dn8_oqOu.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.dn8_oqOu.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ generateState),\n/* harmony export */   p: () => (/* binding */ parseState)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function generateState(c, link) {\n  const callbackURL = c.body?.callbackURL || c.context.options.baseURL;\n  if (!callbackURL) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n      message: \"callbackURL is required\"\n    });\n  }\n  const codeVerifier = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_6__.g)(128);\n  const state = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_6__.g)(32);\n  const data = JSON.stringify({\n    callbackURL,\n    codeVerifier,\n    errorURL: c.body?.errorCallbackURL,\n    newUserURL: c.body?.newUserCallbackURL,\n    link,\n    /**\n     * This is the actual expiry time of the state\n     */\n    expiresAt: Date.now() + 10 * 60 * 1e3,\n    requestSignUp: c.body?.requestSignUp\n  });\n  const expiresAt = /* @__PURE__ */ new Date();\n  expiresAt.setMinutes(expiresAt.getMinutes() + 10);\n  const verification = await c.context.internalAdapter.createVerificationValue(\n    {\n      value: data,\n      identifier: state,\n      expiresAt\n    },\n    c\n  );\n  if (!verification) {\n    c.context.logger.error(\n      \"Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database\"\n    );\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"INTERNAL_SERVER_ERROR\", {\n      message: \"Unable to create verification\"\n    });\n  }\n  return {\n    state: verification.identifier,\n    codeVerifier\n  };\n}\nasync function parseState(c) {\n  const state = c.query.state || c.body.state;\n  const data = await c.context.internalAdapter.findVerificationValue(state);\n  if (!data) {\n    c.context.logger.error(\"State Mismatch. Verification not found\", {\n      state\n    });\n    throw c.redirect(\n      `${c.context.baseURL}/error?error=please_restart_the_process`\n    );\n  }\n  const parsedData = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    callbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    codeVerifier: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    errorURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    newUserURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    expiresAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    link: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      email: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      userId: zod__WEBPACK_IMPORTED_MODULE_0__.z.coerce.string()\n    }).optional(),\n    requestSignUp: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n  }).parse(JSON.parse(data.value));\n  if (!parsedData.errorURL) {\n    parsedData.errorURL = `${c.context.baseURL}/error`;\n  }\n  if (parsedData.expiresAt < Date.now()) {\n    await c.context.internalAdapter.deleteVerificationValue(data.id);\n    throw c.redirect(\n      `${c.context.baseURL}/error?error=please_restart_the_process`\n    );\n  }\n  await c.context.internalAdapter.deleteVerificationValue(data.id);\n  return parsedData;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguZG44X29xT3UubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUF3QjtBQUNlO0FBQ047QUFDRjtBQUNEO0FBQ0k7QUFDQztBQUNyQjtBQUNnQjtBQUNGO0FBQ0k7QUFDSDtBQUMwQzs7QUFFdkU7QUFDQTtBQUNBO0FBQ0EsY0FBYyxpREFBUTtBQUN0QjtBQUNBLEtBQUs7QUFDTDtBQUNBLHVCQUF1Qiw0REFBb0I7QUFDM0MsZ0JBQWdCLDREQUFvQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsaURBQVE7QUFDdEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsU0FBUyxrQkFBa0I7QUFDM0I7QUFDQTtBQUNBLHFCQUFxQix5Q0FBUTtBQUM3QixpQkFBaUIseUNBQVE7QUFDekIsa0JBQWtCLHlDQUFRO0FBQzFCLGNBQWMseUNBQVE7QUFDdEIsZ0JBQWdCLHlDQUFRO0FBQ3hCLGVBQWUseUNBQVE7QUFDdkIsVUFBVSx5Q0FBUTtBQUNsQixhQUFhLHlDQUFRO0FBQ3JCLGNBQWMseUNBQVE7QUFDdEIsS0FBSztBQUNMLG1CQUFtQiwwQ0FBUztBQUM1QixHQUFHO0FBQ0g7QUFDQSw2QkFBNkIsa0JBQWtCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxrQkFBa0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFK0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9iYWlsZXlwYXJrZXIvRG9jdW1lbnRzL0NvZGluZy9yYXBpZC1kZXYtZXhwby1mdWxsc3RhY2stc3RhcnRlci1yZXBvL2JhY2tlbmQvbm9kZV9tb2R1bGVzL2JldHRlci1hdXRoL2Rpc3Qvc2hhcmVkL2JldHRlci1hdXRoLmRuOF9vcU91Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnYmV0dGVyLWNhbGwnO1xuaW1wb3J0ICdAYmV0dGVyLWF1dGgvdXRpbHMvaGFzaCc7XG5pbXBvcnQgJ0Bub2JsZS9jaXBoZXJzL2NoYWNoYSc7XG5pbXBvcnQgJ0Bub2JsZS9jaXBoZXJzL3V0aWxzJztcbmltcG9ydCAnQG5vYmxlL2NpcGhlcnMvd2ViY3J5cHRvJztcbmltcG9ydCAnQGJldHRlci1hdXRoL3V0aWxzL2Jhc2U2NCc7XG5pbXBvcnQgJ2pvc2UnO1xuaW1wb3J0ICdAbm9ibGUvaGFzaGVzL3NjcnlwdCc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscyc7XG5pbXBvcnQgJ0BiZXR0ZXItYXV0aC91dGlscy9oZXgnO1xuaW1wb3J0ICdAbm9ibGUvaGFzaGVzL3V0aWxzJztcbmltcG9ydCB7IGcgYXMgZ2VuZXJhdGVSYW5kb21TdHJpbmcgfSBmcm9tICcuL2JldHRlci1hdXRoLkI0UW94ZGdjLm1qcyc7XG5cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlU3RhdGUoYywgbGluaykge1xuICBjb25zdCBjYWxsYmFja1VSTCA9IGMuYm9keT8uY2FsbGJhY2tVUkwgfHwgYy5jb250ZXh0Lm9wdGlvbnMuYmFzZVVSTDtcbiAgaWYgKCFjYWxsYmFja1VSTCkge1xuICAgIHRocm93IG5ldyBBUElFcnJvcihcIkJBRF9SRVFVRVNUXCIsIHtcbiAgICAgIG1lc3NhZ2U6IFwiY2FsbGJhY2tVUkwgaXMgcmVxdWlyZWRcIlxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGNvZGVWZXJpZmllciA9IGdlbmVyYXRlUmFuZG9tU3RyaW5nKDEyOCk7XG4gIGNvbnN0IHN0YXRlID0gZ2VuZXJhdGVSYW5kb21TdHJpbmcoMzIpO1xuICBjb25zdCBkYXRhID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgIGNhbGxiYWNrVVJMLFxuICAgIGNvZGVWZXJpZmllcixcbiAgICBlcnJvclVSTDogYy5ib2R5Py5lcnJvckNhbGxiYWNrVVJMLFxuICAgIG5ld1VzZXJVUkw6IGMuYm9keT8ubmV3VXNlckNhbGxiYWNrVVJMLFxuICAgIGxpbmssXG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB0aGUgYWN0dWFsIGV4cGlyeSB0aW1lIG9mIHRoZSBzdGF0ZVxuICAgICAqL1xuICAgIGV4cGlyZXNBdDogRGF0ZS5ub3coKSArIDEwICogNjAgKiAxZTMsXG4gICAgcmVxdWVzdFNpZ25VcDogYy5ib2R5Py5yZXF1ZXN0U2lnblVwXG4gIH0pO1xuICBjb25zdCBleHBpcmVzQXQgPSAvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKTtcbiAgZXhwaXJlc0F0LnNldE1pbnV0ZXMoZXhwaXJlc0F0LmdldE1pbnV0ZXMoKSArIDEwKTtcbiAgY29uc3QgdmVyaWZpY2F0aW9uID0gYXdhaXQgYy5jb250ZXh0LmludGVybmFsQWRhcHRlci5jcmVhdGVWZXJpZmljYXRpb25WYWx1ZShcbiAgICB7XG4gICAgICB2YWx1ZTogZGF0YSxcbiAgICAgIGlkZW50aWZpZXI6IHN0YXRlLFxuICAgICAgZXhwaXJlc0F0XG4gICAgfSxcbiAgICBjXG4gICk7XG4gIGlmICghdmVyaWZpY2F0aW9uKSB7XG4gICAgYy5jb250ZXh0LmxvZ2dlci5lcnJvcihcbiAgICAgIFwiVW5hYmxlIHRvIGNyZWF0ZSB2ZXJpZmljYXRpb24uIE1ha2Ugc3VyZSB0aGUgZGF0YWJhc2UgYWRhcHRlciBpcyBwcm9wZXJseSB3b3JraW5nIGFuZCB0aGVyZSBpcyBhIHZlcmlmaWNhdGlvbiB0YWJsZSBpbiB0aGUgZGF0YWJhc2VcIlxuICAgICk7XG4gICAgdGhyb3cgbmV3IEFQSUVycm9yKFwiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCIsIHtcbiAgICAgIG1lc3NhZ2U6IFwiVW5hYmxlIHRvIGNyZWF0ZSB2ZXJpZmljYXRpb25cIlxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RhdGU6IHZlcmlmaWNhdGlvbi5pZGVudGlmaWVyLFxuICAgIGNvZGVWZXJpZmllclxuICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gcGFyc2VTdGF0ZShjKSB7XG4gIGNvbnN0IHN0YXRlID0gYy5xdWVyeS5zdGF0ZSB8fCBjLmJvZHkuc3RhdGU7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCBjLmNvbnRleHQuaW50ZXJuYWxBZGFwdGVyLmZpbmRWZXJpZmljYXRpb25WYWx1ZShzdGF0ZSk7XG4gIGlmICghZGF0YSkge1xuICAgIGMuY29udGV4dC5sb2dnZXIuZXJyb3IoXCJTdGF0ZSBNaXNtYXRjaC4gVmVyaWZpY2F0aW9uIG5vdCBmb3VuZFwiLCB7XG4gICAgICBzdGF0ZVxuICAgIH0pO1xuICAgIHRocm93IGMucmVkaXJlY3QoXG4gICAgICBgJHtjLmNvbnRleHQuYmFzZVVSTH0vZXJyb3I/ZXJyb3I9cGxlYXNlX3Jlc3RhcnRfdGhlX3Byb2Nlc3NgXG4gICAgKTtcbiAgfVxuICBjb25zdCBwYXJzZWREYXRhID0gei5vYmplY3Qoe1xuICAgIGNhbGxiYWNrVVJMOiB6LnN0cmluZygpLFxuICAgIGNvZGVWZXJpZmllcjogei5zdHJpbmcoKSxcbiAgICBlcnJvclVSTDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIG5ld1VzZXJVUkw6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgICBleHBpcmVzQXQ6IHoubnVtYmVyKCksXG4gICAgbGluazogei5vYmplY3Qoe1xuICAgICAgZW1haWw6IHouc3RyaW5nKCksXG4gICAgICB1c2VySWQ6IHouY29lcmNlLnN0cmluZygpXG4gICAgfSkub3B0aW9uYWwoKSxcbiAgICByZXF1ZXN0U2lnblVwOiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpXG4gIH0pLnBhcnNlKEpTT04ucGFyc2UoZGF0YS52YWx1ZSkpO1xuICBpZiAoIXBhcnNlZERhdGEuZXJyb3JVUkwpIHtcbiAgICBwYXJzZWREYXRhLmVycm9yVVJMID0gYCR7Yy5jb250ZXh0LmJhc2VVUkx9L2Vycm9yYDtcbiAgfVxuICBpZiAocGFyc2VkRGF0YS5leHBpcmVzQXQgPCBEYXRlLm5vdygpKSB7XG4gICAgYXdhaXQgYy5jb250ZXh0LmludGVybmFsQWRhcHRlci5kZWxldGVWZXJpZmljYXRpb25WYWx1ZShkYXRhLmlkKTtcbiAgICB0aHJvdyBjLnJlZGlyZWN0KFxuICAgICAgYCR7Yy5jb250ZXh0LmJhc2VVUkx9L2Vycm9yP2Vycm9yPXBsZWFzZV9yZXN0YXJ0X3RoZV9wcm9jZXNzYFxuICAgICk7XG4gIH1cbiAgYXdhaXQgYy5jb250ZXh0LmludGVybmFsQWRhcHRlci5kZWxldGVWZXJpZmljYXRpb25WYWx1ZShkYXRhLmlkKTtcbiAgcmV0dXJuIHBhcnNlZERhdGE7XG59XG5cbmV4cG9ydCB7IGdlbmVyYXRlU3RhdGUgYXMgZywgcGFyc2VTdGF0ZSBhcyBwIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.dn8_oqOu.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.gs0ZuLWb.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.gs0ZuLWb.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ getAdapter),\n/* harmony export */   b: () => (/* binding */ convertToDB),\n/* harmony export */   c: () => (/* binding */ createInternalAdapter),\n/* harmony export */   d: () => (/* binding */ convertFromDB),\n/* harmony export */   e: () => (/* binding */ getMigrations),\n/* harmony export */   f: () => (/* binding */ getSchema),\n/* harmony export */   g: () => (/* binding */ getWithHooks),\n/* harmony export */   m: () => (/* binding */ matchType)\n/* harmony export */ });\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./better-auth.Cc72UxUH.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\");\n/* harmony import */ var _better_auth_iKoUsdFE_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./better-auth.iKoUsdFE.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs\");\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.DORkW_Ge.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DORkW_Ge.mjs\");\n/* harmony import */ var _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _better_auth_Cue6reJU_mjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./better-auth.Cue6reJU.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cue6reJU.mjs\");\n/* harmony import */ var _better_auth_CTsDOF_S_mjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./better-auth.CTsDOF_S.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CTsDOF_S.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getWithHooks(adapter, ctx) {\n  const hooks = ctx.hooks;\n  async function createWithHooks(data, model, customCreateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.before;\n      if (toRun) {\n        const result = await toRun(actualData, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\" && \"data\" in result;\n        if (isObject) {\n          actualData = {\n            ...actualData,\n            ...result.data\n          };\n        }\n      }\n    }\n    const customCreated = customCreateFn ? await customCreateFn.fn(actualData) : null;\n    const created = !customCreateFn || customCreateFn.executeMainFn ? await adapter.create({\n      model,\n      data: actualData\n    }) : customCreated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.create?.after;\n      if (toRun) {\n        await toRun(created, context);\n      }\n    }\n    return created;\n  }\n  async function updateWithHooks(data, where, model, customUpdateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.update({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  async function updateManyWithHooks(data, where, model, customUpdateFn, context) {\n    let actualData = data;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.before;\n      if (toRun) {\n        const result = await toRun(data, context);\n        if (result === false) {\n          return null;\n        }\n        const isObject = typeof result === \"object\";\n        actualData = isObject ? result.data : result;\n      }\n    }\n    const customUpdated = customUpdateFn ? await customUpdateFn.fn(actualData) : null;\n    const updated = !customUpdateFn || customUpdateFn.executeMainFn ? await adapter.updateMany({\n      model,\n      update: actualData,\n      where\n    }) : customUpdated;\n    for (const hook of hooks || []) {\n      const toRun = hook[model]?.update?.after;\n      if (toRun) {\n        await toRun(updated, context);\n      }\n    }\n    return updated;\n  }\n  return {\n    createWithHooks,\n    updateWithHooks,\n    updateManyWithHooks\n  };\n}\n\nconst createInternalAdapter = (adapter, ctx) => {\n  const options = ctx.options;\n  const secondaryStorage = options.secondaryStorage;\n  const sessionExpiration = options.session?.expiresIn || 60 * 60 * 24 * 7;\n  const { createWithHooks, updateWithHooks, updateManyWithHooks } = getWithHooks(adapter, ctx);\n  return {\n    createOAuthUser: async (user, account, context) => {\n      const createdUser = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...user\n        },\n        \"user\",\n        void 0,\n        context\n      );\n      const createdAccount = await createWithHooks(\n        {\n          ...account,\n          userId: createdUser.id || user.id,\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return {\n        user: createdUser,\n        account: createdAccount\n      };\n    },\n    createUser: async (user, context) => {\n      const createdUser = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          emailVerified: false,\n          ...user,\n          email: user.email?.toLowerCase()\n        },\n        \"user\",\n        void 0,\n        context\n      );\n      return createdUser;\n    },\n    createAccount: async (account, context) => {\n      const createdAccount = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...account\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return createdAccount;\n    },\n    listSessions: async (userId) => {\n      if (secondaryStorage) {\n        const currentList = await secondaryStorage.get(\n          `active-sessions-${userId}`\n        );\n        if (!currentList) return [];\n        const list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n        const now = Date.now();\n        const validSessions = list.filter((s) => s.expiresAt > now);\n        const sessions2 = [];\n        for (const session of validSessions) {\n          const sessionStringified = await secondaryStorage.get(session.token);\n          if (sessionStringified) {\n            const s = JSON.parse(sessionStringified);\n            const parsedSession = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, {\n              ...s.session,\n              expiresAt: new Date(s.session.expiresAt)\n            });\n            sessions2.push(parsedSession);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await adapter.findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return sessions;\n    },\n    listUsers: async (limit, offset, sortBy, where) => {\n      const users = await adapter.findMany({\n        model: \"user\",\n        limit,\n        offset,\n        sortBy,\n        where\n      });\n      return users;\n    },\n    countTotalUsers: async (where) => {\n      const total = await adapter.count({\n        model: \"user\",\n        where\n      });\n      if (typeof total === \"string\") {\n        return parseInt(total);\n      }\n      return total;\n    },\n    deleteUser: async (userId) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(`active-sessions-${userId}`);\n      }\n      if (!secondaryStorage || options.session?.storeSessionInDatabase) {\n        await adapter.deleteMany({\n          model: \"session\",\n          where: [\n            {\n              field: \"userId\",\n              value: userId\n            }\n          ]\n        });\n      }\n      await adapter.deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      await adapter.delete({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n    },\n    createSession: async (userId, ctx2, dontRememberMe, override, overrideAll) => {\n      const headers = ctx2.headers || ctx2.request?.headers;\n      const { id: _, ...rest } = override || {};\n      const data = {\n        ipAddress: ctx2.request || ctx2.headers ? (0,_better_auth_iKoUsdFE_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(ctx2.request || ctx2.headers, ctx2.context.options) || \"\" : \"\",\n        userAgent: headers?.get(\"user-agent\") || \"\",\n        ...rest,\n        /**\n         * If the user doesn't want to be remembered\n         * set the session to expire in 1 day.\n         * The cookie will be set to expire at the end of the session\n         */\n        expiresAt: dontRememberMe ? (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(60 * 60 * 24, \"sec\") : (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(sessionExpiration, \"sec\"),\n        userId,\n        token: (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(32),\n        createdAt: /* @__PURE__ */ new Date(),\n        updatedAt: /* @__PURE__ */ new Date(),\n        ...overrideAll ? rest : {}\n      };\n      const res = await createWithHooks(\n        data,\n        \"session\",\n        secondaryStorage ? {\n          fn: async (sessionData) => {\n            const currentList = await secondaryStorage.get(\n              `active-sessions-${userId}`\n            );\n            let list = [];\n            const now = Date.now();\n            if (currentList) {\n              list = (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(currentList) || [];\n              list = list.filter((session) => session.expiresAt > now);\n            }\n            list.push({\n              token: data.token,\n              expiresAt: now + sessionExpiration * 1e3\n            });\n            await secondaryStorage.set(\n              `active-sessions-${userId}`,\n              JSON.stringify(list),\n              sessionExpiration\n            );\n            return sessionData;\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        ctx2\n      );\n      return res;\n    },\n    findSession: async (token) => {\n      if (secondaryStorage) {\n        const sessionStringified = await secondaryStorage.get(token);\n        if (!sessionStringified && !options.session?.storeSessionInDatabase) {\n          return null;\n        }\n        if (sessionStringified) {\n          const s = JSON.parse(sessionStringified);\n          const parsedSession2 = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, {\n            ...s.session,\n            expiresAt: new Date(s.session.expiresAt),\n            createdAt: new Date(s.session.createdAt),\n            updatedAt: new Date(s.session.updatedAt)\n          });\n          const parsedUser2 = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, {\n            ...s.user,\n            createdAt: new Date(s.user.createdAt),\n            updatedAt: new Date(s.user.updatedAt)\n          });\n          return {\n            session: parsedSession2,\n            user: parsedUser2\n          };\n        }\n      }\n      const session = await adapter.findOne({\n        model: \"session\",\n        where: [\n          {\n            value: token,\n            field: \"token\"\n          }\n        ]\n      });\n      if (!session) {\n        return null;\n      }\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            value: session.userId,\n            field: \"id\"\n          }\n        ]\n      });\n      if (!user) {\n        return null;\n      }\n      const parsedSession = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__.d)(ctx.options, session);\n      const parsedUser = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_1__.b)(ctx.options, user);\n      return {\n        session: parsedSession,\n        user: parsedUser\n      };\n    },\n    findSessions: async (sessionTokens) => {\n      if (secondaryStorage) {\n        const sessions2 = [];\n        for (const sessionToken of sessionTokens) {\n          const sessionStringified = await secondaryStorage.get(sessionToken);\n          if (sessionStringified) {\n            const s = JSON.parse(sessionStringified);\n            const session = {\n              session: {\n                ...s.session,\n                expiresAt: new Date(s.session.expiresAt)\n              },\n              user: {\n                ...s.user,\n                createdAt: new Date(s.user.createdAt),\n                updatedAt: new Date(s.user.updatedAt)\n              }\n            };\n            sessions2.push(session);\n          }\n        }\n        return sessions2;\n      }\n      const sessions = await adapter.findMany({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: sessionTokens,\n            operator: \"in\"\n          }\n        ]\n      });\n      const userIds = sessions.map((session) => {\n        return session.userId;\n      });\n      if (!userIds.length) return [];\n      const users = await adapter.findMany({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userIds,\n            operator: \"in\"\n          }\n        ]\n      });\n      return sessions.map((session) => {\n        const user = users.find((u) => u.id === session.userId);\n        if (!user) return null;\n        return {\n          session,\n          user\n        };\n      });\n    },\n    updateSession: async (sessionToken, session, context) => {\n      const updatedSession = await updateWithHooks(\n        session,\n        [{ field: \"token\", value: sessionToken }],\n        \"session\",\n        secondaryStorage ? {\n          async fn(data) {\n            const currentSession = await secondaryStorage.get(sessionToken);\n            let updatedSession2 = null;\n            if (currentSession) {\n              const parsedSession = JSON.parse(currentSession);\n              updatedSession2 = {\n                ...parsedSession.session,\n                ...data\n              };\n              return updatedSession2;\n            } else {\n              return null;\n            }\n          },\n          executeMainFn: options.session?.storeSessionInDatabase\n        } : void 0,\n        context\n      );\n      return updatedSession;\n    },\n    deleteSession: async (token) => {\n      if (secondaryStorage) {\n        await secondaryStorage.delete(token);\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await adapter.delete({\n        model: \"session\",\n        where: [\n          {\n            field: \"token\",\n            value: token\n          }\n        ]\n      });\n    },\n    deleteAccounts: async (userId) => {\n      await adapter.deleteMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n    },\n    deleteAccount: async (accountId) => {\n      await adapter.delete({\n        model: \"account\",\n        where: [\n          {\n            field: \"id\",\n            value: accountId\n          }\n        ]\n      });\n    },\n    deleteSessions: async (userIdOrSessionTokens) => {\n      if (secondaryStorage) {\n        if (typeof userIdOrSessionTokens === \"string\") {\n          const activeSession = await secondaryStorage.get(\n            `active-sessions-${userIdOrSessionTokens}`\n          );\n          const sessions = activeSession ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_3__.s)(activeSession) : [];\n          if (!sessions) return;\n          for (const session of sessions) {\n            await secondaryStorage.delete(session.token);\n          }\n        } else {\n          for (const sessionToken of userIdOrSessionTokens) {\n            const session = await secondaryStorage.get(sessionToken);\n            if (session) {\n              await secondaryStorage.delete(sessionToken);\n            }\n          }\n        }\n        if (!options.session?.storeSessionInDatabase || ctx.options.session?.preserveSessionInDatabase) {\n          return;\n        }\n      }\n      await adapter.deleteMany({\n        model: \"session\",\n        where: [\n          {\n            field: Array.isArray(userIdOrSessionTokens) ? \"token\" : \"userId\",\n            value: userIdOrSessionTokens,\n            operator: Array.isArray(userIdOrSessionTokens) ? \"in\" : void 0\n          }\n        ]\n      });\n    },\n    findOAuthUser: async (email, accountId, providerId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            value: accountId,\n            field: \"accountId\"\n          },\n          {\n            value: providerId,\n            field: \"providerId\"\n          }\n        ]\n      });\n      if (account) {\n        const user = await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              value: account.userId,\n              field: \"id\"\n            }\n          ]\n        });\n        if (user) {\n          return {\n            user,\n            accounts: [account]\n          };\n        } else {\n          return null;\n        }\n      } else {\n        const user = await adapter.findOne({\n          model: \"user\",\n          where: [\n            {\n              value: email.toLowerCase(),\n              field: \"email\"\n            }\n          ]\n        });\n        if (user) {\n          const accounts = await adapter.findMany({\n            model: \"account\",\n            where: [\n              {\n                value: user.id,\n                field: \"userId\"\n              }\n            ]\n          });\n          return {\n            user,\n            accounts: accounts || []\n          };\n        } else {\n          return null;\n        }\n      }\n    },\n    findUserByEmail: async (email, options2) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            value: email.toLowerCase(),\n            field: \"email\"\n          }\n        ]\n      });\n      if (!user) return null;\n      if (options2?.includeAccounts) {\n        const accounts = await adapter.findMany({\n          model: \"account\",\n          where: [\n            {\n              value: user.id,\n              field: \"userId\"\n            }\n          ]\n        });\n        return {\n          user,\n          accounts\n        };\n      }\n      return {\n        user,\n        accounts: []\n      };\n    },\n    findUserById: async (userId) => {\n      const user = await adapter.findOne({\n        model: \"user\",\n        where: [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ]\n      });\n      return user;\n    },\n    linkAccount: async (account, context) => {\n      const _account = await createWithHooks(\n        {\n          ...account,\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date()\n        },\n        \"account\",\n        void 0,\n        context\n      );\n      return _account;\n    },\n    updateUser: async (userId, data, context) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"id\",\n            value: userId\n          }\n        ],\n        \"user\",\n        void 0,\n        context\n      );\n      return user;\n    },\n    updateUserByEmail: async (email, data, context) => {\n      const user = await updateWithHooks(\n        data,\n        [\n          {\n            field: \"email\",\n            value: email.toLowerCase()\n          }\n        ],\n        \"user\",\n        void 0,\n        context\n      );\n      return user;\n    },\n    updatePassword: async (userId, password, context) => {\n      await updateManyWithHooks(\n        {\n          password\n        },\n        [\n          {\n            field: \"userId\",\n            value: userId\n          },\n          {\n            field: \"providerId\",\n            value: \"credential\"\n          }\n        ],\n        \"account\",\n        void 0,\n        context\n      );\n    },\n    findAccounts: async (userId) => {\n      const accounts = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return accounts;\n    },\n    findAccount: async (accountId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByProviderId: async (accountId, providerId) => {\n      const account = await adapter.findOne({\n        model: \"account\",\n        where: [\n          {\n            field: \"accountId\",\n            value: accountId\n          },\n          {\n            field: \"providerId\",\n            value: providerId\n          }\n        ]\n      });\n      return account;\n    },\n    findAccountByUserId: async (userId) => {\n      const account = await adapter.findMany({\n        model: \"account\",\n        where: [\n          {\n            field: \"userId\",\n            value: userId\n          }\n        ]\n      });\n      return account;\n    },\n    updateAccount: async (id, data, context) => {\n      const account = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"account\",\n        void 0,\n        context\n      );\n      return account;\n    },\n    createVerificationValue: async (data, context) => {\n      const verification = await createWithHooks(\n        {\n          createdAt: /* @__PURE__ */ new Date(),\n          updatedAt: /* @__PURE__ */ new Date(),\n          ...data\n        },\n        \"verification\",\n        void 0,\n        context\n      );\n      return verification;\n    },\n    findVerificationValue: async (identifier) => {\n      const verification = await adapter.findMany({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ],\n        sortBy: {\n          field: \"createdAt\",\n          direction: \"desc\"\n        },\n        limit: 1\n      });\n      if (!options.verification?.disableCleanup) {\n        await adapter.deleteMany({\n          model: \"verification\",\n          where: [\n            {\n              field: \"expiresAt\",\n              value: /* @__PURE__ */ new Date(),\n              operator: \"lt\"\n            }\n          ]\n        });\n      }\n      const lastVerification = verification[0];\n      return lastVerification;\n    },\n    deleteVerificationValue: async (id) => {\n      await adapter.delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"id\",\n            value: id\n          }\n        ]\n      });\n    },\n    deleteVerificationByIdentifier: async (identifier) => {\n      await adapter.delete({\n        model: \"verification\",\n        where: [\n          {\n            field: \"identifier\",\n            value: identifier\n          }\n        ]\n      });\n    },\n    updateVerificationValue: async (id, data, context) => {\n      const verification = await updateWithHooks(\n        data,\n        [{ field: \"id\", value: id }],\n        \"verification\",\n        void 0,\n        context\n      );\n      return verification;\n    }\n  };\n};\n\nasync function getAdapter(options) {\n  if (!options.database) {\n    const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_15__.g)(options);\n    const memoryDB = Object.keys(tables).reduce((acc, key) => {\n      acc[key] = [];\n      return acc;\n    }, {});\n    _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_12__.l.warn(\n      \"No database configuration provided. Using memory adapter in development\"\n    );\n    return (0,_better_auth_CTsDOF_S_mjs__WEBPACK_IMPORTED_MODULE_18__.m)(memoryDB)(options);\n  }\n  if (typeof options.database === \"function\") {\n    return options.database(options);\n  }\n  const { kysely, databaseType } = await (0,_better_auth_Cue6reJU_mjs__WEBPACK_IMPORTED_MODULE_17__.c)(options);\n  if (!kysely) {\n    throw new _better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_16__.B(\"Failed to initialize database adapter\");\n  }\n  return (0,_better_auth_Cue6reJU_mjs__WEBPACK_IMPORTED_MODULE_17__.k)(kysely, {\n    type: databaseType || \"sqlite\",\n    debugLogs: \"debugLogs\" in options.database ? options.database.debugLogs : false\n  })(options);\n}\nfunction convertToDB(fields, values) {\n  let result = values.id ? {\n    id: values.id\n  } : {};\n  for (const key in fields) {\n    const field = fields[key];\n    const value = values[key];\n    if (value === void 0) {\n      continue;\n    }\n    result[field.fieldName || key] = value;\n  }\n  return result;\n}\nfunction convertFromDB(fields, values) {\n  if (!values) {\n    return null;\n  }\n  let result = {\n    id: values.id\n  };\n  for (const [key, value] of Object.entries(fields)) {\n    result[key] = values[value.fieldName || key];\n  }\n  return result;\n}\n\nfunction getSchema(config) {\n  const tables = (0,_better_auth_DORkW_Ge_mjs__WEBPACK_IMPORTED_MODULE_15__.g)(config);\n  let schema = {};\n  for (const key in tables) {\n    const table = tables[key];\n    const fields = table.fields;\n    let actualFields = {};\n    Object.entries(fields).forEach(([key2, field]) => {\n      actualFields[field.fieldName || key2] = field;\n      if (field.references) {\n        const refTable = tables[field.references.model];\n        if (refTable) {\n          actualFields[field.fieldName || key2].references = {\n            model: refTable.modelName,\n            field: field.references.field\n          };\n        }\n      }\n    });\n    if (schema[table.modelName]) {\n      schema[table.modelName].fields = {\n        ...schema[table.modelName].fields,\n        ...actualFields\n      };\n      continue;\n    }\n    schema[table.modelName] = {\n      fields: actualFields,\n      order: table.order || Infinity\n    };\n  }\n  return schema;\n}\n\nconst postgresMap = {\n  string: [\"character varying\", \"text\"],\n  number: [\n    \"int4\",\n    \"integer\",\n    \"bigint\",\n    \"smallint\",\n    \"numeric\",\n    \"real\",\n    \"double precision\"\n  ],\n  boolean: [\"bool\", \"boolean\"],\n  date: [\"timestamp\", \"date\"]\n};\nconst mysqlMap = {\n  string: [\"varchar\", \"text\"],\n  number: [\n    \"integer\",\n    \"int\",\n    \"bigint\",\n    \"smallint\",\n    \"decimal\",\n    \"float\",\n    \"double\"\n  ],\n  boolean: [\"boolean\", \"tinyint\"],\n  date: [\"timestamp\", \"datetime\", \"date\"]\n};\nconst sqliteMap = {\n  string: [\"TEXT\"],\n  number: [\"INTEGER\", \"REAL\"],\n  boolean: [\"INTEGER\", \"BOOLEAN\"],\n  // 0 or 1\n  date: [\"DATE\", \"INTEGER\"]\n};\nconst mssqlMap = {\n  string: [\"text\", \"varchar\"],\n  number: [\"int\", \"bigint\", \"smallint\", \"decimal\", \"float\", \"double\"],\n  boolean: [\"bit\", \"smallint\"],\n  date: [\"datetime\", \"date\"]\n};\nconst map = {\n  postgres: postgresMap,\n  mysql: mysqlMap,\n  sqlite: sqliteMap,\n  mssql: mssqlMap\n};\nfunction matchType(columnDataType, fieldType, dbType) {\n  if (fieldType === \"string[]\" || fieldType === \"number[]\") {\n    return columnDataType.toLowerCase().includes(\"json\");\n  }\n  const types = map[dbType];\n  const type = Array.isArray(fieldType) ? types[\"string\"].map((t) => t.toLowerCase()) : types[fieldType].map((t) => t.toLowerCase());\n  const matches = type.includes(columnDataType.toLowerCase());\n  return matches;\n}\nasync function getMigrations(config) {\n  const betterAuthSchema = getSchema(config);\n  const logger = (0,_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_12__.c)(config.logger);\n  let { kysely: db, databaseType: dbType } = await (0,_better_auth_Cue6reJU_mjs__WEBPACK_IMPORTED_MODULE_17__.c)(config);\n  if (!dbType) {\n    logger.warn(\n      \"Could not determine database type, defaulting to sqlite. Please provide a type in the database options to avoid this.\"\n    );\n    dbType = \"sqlite\";\n  }\n  if (!db) {\n    logger.error(\n      \"Only kysely adapter is supported for migrations. You can use `generate` command to generate the schema, if you're using a different adapter.\"\n    );\n    process.exit(1);\n  }\n  const tableMetadata = await db.introspection.getTables();\n  const toBeCreated = [];\n  const toBeAdded = [];\n  for (const [key, value] of Object.entries(betterAuthSchema)) {\n    const table = tableMetadata.find((t) => t.name === key);\n    if (!table) {\n      const tIndex = toBeCreated.findIndex((t) => t.table === key);\n      const tableData = {\n        table: key,\n        fields: value.fields,\n        order: value.order || Infinity\n      };\n      const insertIndex = toBeCreated.findIndex(\n        (t) => (t.order || Infinity) > tableData.order\n      );\n      if (insertIndex === -1) {\n        if (tIndex === -1) {\n          toBeCreated.push(tableData);\n        } else {\n          toBeCreated[tIndex].fields = {\n            ...toBeCreated[tIndex].fields,\n            ...value.fields\n          };\n        }\n      } else {\n        toBeCreated.splice(insertIndex, 0, tableData);\n      }\n      continue;\n    }\n    let toBeAddedFields = {};\n    for (const [fieldName, field] of Object.entries(value.fields)) {\n      const column = table.columns.find((c) => c.name === fieldName);\n      if (!column) {\n        toBeAddedFields[fieldName] = field;\n        continue;\n      }\n      if (matchType(column.dataType, field.type, dbType)) {\n        continue;\n      } else {\n        logger.warn(\n          `Field ${fieldName} in table ${key} has a different type in the database. Expected ${field.type} but got ${column.dataType}.`\n        );\n      }\n    }\n    if (Object.keys(toBeAddedFields).length > 0) {\n      toBeAdded.push({\n        table: key,\n        fields: toBeAddedFields,\n        order: value.order || Infinity\n      });\n    }\n  }\n  const migrations = [];\n  function getType(field, fieldName) {\n    const type = field.type;\n    const typeMap = {\n      string: {\n        sqlite: \"text\",\n        postgres: \"text\",\n        mysql: field.unique ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\",\n        mssql: field.unique || field.sortable ? \"varchar(255)\" : field.references ? \"varchar(36)\" : \"text\"\n      },\n      boolean: {\n        sqlite: \"integer\",\n        postgres: \"boolean\",\n        mysql: \"boolean\",\n        mssql: \"smallint\"\n      },\n      number: {\n        sqlite: field.bigint ? \"bigint\" : \"integer\",\n        postgres: field.bigint ? \"bigint\" : \"integer\",\n        mysql: field.bigint ? \"bigint\" : \"integer\",\n        mssql: field.bigint ? \"bigint\" : \"integer\"\n      },\n      date: {\n        sqlite: \"date\",\n        postgres: \"timestamp\",\n        mysql: \"datetime\",\n        mssql: \"datetime\"\n      },\n      id: {\n        postgres: config.advanced?.database?.useNumberId ? \"serial\" : \"text\",\n        mysql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        mssql: config.advanced?.database?.useNumberId ? \"integer\" : \"varchar(36)\",\n        sqlite: config.advanced?.database?.useNumberId ? \"integer\" : \"text\"\n      }\n    };\n    if (fieldName === \"id\" || field.references?.field === \"id\") {\n      return typeMap.id[dbType];\n    }\n    if (dbType === \"sqlite\" && (type === \"string[]\" || type === \"number[]\")) {\n      return \"text\";\n    }\n    if (type === \"string[]\" || type === \"number[]\") {\n      return \"jsonb\";\n    }\n    if (Array.isArray(type)) {\n      return \"text\";\n    }\n    return typeMap[type][dbType || \"sqlite\"];\n  }\n  if (toBeAdded.length) {\n    for (const table of toBeAdded) {\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        const exec = db.schema.alterTable(table.table).addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            );\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          return col;\n        });\n        migrations.push(exec);\n      }\n    }\n  }\n  if (toBeCreated.length) {\n    for (const table of toBeCreated) {\n      let dbT = db.schema.createTable(table.table).addColumn(\n        \"id\",\n        config.advanced?.database?.useNumberId ? dbType === \"postgres\" ? \"serial\" : \"integer\" : dbType === \"mysql\" || dbType === \"mssql\" ? \"varchar(36)\" : \"text\",\n        (col) => {\n          if (config.advanced?.database?.useNumberId) {\n            if (dbType === \"postgres\") {\n              return col.primaryKey().notNull();\n            }\n            return col.autoIncrement().primaryKey().notNull();\n          }\n          return col.primaryKey().notNull();\n        }\n      );\n      for (const [fieldName, field] of Object.entries(table.fields)) {\n        const type = getType(field, fieldName);\n        dbT = dbT.addColumn(fieldName, type, (col) => {\n          col = field.required !== false ? col.notNull() : col;\n          if (field.references) {\n            col = col.references(\n              `${field.references.model}.${field.references.field}`\n            );\n          }\n          if (field.unique) {\n            col = col.unique();\n          }\n          return col;\n        });\n      }\n      migrations.push(dbT);\n    }\n  }\n  async function runMigrations() {\n    for (const migration of migrations) {\n      await migration.execute();\n    }\n  }\n  async function compileMigrations() {\n    const compiled = migrations.map((m) => m.compile().sql);\n    return compiled.join(\";\\n\\n\") + \";\";\n  }\n  return { toBeCreated, toBeAdded, runMigrations, compileMigrations };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.gs0ZuLWb.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getIp)\n/* harmony export */ });\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n\n\nfunction getIp(req, options) {\n  if (options.advanced?.ipAddress?.disableIpTracking) {\n    return null;\n  }\n  const testIP = \"127.0.0.1\";\n  if (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_0__.i) {\n    return testIP;\n  }\n  const headers = \"headers\" in req ? req.headers : req;\n  const defaultHeaders = [\"x-forwarded-for\"];\n  const ipHeaders = options.advanced?.ipAddress?.ipAddressHeaders || defaultHeaders;\n  for (const key of ipHeaders) {\n    const value = \"get\" in headers ? headers.get(key) : headers[key];\n    if (typeof value === \"string\") {\n      const ip = value.split(\",\")[0].trim();\n      if (isValidIP(ip)) {\n        return ip;\n      }\n    }\n  }\n  return null;\n}\nfunction isValidIP(ip) {\n  const ipv4Regex = /^(\\d{1,3}\\.){3}\\d{1,3}$/;\n  if (ipv4Regex.test(ip)) {\n    const parts = ip.split(\".\").map(Number);\n    return parts.every((part) => part >= 0 && part <= 255);\n  }\n  const ipv6Regex = /^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/;\n  return ipv6Regex.test(ip);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguaUtvVXNkRkUubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlEOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSx3REFBTTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsSUFBSSxJQUFJLEVBQUUsR0FBRyxJQUFJO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLElBQUksR0FBRyxFQUFFLFlBQVksSUFBSTtBQUM1RDtBQUNBOztBQUVzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhaWxleXBhcmtlci9Eb2N1bWVudHMvQ29kaW5nL3JhcGlkLWRldi1leHBvLWZ1bGxzdGFjay1zdGFydGVyLXJlcG8vYmFja2VuZC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGguaUtvVXNkRkUubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGkgYXMgaXNUZXN0IH0gZnJvbSAnLi9iZXR0ZXItYXV0aC44em94emctRi5tanMnO1xuXG5mdW5jdGlvbiBnZXRJcChyZXEsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuYWR2YW5jZWQ/LmlwQWRkcmVzcz8uZGlzYWJsZUlwVHJhY2tpbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCB0ZXN0SVAgPSBcIjEyNy4wLjAuMVwiO1xuICBpZiAoaXNUZXN0KSB7XG4gICAgcmV0dXJuIHRlc3RJUDtcbiAgfVxuICBjb25zdCBoZWFkZXJzID0gXCJoZWFkZXJzXCIgaW4gcmVxID8gcmVxLmhlYWRlcnMgOiByZXE7XG4gIGNvbnN0IGRlZmF1bHRIZWFkZXJzID0gW1wieC1mb3J3YXJkZWQtZm9yXCJdO1xuICBjb25zdCBpcEhlYWRlcnMgPSBvcHRpb25zLmFkdmFuY2VkPy5pcEFkZHJlc3M/LmlwQWRkcmVzc0hlYWRlcnMgfHwgZGVmYXVsdEhlYWRlcnM7XG4gIGZvciAoY29uc3Qga2V5IG9mIGlwSGVhZGVycykge1xuICAgIGNvbnN0IHZhbHVlID0gXCJnZXRcIiBpbiBoZWFkZXJzID8gaGVhZGVycy5nZXQoa2V5KSA6IGhlYWRlcnNba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBpcCA9IHZhbHVlLnNwbGl0KFwiLFwiKVswXS50cmltKCk7XG4gICAgICBpZiAoaXNWYWxpZElQKGlwKSkge1xuICAgICAgICByZXR1cm4gaXA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gaXNWYWxpZElQKGlwKSB7XG4gIGNvbnN0IGlwdjRSZWdleCA9IC9eKFxcZHsxLDN9XFwuKXszfVxcZHsxLDN9JC87XG4gIGlmIChpcHY0UmVnZXgudGVzdChpcCkpIHtcbiAgICBjb25zdCBwYXJ0cyA9IGlwLnNwbGl0KFwiLlwiKS5tYXAoTnVtYmVyKTtcbiAgICByZXR1cm4gcGFydHMuZXZlcnkoKHBhcnQpID0+IHBhcnQgPj0gMCAmJiBwYXJ0IDw9IDI1NSk7XG4gIH1cbiAgY29uc3QgaXB2NlJlZ2V4ID0gL14oWzAtOWEtZkEtRl17MSw0fTopezd9WzAtOWEtZkEtRl17MSw0fSQvO1xuICByZXR1cm4gaXB2NlJlZ2V4LnRlc3QoaXApO1xufVxuXG5leHBvcnQgeyBnZXRJcCBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.iKoUsdFE.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.oUCDPPbQ.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.oUCDPPbQ.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ requestPasswordResetCallback),\n/* harmony export */   B: () => (/* binding */ BASE_ERROR_CODES),\n/* harmony export */   C: () => (/* binding */ requestPasswordReset),\n/* harmony export */   D: () => (/* binding */ forgetPasswordCallback),\n/* harmony export */   E: () => (/* binding */ deleteUser),\n/* harmony export */   F: () => (/* binding */ setPassword),\n/* harmony export */   G: () => (/* binding */ changePassword),\n/* harmony export */   H: () => (/* binding */ HIDE_METADATA),\n/* harmony export */   I: () => (/* binding */ changeEmail),\n/* harmony export */   J: () => (/* binding */ sendVerificationEmail),\n/* harmony export */   K: () => (/* binding */ verifyEmail),\n/* harmony export */   L: () => (/* binding */ resetPassword),\n/* harmony export */   M: () => (/* binding */ forgetPassword),\n/* harmony export */   N: () => (/* binding */ signInEmail),\n/* harmony export */   O: () => (/* binding */ signOut),\n/* harmony export */   P: () => (/* binding */ callbackOAuth),\n/* harmony export */   Q: () => (/* binding */ signInSocial),\n/* harmony export */   R: () => (/* binding */ requestOnlySessionMiddleware),\n/* harmony export */   S: () => (/* binding */ optionsMiddleware),\n/* harmony export */   a: () => (/* binding */ createAuthEndpoint),\n/* harmony export */   b: () => (/* binding */ getSession),\n/* harmony export */   c: () => (/* binding */ createAuthMiddleware),\n/* harmony export */   d: () => (/* binding */ sendVerificationEmailFn),\n/* harmony export */   e: () => (/* binding */ createEmailVerificationToken),\n/* harmony export */   f: () => (/* binding */ freshSessionMiddleware),\n/* harmony export */   g: () => (/* binding */ getSessionFromCtx),\n/* harmony export */   h: () => (/* binding */ handleOAuthUserInfo),\n/* harmony export */   i: () => (/* binding */ originCheckMiddleware),\n/* harmony export */   j: () => (/* binding */ error),\n/* harmony export */   k: () => (/* binding */ ok),\n/* harmony export */   l: () => (/* binding */ listSessions),\n/* harmony export */   m: () => (/* binding */ accountInfo),\n/* harmony export */   n: () => (/* binding */ getAccessToken),\n/* harmony export */   o: () => (/* binding */ originCheck),\n/* harmony export */   p: () => (/* binding */ unlinkAccount),\n/* harmony export */   q: () => (/* binding */ deleteUserCallback),\n/* harmony export */   r: () => (/* binding */ refreshToken),\n/* harmony export */   s: () => (/* binding */ sessionMiddleware),\n/* harmony export */   t: () => (/* binding */ listUserAccounts),\n/* harmony export */   u: () => (/* binding */ updateUser),\n/* harmony export */   v: () => (/* binding */ linkSocialAccount),\n/* harmony export */   w: () => (/* binding */ wildcardMatch),\n/* harmony export */   x: () => (/* binding */ revokeOtherSessions),\n/* harmony export */   y: () => (/* binding */ revokeSessions),\n/* harmony export */   z: () => (/* binding */ revokeSession)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var _cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cookies/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/cookies/index.mjs\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _better_auth_dn8_oqOu_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./better-auth.dn8_oqOu.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.dn8_oqOu.mjs\");\n/* harmony import */ var _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../social-providers/index.mjs */ \"(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs\");\n/* harmony import */ var _better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./better-auth.tB5eU6EY.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\");\n/* harmony import */ var _better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n/* harmony import */ var _better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./better-auth.BUPPRXfK.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.BUPPRXfK.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwt/verify.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./better-auth.Cc72UxUH.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cc72UxUH.mjs\");\n/* harmony import */ var _better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./better-auth.8zoxzg-F.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.8zoxzg-F.mjs\");\n/* harmony import */ var _better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @better-auth/utils/hmac */ \"(rsc)/./node_modules/@better-auth/utils/dist/hmac.mjs\");\n/* harmony import */ var _better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @better-auth/utils/binary */ \"(rsc)/./node_modules/@better-auth/utils/dist/binary.mjs\");\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var defu__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! defu */ \"(rsc)/./node_modules/defu/dist/defu.mjs\");\n/* harmony import */ var _better_auth_DDEbWX_S_mjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./better-auth.DDEbWX-S.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DDEbWX-S.mjs\");\n/* harmony import */ var _better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./better-auth.VTXNLFMT.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.VTXNLFMT.mjs\");\n/* harmony import */ var jose_errors__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! jose/errors */ \"(rsc)/./node_modules/jose/dist/node/esm/util/errors.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst optionsMiddleware = (0,better_call__WEBPACK_IMPORTED_MODULE_2__.createMiddleware)(async () => {\n  return {};\n});\nconst createAuthMiddleware = better_call__WEBPACK_IMPORTED_MODULE_2__.createMiddleware.create({\n  use: [\n    optionsMiddleware,\n    /**\n     * Only use for post hooks\n     */\n    (0,better_call__WEBPACK_IMPORTED_MODULE_2__.createMiddleware)(async () => {\n      return {};\n    })\n  ]\n});\nconst createAuthEndpoint = better_call__WEBPACK_IMPORTED_MODULE_2__.createEndpoint.create({\n  use: [optionsMiddleware]\n});\n\nfunction escapeRegExpChar(char) {\n  if (char === \"-\" || char === \"^\" || char === \"$\" || char === \"+\" || char === \".\" || char === \"(\" || char === \")\" || char === \"|\" || char === \"[\" || char === \"]\" || char === \"{\" || char === \"}\" || char === \"*\" || char === \"?\" || char === \"\\\\\") {\n    return `\\\\${char}`;\n  } else {\n    return char;\n  }\n}\nfunction escapeRegExpString(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    result += escapeRegExpChar(str[i]);\n  }\n  return result;\n}\nfunction transform(pattern, separator = true) {\n  if (Array.isArray(pattern)) {\n    let regExpPatterns = pattern.map((p) => `^${transform(p, separator)}$`);\n    return `(?:${regExpPatterns.join(\"|\")})`;\n  }\n  let separatorSplitter = \"\";\n  let separatorMatcher = \"\";\n  let wildcard = \".\";\n  if (separator === true) {\n    separatorSplitter = \"/\";\n    separatorMatcher = \"[/\\\\\\\\]\";\n    wildcard = \"[^/\\\\\\\\]\";\n  } else if (separator) {\n    separatorSplitter = separator;\n    separatorMatcher = escapeRegExpString(separatorSplitter);\n    if (separatorMatcher.length > 1) {\n      separatorMatcher = `(?:${separatorMatcher})`;\n      wildcard = `((?!${separatorMatcher}).)`;\n    } else {\n      wildcard = `[^${separatorMatcher}]`;\n    }\n  }\n  let requiredSeparator = separator ? `${separatorMatcher}+?` : \"\";\n  let optionalSeparator = separator ? `${separatorMatcher}*?` : \"\";\n  let segments = separator ? pattern.split(separatorSplitter) : [pattern];\n  let result = \"\";\n  for (let s = 0; s < segments.length; s++) {\n    let segment = segments[s];\n    let nextSegment = segments[s + 1];\n    let currentSeparator = \"\";\n    if (!segment && s > 0) {\n      continue;\n    }\n    if (separator) {\n      if (s === segments.length - 1) {\n        currentSeparator = optionalSeparator;\n      } else if (nextSegment !== \"**\") {\n        currentSeparator = requiredSeparator;\n      } else {\n        currentSeparator = \"\";\n      }\n    }\n    if (separator && segment === \"**\") {\n      if (currentSeparator) {\n        result += s === 0 ? \"\" : currentSeparator;\n        result += `(?:${wildcard}*?${currentSeparator})*?`;\n      }\n      continue;\n    }\n    for (let c = 0; c < segment.length; c++) {\n      let char = segment[c];\n      if (char === \"\\\\\") {\n        if (c < segment.length - 1) {\n          result += escapeRegExpChar(segment[c + 1]);\n          c++;\n        }\n      } else if (char === \"?\") {\n        result += wildcard;\n      } else if (char === \"*\") {\n        result += `${wildcard}*?`;\n      } else {\n        result += escapeRegExpChar(char);\n      }\n    }\n    result += currentSeparator;\n  }\n  return result;\n}\nfunction isMatch(regexp, sample) {\n  if (typeof sample !== \"string\") {\n    throw new TypeError(`Sample must be a string, but ${typeof sample} given`);\n  }\n  return regexp.test(sample);\n}\nfunction wildcardMatch(pattern, options) {\n  if (typeof pattern !== \"string\" && !Array.isArray(pattern)) {\n    throw new TypeError(\n      `The first argument must be a single pattern string or an array of patterns, but ${typeof pattern} given`\n    );\n  }\n  if (typeof options === \"string\" || typeof options === \"boolean\") {\n    options = { separator: options };\n  }\n  if (arguments.length === 2 && !(typeof options === \"undefined\" || typeof options === \"object\" && options !== null && !Array.isArray(options))) {\n    throw new TypeError(\n      `The second argument must be an options object or a string/boolean separator, but ${typeof options} given`\n    );\n  }\n  options = options || {};\n  if (options.separator === \"\\\\\") {\n    throw new Error(\n      \"\\\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead\"\n    );\n  }\n  let regexpPattern = transform(pattern, options.separator);\n  let regexp = new RegExp(`^${regexpPattern}$`, options.flags);\n  let fn = isMatch.bind(null, regexp);\n  fn.options = options;\n  fn.pattern = pattern;\n  fn.regexp = regexp;\n  return fn;\n}\n\nconst originCheckMiddleware = createAuthMiddleware(async (ctx) => {\n  if (ctx.request?.method !== \"POST\" || !ctx.request) {\n    return;\n  }\n  const { body, query, context } = ctx;\n  const originHeader = ctx.headers?.get(\"origin\") || ctx.headers?.get(\"referer\") || \"\";\n  const callbackURL = body?.callbackURL || query?.callbackURL;\n  const redirectURL = body?.redirectTo;\n  const errorCallbackURL = body?.errorCallbackURL;\n  const newUserCallbackURL = body?.newUserCallbackURL;\n  const trustedOrigins = Array.isArray(context.options.trustedOrigins) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const usesCookies = ctx.headers?.has(\"cookie\");\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_22__.b)(url));\n    }\n    const protocol = (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_22__.c)(url);\n    return protocol === \"http:\" || protocol === \"https:\" || !protocol ? pattern === (0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_22__.g)(url) : url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(url)\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  if (usesCookies && !ctx.context.options.advanced?.disableCSRFCheck) {\n    validateURL(originHeader, \"origin\");\n  }\n  callbackURL && validateURL(callbackURL, \"callbackURL\");\n  redirectURL && validateURL(redirectURL, \"redirectURL\");\n  errorCallbackURL && validateURL(errorCallbackURL, \"errorCallbackURL\");\n  newUserCallbackURL && validateURL(newUserCallbackURL, \"newUserCallbackURL\");\n});\nconst originCheck = (getValue) => createAuthMiddleware(async (ctx) => {\n  if (!ctx.request) {\n    return;\n  }\n  const { context } = ctx;\n  const callbackURL = getValue(ctx);\n  const trustedOrigins = Array.isArray(\n    context.options.trustedOrigins\n  ) ? context.trustedOrigins : [\n    ...context.trustedOrigins,\n    ...await context.options.trustedOrigins?.(ctx.request) || []\n  ];\n  const matchesPattern = (url, pattern) => {\n    if (url.startsWith(\"/\")) {\n      return false;\n    }\n    if (pattern.includes(\"*\")) {\n      return wildcardMatch(pattern)((0,_better_auth_VTXNLFMT_mjs__WEBPACK_IMPORTED_MODULE_22__.b)(url));\n    }\n    return url.startsWith(pattern);\n  };\n  const validateURL = (url, label) => {\n    if (!url) {\n      return;\n    }\n    const isTrustedOrigin = trustedOrigins.some(\n      (origin) => matchesPattern(url, origin) || url?.startsWith(\"/\") && label !== \"origin\" && /^\\/(?!\\/|\\\\|%2f|%5c)[\\w\\-.\\+/@]*(?:\\?[\\w\\-.\\+/=&%@]*)?$/.test(\n        url\n      )\n    );\n    if (!isTrustedOrigin) {\n      ctx.context.logger.error(`Invalid ${label}: ${url}`);\n      ctx.context.logger.info(\n        `If it's a valid URL, please add ${url} to trustedOrigins in your auth config\n`,\n        `Current list of trustedOrigins: ${trustedOrigins}`\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"FORBIDDEN\", { message: `Invalid ${label}` });\n    }\n  };\n  const callbacks = Array.isArray(callbackURL) ? callbackURL : [callbackURL];\n  for (const url of callbacks) {\n    validateURL(url, \"callbackURL\");\n  }\n});\n\nconst BASE_ERROR_CODES = {\n  USER_NOT_FOUND: \"User not found\",\n  FAILED_TO_CREATE_USER: \"Failed to create user\",\n  FAILED_TO_CREATE_SESSION: \"Failed to create session\",\n  FAILED_TO_UPDATE_USER: \"Failed to update user\",\n  FAILED_TO_GET_SESSION: \"Failed to get session\",\n  INVALID_PASSWORD: \"Invalid password\",\n  INVALID_EMAIL: \"Invalid email\",\n  INVALID_EMAIL_OR_PASSWORD: \"Invalid email or password\",\n  SOCIAL_ACCOUNT_ALREADY_LINKED: \"Social account already linked\",\n  PROVIDER_NOT_FOUND: \"Provider not found\",\n  INVALID_TOKEN: \"invalid token\",\n  ID_TOKEN_NOT_SUPPORTED: \"id_token not supported\",\n  FAILED_TO_GET_USER_INFO: \"Failed to get user info\",\n  USER_EMAIL_NOT_FOUND: \"User email not found\",\n  EMAIL_NOT_VERIFIED: \"Email not verified\",\n  PASSWORD_TOO_SHORT: \"Password too short\",\n  PASSWORD_TOO_LONG: \"Password too long\",\n  USER_ALREADY_EXISTS: \"User already exists\",\n  EMAIL_CAN_NOT_BE_UPDATED: \"Email can not be updated\",\n  CREDENTIAL_ACCOUNT_NOT_FOUND: \"Credential account not found\",\n  SESSION_EXPIRED: \"Session expired. Re-authenticate to perform this action.\",\n  FAILED_TO_UNLINK_LAST_ACCOUNT: \"You can't unlink your last account\",\n  ACCOUNT_NOT_FOUND: \"Account not found\",\n  USER_ALREADY_HAS_PASSWORD: \"User already has a password. Provide that to delete the account.\"\n};\n\nconst getSession = () => createAuthEndpoint(\n  \"/get-session\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(\n      zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        /**\n         * If cookie cache is enabled, it will disable the cache\n         * and fetch the session from the database\n         */\n        disableCookieCache: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(\n          zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean({\n            description: \"Disable cookie cache and fetch session from database\"\n          }).or(zod__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((v) => v === \"true\"))\n        ).optional(),\n        disableRefresh: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean({\n          description: \"Disable session refresh. Useful for checking session status, without updating the session\"\n        }).or(zod__WEBPACK_IMPORTED_MODULE_0__.z.string().transform((v) => v === \"true\")).optional()\n      })\n    ),\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Get the current session\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    session: {\n                      $ref: \"#/components/schemas/Session\"\n                    },\n                    user: {\n                      $ref: \"#/components/schemas/User\"\n                    }\n                  },\n                  required: [\"session\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessionCookieToken = await ctx.getSignedCookie(\n        ctx.context.authCookies.sessionToken.name,\n        ctx.context.secret\n      );\n      if (!sessionCookieToken) {\n        return null;\n      }\n      const sessionDataCookie = ctx.getCookie(\n        ctx.context.authCookies.sessionData.name\n      );\n      const sessionDataPayload = sessionDataCookie ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_7__.s)(_better_auth_utils_binary__WEBPACK_IMPORTED_MODULE_18__.binary.decode(_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_11__.base64.decode(sessionDataCookie))) : null;\n      if (sessionDataPayload) {\n        const isValid = await (0,_better_auth_utils_hmac__WEBPACK_IMPORTED_MODULE_17__.createHMAC)(\"SHA-256\", \"base64urlnopad\").verify(\n          ctx.context.secret,\n          JSON.stringify({\n            ...sessionDataPayload.session,\n            expiresAt: sessionDataPayload.expiresAt\n          }),\n          sessionDataPayload.signature\n        );\n        if (!isValid) {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n          return ctx.json(null);\n        }\n      }\n      const dontRememberMe = await ctx.getSignedCookie(\n        ctx.context.authCookies.dontRememberToken.name,\n        ctx.context.secret\n      );\n      if (sessionDataPayload?.session && ctx.context.options.session?.cookieCache?.enabled && !ctx.query?.disableCookieCache) {\n        const session2 = sessionDataPayload.session;\n        const hasExpired = sessionDataPayload.expiresAt < Date.now() || session2.session.expiresAt < /* @__PURE__ */ new Date();\n        if (!hasExpired) {\n          return ctx.json(\n            session2\n          );\n        } else {\n          const dataCookie = ctx.context.authCookies.sessionData.name;\n          ctx.setCookie(dataCookie, \"\", {\n            maxAge: 0\n          });\n        }\n      }\n      const session = await ctx.context.internalAdapter.findSession(sessionCookieToken);\n      ctx.context.session = session;\n      if (!session || session.session.expiresAt < /* @__PURE__ */ new Date()) {\n        (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.deleteSessionCookie)(ctx);\n        if (session) {\n          await ctx.context.internalAdapter.deleteSession(\n            session.session.token\n          );\n        }\n        return ctx.json(null);\n      }\n      if (dontRememberMe || ctx.query?.disableRefresh) {\n        return ctx.json(\n          session\n        );\n      }\n      const expiresIn = ctx.context.sessionConfig.expiresIn;\n      const updateAge = ctx.context.sessionConfig.updateAge;\n      const sessionIsDueToBeUpdatedDate = session.session.expiresAt.valueOf() - expiresIn * 1e3 + updateAge * 1e3;\n      const shouldBeUpdated = sessionIsDueToBeUpdatedDate <= Date.now();\n      if (shouldBeUpdated && (!ctx.query?.disableRefresh || !ctx.context.options.session?.disableSessionRefresh)) {\n        const updatedSession = await ctx.context.internalAdapter.updateSession(\n          session.session.token,\n          {\n            expiresAt: (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(ctx.context.sessionConfig.expiresIn, \"sec\"),\n            updatedAt: /* @__PURE__ */ new Date()\n          }\n        );\n        if (!updatedSession) {\n          (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.deleteSessionCookie)(ctx);\n          return ctx.json(null, { status: 401 });\n        }\n        const maxAge = (updatedSession.expiresAt.valueOf() - Date.now()) / 1e3;\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setSessionCookie)(\n          ctx,\n          {\n            session: updatedSession,\n            user: session.user\n          },\n          false,\n          {\n            maxAge\n          }\n        );\n        return ctx.json({\n          session: updatedSession,\n          user: session.user\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setCookieCache)(ctx, session);\n      return ctx.json(\n        session\n      );\n    } catch (error) {\n      ctx.context.logger.error(\"INTERNAL_SERVER_ERROR\", error);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n  }\n);\nconst getSessionFromCtx = async (ctx, config) => {\n  if (ctx.context.session) {\n    return ctx.context.session;\n  }\n  const session = await getSession()({\n    ...ctx,\n    asResponse: false,\n    headers: ctx.headers,\n    returnHeaders: false,\n    query: {\n      ...config,\n      ...ctx.query\n    }\n  }).catch((e) => {\n    return null;\n  });\n  ctx.context.session = session;\n  return session;\n};\nconst sessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\");\n  }\n  return {\n    session\n  };\n});\nconst requestOnlySessionMiddleware = createAuthMiddleware(\n  async (ctx) => {\n    const session = await getSessionFromCtx(ctx);\n    if (!session?.session && (ctx.request || ctx.headers)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\");\n    }\n    return { session };\n  }\n);\nconst freshSessionMiddleware = createAuthMiddleware(async (ctx) => {\n  const session = await getSessionFromCtx(ctx);\n  if (!session?.session) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\");\n  }\n  if (ctx.context.sessionConfig.freshAge === 0) {\n    return {\n      session\n    };\n  }\n  const freshAge = ctx.context.sessionConfig.freshAge;\n  const lastUpdated = session.session.updatedAt?.valueOf() || session.session.createdAt.valueOf();\n  const now = Date.now();\n  const isFresh = now - lastUpdated < freshAge * 1e3;\n  if (!isFresh) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"FORBIDDEN\", {\n      message: \"Session is not fresh\"\n    });\n  }\n  return {\n    session\n  };\n});\nconst listSessions = () => createAuthEndpoint(\n  \"/list-sessions\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"List all active sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    $ref: \"#/components/schemas/Session\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      const sessions = await ctx.context.internalAdapter.listSessions(\n        ctx.context.session.user.id\n      );\n      const activeSessions = sessions.filter((session) => {\n        return session.expiresAt > /* @__PURE__ */ new Date();\n      });\n      return ctx.json(\n        activeSessions\n      );\n    } catch (e) {\n      ctx.context.logger.error(e);\n      throw ctx.error(\"INTERNAL_SERVER_ERROR\");\n    }\n  }\n);\nconst revokeSession = createAuthEndpoint(\n  \"/revoke-session\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The token to revoke\"\n      })\n    }),\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke a single session\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  token: {\n                    type: \"string\",\n                    description: \"The token to revoke\"\n                  }\n                },\n                required: [\"token\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the session was revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token;\n    const findSession = await ctx.context.internalAdapter.findSession(token);\n    if (!findSession) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Session not found\"\n      });\n    }\n    if (findSession.session.userId !== ctx.context.session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\");\n    }\n    try {\n      await ctx.context.internalAdapter.deleteSession(token);\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeSessions = createAuthEndpoint(\n  \"/revoke-sessions\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Revoke all sessions for the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    try {\n      await ctx.context.internalAdapter.deleteSessions(\n        ctx.context.session.user.id\n      );\n    } catch (error) {\n      ctx.context.logger.error(\n        error && typeof error === \"object\" && \"name\" in error ? error.name : \"\",\n        error\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"INTERNAL_SERVER_ERROR\");\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst revokeOtherSessions = createAuthEndpoint(\n  \"/revoke-other-sessions\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Revoke all other sessions for the user except the current one\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if all other sessions were revoked successfully\"\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const session = ctx.context.session;\n    if (!session.user) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\");\n    }\n    const sessions = await ctx.context.internalAdapter.listSessions(\n      session.user.id\n    );\n    const activeSessions = sessions.filter((session2) => {\n      return session2.expiresAt > /* @__PURE__ */ new Date();\n    });\n    const otherSessions = activeSessions.filter(\n      (session2) => session2.token !== ctx.context.session.session.token\n    );\n    await Promise.all(\n      otherSessions.map(\n        (session2) => ctx.context.internalAdapter.deleteSession(session2.token)\n      )\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nasync function createEmailVerificationToken(secret, email, updateTo, expiresIn = 3600) {\n  const token = await (0,_better_auth_DDEbWX_S_mjs__WEBPACK_IMPORTED_MODULE_21__.s)(\n    {\n      email: email.toLowerCase(),\n      updateTo\n    },\n    secret,\n    expiresIn\n  );\n  return token;\n}\nasync function sendVerificationEmailFn(ctx, user) {\n  if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n    ctx.context.logger.error(\"Verification email isn't enabled.\");\n    throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n      message: \"Verification email isn't enabled\"\n    });\n  }\n  const token = await createEmailVerificationToken(\n    ctx.context.secret,\n    user.email,\n    void 0,\n    ctx.context.options.emailVerification?.expiresIn\n  );\n  const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n  await ctx.context.options.emailVerification.sendVerificationEmail(\n    {\n      user,\n      url,\n      token\n    },\n    ctx.request\n  );\n}\nconst sendVerificationEmail = createAuthEndpoint(\n  \"/send-verification-email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      email: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The email to send the verification email to\"\n      }).email(),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The URL to use for email verification callback\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a verification email to the user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  email: {\n                    type: \"string\",\n                    description: \"The email to send the verification email to\",\n                    example: \"user@example.com\"\n                  },\n                  callbackURL: {\n                    type: \"string\",\n                    description: \"The URL to use for email verification callback\",\n                    example: \"https://example.com/callback\",\n                    nullable: true\n                  }\n                },\n                required: [\"email\"]\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was sent successfully\",\n                      example: true\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            description: \"Bad Request\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    message: {\n                      type: \"string\",\n                      description: \"Error message\",\n                      example: \"Verification email isn't enabled\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailVerification?.sendVerificationEmail) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const { email } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email);\n    if (!user) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.USER_NOT_FOUND\n      });\n    }\n    await sendVerificationEmailFn(ctx, user.user);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst verifyEmail = createAuthEndpoint(\n  \"/verify-email\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The token to verify the email\"\n      }),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Verify the email of the user\",\n        parameters: [\n          {\n            name: \"token\",\n            in: \"query\",\n            description: \"The token to verify the email\",\n            required: true,\n            schema: {\n              type: \"string\"\n            }\n          },\n          {\n            name: \"callbackURL\",\n            in: \"query\",\n            description: \"The URL to redirect to after email verification\",\n            required: false,\n            schema: {\n              type: \"string\"\n            }\n          }\n        ],\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"User ID\"\n                        },\n                        email: {\n                          type: \"string\",\n                          description: \"User email\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"User name\"\n                        },\n                        image: {\n                          type: \"string\",\n                          description: \"User image URL\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Indicates if the user email is verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          description: \"User creation date\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          description: \"User update date\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"image\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    },\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the email was verified successfully\"\n                    }\n                  },\n                  required: [\"user\", \"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    function redirectOnError(error) {\n      if (ctx.query.callbackURL) {\n        if (ctx.query.callbackURL.includes(\"?\")) {\n          throw ctx.redirect(`${ctx.query.callbackURL}&error=${error}`);\n        }\n        throw ctx.redirect(`${ctx.query.callbackURL}?error=${error}`);\n      }\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\", {\n        message: error\n      });\n    }\n    const { token } = ctx.query;\n    let jwt;\n    try {\n      jwt = await (0,jose__WEBPACK_IMPORTED_MODULE_23__.jwtVerify)(\n        token,\n        new TextEncoder().encode(ctx.context.secret),\n        {\n          algorithms: [\"HS256\"]\n        }\n      );\n    } catch (e) {\n      if (e instanceof jose_errors__WEBPACK_IMPORTED_MODULE_24__.JWTExpired) {\n        return redirectOnError(\"token_expired\");\n      }\n      return redirectOnError(\"invalid_token\");\n    }\n    const schema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      email: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().email(),\n      updateTo: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n    });\n    const parsed = schema.parse(jwt.payload);\n    const user = await ctx.context.internalAdapter.findUserByEmail(\n      parsed.email\n    );\n    if (!user) {\n      return redirectOnError(\"user_not_found\");\n    }\n    if (parsed.updateTo) {\n      const session = await getSessionFromCtx(ctx);\n      if (!session) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      if (session.user.email !== parsed.email) {\n        if (ctx.query.callbackURL) {\n          throw ctx.redirect(`${ctx.query.callbackURL}?error=unauthorized`);\n        }\n        return redirectOnError(\"unauthorized\");\n      }\n      const updatedUser = await ctx.context.internalAdapter.updateUserByEmail(\n        parsed.email,\n        {\n          email: parsed.updateTo,\n          emailVerified: false\n        },\n        ctx\n      );\n      const newToken = await createEmailVerificationToken(\n        ctx.context.secret,\n        parsed.updateTo\n      );\n      await ctx.context.options.emailVerification?.sendVerificationEmail?.(\n        {\n          user: updatedUser,\n          url: `${ctx.context.baseURL}/verify-email?token=${newToken}&callbackURL=${ctx.query.callbackURL || \"/\"}`,\n          token: newToken\n        },\n        ctx.request\n      );\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setSessionCookie)(ctx, {\n        session: session.session,\n        user: {\n          ...session.user,\n          email: parsed.updateTo,\n          emailVerified: false\n        }\n      });\n      if (ctx.query.callbackURL) {\n        throw ctx.redirect(ctx.query.callbackURL);\n      }\n      return ctx.json({\n        status: true,\n        user: {\n          id: updatedUser.id,\n          email: updatedUser.email,\n          name: updatedUser.name,\n          image: updatedUser.image,\n          emailVerified: updatedUser.emailVerified,\n          createdAt: updatedUser.createdAt,\n          updatedAt: updatedUser.updatedAt\n        }\n      });\n    }\n    await ctx.context.options.emailVerification?.onEmailVerification?.(\n      user.user,\n      ctx.request\n    );\n    await ctx.context.internalAdapter.updateUserByEmail(\n      parsed.email,\n      {\n        emailVerified: true\n      },\n      ctx\n    );\n    if (ctx.context.options.emailVerification?.autoSignInAfterVerification) {\n      const currentSession = await getSessionFromCtx(ctx);\n      if (!currentSession || currentSession.user.email !== parsed.email) {\n        const session = await ctx.context.internalAdapter.createSession(\n          user.user.id,\n          ctx\n        );\n        if (!session) {\n          throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"INTERNAL_SERVER_ERROR\", {\n            message: \"Failed to create session\"\n          });\n        }\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setSessionCookie)(ctx, {\n          session,\n          user: {\n            ...user.user,\n            emailVerified: true\n          }\n        });\n      } else {\n        await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setSessionCookie)(ctx, {\n          session: currentSession.session,\n          user: {\n            ...currentSession.user,\n            emailVerified: true\n          }\n        });\n      }\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL);\n    }\n    return ctx.json({\n      status: true,\n      user: null\n    });\n  }\n);\n\nconst HIDE_METADATA = {\n  isAction: false\n};\n\nasync function handleOAuthUserInfo(c, {\n  userInfo,\n  account,\n  callbackURL,\n  disableSignUp,\n  overrideUserInfo\n}) {\n  const dbUser = await c.context.internalAdapter.findOAuthUser(\n    userInfo.email.toLowerCase(),\n    account.accountId,\n    account.providerId\n  ).catch((e) => {\n    _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_5__.l.error(\n      \"Better auth was unable to query your database.\\nError: \",\n      e\n    );\n    throw c.redirect(\n      `${c.context.baseURL}/error?error=internal_server_error`\n    );\n  });\n  let user = dbUser?.user;\n  let isRegister = !user;\n  if (dbUser) {\n    const hasBeenLinked = dbUser.accounts.find(\n      (a) => a.providerId === account.providerId\n    );\n    if (!hasBeenLinked) {\n      const trustedProviders = c.context.options.account?.accountLinking?.trustedProviders;\n      const isTrustedProvider = trustedProviders?.includes(\n        account.providerId\n      );\n      if (!isTrustedProvider && !userInfo.emailVerified || c.context.options.account?.accountLinking?.enabled === false) {\n        if (_better_auth_8zoxzg_F_mjs__WEBPACK_IMPORTED_MODULE_16__.b) {\n          _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_5__.l.warn(\n            `User already exist but account isn't linked to ${account.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`\n          );\n        }\n        return {\n          error: \"account not linked\",\n          data: null\n        };\n      }\n      try {\n        await c.context.internalAdapter.linkAccount(\n          {\n            providerId: account.providerId,\n            accountId: userInfo.id.toString(),\n            userId: dbUser.user.id,\n            accessToken: account.accessToken,\n            idToken: account.idToken,\n            refreshToken: account.refreshToken,\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          },\n          c\n        );\n      } catch (e) {\n        _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_5__.l.error(\"Unable to link account\", e);\n        return {\n          error: \"unable to link account\",\n          data: null\n        };\n      }\n    } else {\n      if (c.context.options.account?.updateAccountOnSignIn !== false) {\n        const updateData = Object.fromEntries(\n          Object.entries({\n            accessToken: account.accessToken,\n            idToken: account.idToken,\n            refreshToken: account.refreshToken,\n            accessTokenExpiresAt: account.accessTokenExpiresAt,\n            refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n            scope: account.scope\n          }).filter(([_, value]) => value !== void 0)\n        );\n        if (Object.keys(updateData).length > 0) {\n          await c.context.internalAdapter.updateAccount(\n            hasBeenLinked.id,\n            updateData,\n            c\n          );\n        }\n      }\n    }\n    if (overrideUserInfo) {\n      const { id: _, ...restUserInfo } = userInfo;\n      await c.context.internalAdapter.updateUser(dbUser.user.id, {\n        ...restUserInfo,\n        email: userInfo.email.toLowerCase(),\n        emailVerified: userInfo.email.toLowerCase() === dbUser.user.email ? dbUser.user.emailVerified || userInfo.emailVerified : userInfo.emailVerified\n      });\n    }\n  } else {\n    if (disableSignUp) {\n      return {\n        error: \"signup disabled\",\n        data: null,\n        isRegister: false\n      };\n    }\n    try {\n      const { id: _, ...restUserInfo } = userInfo;\n      user = await c.context.internalAdapter.createOAuthUser(\n        {\n          ...restUserInfo,\n          email: userInfo.email.toLowerCase()\n        },\n        {\n          accessToken: account.accessToken,\n          idToken: account.idToken,\n          refreshToken: account.refreshToken,\n          accessTokenExpiresAt: account.accessTokenExpiresAt,\n          refreshTokenExpiresAt: account.refreshTokenExpiresAt,\n          scope: account.scope,\n          providerId: account.providerId,\n          accountId: userInfo.id.toString()\n        },\n        c\n      ).then((res) => res?.user);\n      if (!userInfo.emailVerified && user && c.context.options.emailVerification?.sendOnSignUp) {\n        const token = await createEmailVerificationToken(\n          c.context.secret,\n          user.email,\n          void 0,\n          c.context.options.emailVerification?.expiresIn\n        );\n        const url = `${c.context.baseURL}/verify-email?token=${token}&callbackURL=${callbackURL}`;\n        await c.context.options.emailVerification?.sendVerificationEmail?.(\n          {\n            user,\n            url,\n            token\n          },\n          c.request\n        );\n      }\n    } catch (e) {\n      _better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_5__.l.error(e);\n      if (e instanceof better_call__WEBPACK_IMPORTED_MODULE_2__.APIError) {\n        return {\n          error: e.message,\n          data: null,\n          isRegister: false\n        };\n      }\n      return {\n        error: \"unable to create user\",\n        data: null,\n        isRegister: false\n      };\n    }\n  }\n  if (!user) {\n    return {\n      error: \"unable to create user\",\n      data: null,\n      isRegister: false\n    };\n  }\n  const session = await c.context.internalAdapter.createSession(user.id, c);\n  if (!session) {\n    return {\n      error: \"unable to create session\",\n      data: null,\n      isRegister: false\n    };\n  }\n  return {\n    data: {\n      session,\n      user\n    },\n    error: null,\n    isRegister\n  };\n}\n\nconst signInSocial = createAuthEndpoint(\n  \"/sign-in/social\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      /**\n       * Callback URL to redirect to after the user\n       * has signed in.\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"Callback URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * callback url to redirect if the user is newly registered.\n       *\n       * useful if you have different routes for existing users and new users\n       */\n      newUserCallbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n      /**\n       * Callback url to redirect to if an error happens\n       *\n       * If it's initiated from the client sdk this defaults to\n       * the current url.\n       */\n      errorCallbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"Callback URL to redirect to if an error happens\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use`\n       */\n      provider: _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_6__.SocialProviderListEnum,\n      /**\n       * Disable automatic redirection to the provider\n       *\n       * This is useful if you want to handle the redirection\n       * yourself like in a popup or a different tab.\n       */\n      disableRedirect: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean({\n        description: \"Disable automatic redirection to the provider. Useful for handling the redirection yourself\"\n      }).optional(),\n      /**\n       * ID token from the provider\n       *\n       * This is used to sign in the user\n       * if the user is already signed in with the\n       * provider in the frontend.\n       *\n       * Only applicable if the provider supports\n       * it. Currently only `apple` and `google` is\n       * supported out of the box.\n       */\n      idToken: zod__WEBPACK_IMPORTED_MODULE_0__.z.optional(\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n          /**\n           * ID token from the provider\n           */\n          token: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n            description: \"ID token from the provider\"\n          }),\n          /**\n           * The nonce used to generate the token\n           */\n          nonce: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n            description: \"Nonce used to generate the token\"\n          }).optional(),\n          /**\n           * Access token from the provider\n           */\n          accessToken: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n            description: \"Access token from the provider\"\n          }).optional(),\n          /**\n           * Refresh token from the provider\n           */\n          refreshToken: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n            description: \"Refresh token from the provider\"\n          }).optional(),\n          /**\n           * Expiry date of the token\n           */\n          expiresAt: zod__WEBPACK_IMPORTED_MODULE_0__.z.number({\n            description: \"Expiry date of the token\"\n          }).optional()\n        }),\n        {\n          description: \"ID token from the provider to sign in the user with id token\"\n        }\n      ),\n      scopes: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), {\n        description: \"Array of scopes to request from the provider. This will override the default scopes passed.\"\n      }).optional(),\n      /**\n       * Explicitly request sign-up\n       *\n       * Should be used to allow sign up when\n       * disableImplicitSignUp for this provider is\n       * true\n       */\n      requestSignUp: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean({\n        description: \"Explicitly request sign-up. Useful when disableImplicitSignUp is true for this provider\"\n      }).optional(),\n      /**\n       * The login hint to use for the authorization code request\n       */\n      loginHint: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The login hint to use for the authorization code request\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with a social provider\",\n        operationId: \"socialSignIn\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\",\n                      url: {\n                        type: \"null\",\n                        nullable: true\n                      },\n                      user: {\n                        type: \"object\",\n                        properties: {\n                          id: { type: \"string\" },\n                          email: { type: \"string\" },\n                          name: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          image: {\n                            type: \"string\",\n                            nullable: true\n                          },\n                          emailVerified: {\n                            type: \"boolean\"\n                          },\n                          createdAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          },\n                          updatedAt: {\n                            type: \"string\",\n                            format: \"date-time\"\n                          }\n                        },\n                        required: [\n                          \"id\",\n                          \"email\",\n                          \"emailVerified\",\n                          \"createdAt\",\n                          \"updatedAt\"\n                        ]\n                      }\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    if (c.body.idToken) {\n      if (!provider.verifyIdToken) {\n        c.context.logger.error(\n          \"Provider does not support id token verification\",\n          {\n            provider: c.body.provider\n          }\n        );\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"NOT_FOUND\", {\n          message: BASE_ERROR_CODES.ID_TOKEN_NOT_SUPPORTED\n        });\n      }\n      const { token, nonce } = c.body.idToken;\n      const valid = await provider.verifyIdToken(token, nonce);\n      if (!valid) {\n        c.context.logger.error(\"Invalid id token\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.INVALID_TOKEN\n        });\n      }\n      const userInfo = await provider.getUserInfo({\n        idToken: token,\n        accessToken: c.body.idToken.accessToken,\n        refreshToken: c.body.idToken.refreshToken\n      });\n      if (!userInfo || !userInfo?.user) {\n        c.context.logger.error(\"Failed to get user info\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n        });\n      }\n      if (!userInfo.user.email) {\n        c.context.logger.error(\"User email not found\", {\n          provider: c.body.provider\n        });\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\", {\n          message: BASE_ERROR_CODES.USER_EMAIL_NOT_FOUND\n        });\n      }\n      const data = await handleOAuthUserInfo(c, {\n        userInfo: {\n          ...userInfo.user,\n          email: userInfo.user.email,\n          id: userInfo.user.id,\n          name: userInfo.user.name || \"\",\n          image: userInfo.user.image,\n          emailVerified: userInfo.user.emailVerified || false\n        },\n        account: {\n          providerId: provider.id,\n          accountId: userInfo.user.id,\n          accessToken: c.body.idToken.accessToken\n        },\n        callbackURL: c.body.callbackURL,\n        disableSignUp: provider.disableImplicitSignUp && !c.body.requestSignUp || provider.disableSignUp\n      });\n      if (data.error) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\", {\n          message: data.error\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setSessionCookie)(c, data.data);\n      return c.json({\n        redirect: false,\n        token: data.data.session.token,\n        url: void 0,\n        user: {\n          id: data.data.user.id,\n          email: data.data.user.email,\n          name: data.data.user.name,\n          image: data.data.user.image,\n          emailVerified: data.data.user.emailVerified,\n          createdAt: data.data.user.createdAt,\n          updatedAt: data.data.user.updatedAt\n        }\n      });\n    }\n    const { codeVerifier, state } = await (0,_better_auth_dn8_oqOu_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(c);\n    const url = await provider.createAuthorizationURL({\n      state,\n      codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes,\n      loginHint: c.body.loginHint\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: !c.body.disableRedirect\n    });\n  }\n);\nconst signInEmail = createAuthEndpoint(\n  \"/sign-in/email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      /**\n       * Email of the user\n       */\n      email: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"Email of the user\"\n      }),\n      /**\n       * Password of the user\n       */\n      password: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"Password of the user\"\n      }),\n      /**\n       * Callback URL to use as a redirect for email\n       * verification and for possible redirects\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"Callback URL to use as a redirect for email verification\"\n      }).optional(),\n      /**\n       * If this is false, the session will not be remembered\n       * @default true\n       */\n      rememberMe: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean({\n        description: \"If this is false, the session will not be remembered. Default is `true`.\"\n      }).default(true).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Sign in with email and password\",\n        responses: {\n          \"200\": {\n            description: \"Success - Returns either session details or redirect URL\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  // todo: we need support for multiple schema\n                  type: \"object\",\n                  description: \"Session response when idToken is provided\",\n                  properties: {\n                    redirect: {\n                      type: \"boolean\",\n                      enum: [false]\n                    },\n                    token: {\n                      type: \"string\",\n                      description: \"Session token\"\n                    },\n                    url: {\n                      type: \"null\",\n                      nullable: true\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: { type: \"string\" },\n                        email: { type: \"string\" },\n                        name: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        image: {\n                          type: \"string\",\n                          nullable: true\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"redirect\", \"token\", \"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options?.emailAndPassword?.enabled) {\n      ctx.context.logger.error(\n        \"Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Email and password is not enabled\"\n      });\n    }\n    const { email, password } = ctx.body;\n    const isValidEmail = zod__WEBPACK_IMPORTED_MODULE_0__.z.string().email().safeParse(email);\n    if (!isValidEmail.success) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL\n      });\n    }\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      await ctx.context.password.hash(password);\n      ctx.context.logger.error(\"User not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const credentialAccount = user.accounts.find(\n      (a) => a.providerId === \"credential\"\n    );\n    if (!credentialAccount) {\n      ctx.context.logger.error(\"Credential account not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const currentPassword = credentialAccount?.password;\n    if (!currentPassword) {\n      ctx.context.logger.error(\"Password not found\", { email });\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    const validPassword = await ctx.context.password.verify({\n      hash: currentPassword,\n      password\n    });\n    if (!validPassword) {\n      ctx.context.logger.error(\"Invalid password\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.INVALID_EMAIL_OR_PASSWORD\n      });\n    }\n    if (ctx.context.options?.emailAndPassword?.requireEmailVerification && !user.user.emailVerified) {\n      if (!ctx.context.options?.emailVerification?.sendVerificationEmail) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"FORBIDDEN\", {\n          message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n        });\n      }\n      const token = await createEmailVerificationToken(\n        ctx.context.secret,\n        user.user.email,\n        void 0,\n        ctx.context.options.emailVerification?.expiresIn\n      );\n      const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n      await ctx.context.options.emailVerification.sendVerificationEmail(\n        {\n          user: user.user,\n          url,\n          token\n        },\n        ctx.request\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"FORBIDDEN\", {\n        message: BASE_ERROR_CODES.EMAIL_NOT_VERIFIED\n      });\n    }\n    const session = await ctx.context.internalAdapter.createSession(\n      user.user.id,\n      ctx,\n      ctx.body.rememberMe === false\n    );\n    if (!session) {\n      ctx.context.logger.error(\"Failed to create session\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNAUTHORIZED\", {\n        message: BASE_ERROR_CODES.FAILED_TO_CREATE_SESSION\n      });\n    }\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setSessionCookie)(\n      ctx,\n      {\n        session,\n        user: user.user\n      },\n      ctx.body.rememberMe === false\n    );\n    return ctx.json({\n      redirect: !!ctx.body.callbackURL,\n      token: session.token,\n      url: ctx.body.callbackURL,\n      user: {\n        id: user.user.id,\n        email: user.user.email,\n        name: user.user.name,\n        image: user.user.image,\n        emailVerified: user.user.emailVerified,\n        createdAt: user.user.createdAt,\n        updatedAt: user.user.updatedAt\n      }\n    });\n  }\n);\n\nconst schema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  code: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  error: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  device_id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  error_description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  state: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  user: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nconst callbackOAuth = createAuthEndpoint(\n  \"/callback/:id\",\n  {\n    method: [\"GET\", \"POST\"],\n    body: schema.optional(),\n    query: schema.optional(),\n    metadata: HIDE_METADATA\n  },\n  async (c) => {\n    let queryOrBody;\n    const defaultErrorURL = c.context.options.onAPIError?.errorURL || `${c.context.baseURL}/error`;\n    try {\n      if (c.method === \"GET\") {\n        queryOrBody = schema.parse(c.query);\n      } else if (c.method === \"POST\") {\n        queryOrBody = schema.parse(c.body);\n      } else {\n        throw new Error(\"Unsupported method\");\n      }\n    } catch (e) {\n      c.context.logger.error(\"INVALID_CALLBACK_REQUEST\", e);\n      throw c.redirect(`${defaultErrorURL}?error=invalid_callback_request`);\n    }\n    const { code, error, state, error_description, device_id } = queryOrBody;\n    if (error) {\n      throw c.redirect(\n        `${defaultErrorURL}?error=${error}&error_description=${error_description}`\n      );\n    }\n    if (!state) {\n      c.context.logger.error(\"State not found\", error);\n      throw c.redirect(`${defaultErrorURL}?error=state_not_found`);\n    }\n    const {\n      codeVerifier,\n      callbackURL,\n      link,\n      errorURL,\n      newUserURL,\n      requestSignUp\n    } = await (0,_better_auth_dn8_oqOu_mjs__WEBPACK_IMPORTED_MODULE_4__.p)(c);\n    function redirectOnError(error2) {\n      let url = errorURL || defaultErrorURL;\n      if (url.includes(\"?\")) {\n        url = `${url}&error=${error2}`;\n      } else {\n        url = `${url}?error=${error2}`;\n      }\n      throw c.redirect(url);\n    }\n    if (!code) {\n      c.context.logger.error(\"Code not found\");\n      throw redirectOnError(\"no_code\");\n    }\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.params.id\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Oauth provider with id\",\n        c.params.id,\n        \"not found\"\n      );\n      throw redirectOnError(\"oauth_provider_not_found\");\n    }\n    let tokens;\n    try {\n      tokens = await provider.validateAuthorizationCode({\n        code,\n        codeVerifier,\n        deviceId: device_id,\n        redirectURI: `${c.context.baseURL}/callback/${provider.id}`\n      });\n    } catch (e) {\n      c.context.logger.error(\"\", e);\n      throw redirectOnError(\"invalid_code\");\n    }\n    const userInfo = await provider.getUserInfo({\n      ...tokens,\n      user: c.body?.user ? (0,_better_auth_tB5eU6EY_mjs__WEBPACK_IMPORTED_MODULE_7__.s)(c.body.user) : void 0\n    }).then((res) => res?.user);\n    if (!userInfo) {\n      c.context.logger.error(\"Unable to get user info\");\n      return redirectOnError(\"unable_to_get_user_info\");\n    }\n    if (!userInfo.email) {\n      c.context.logger.error(\n        \"Provider did not return email. This could be due to misconfiguration in the provider settings.\"\n      );\n      return redirectOnError(\"email_not_found\");\n    }\n    if (!callbackURL) {\n      c.context.logger.error(\"No callback URL found\");\n      throw redirectOnError(\"no_callback_url\");\n    }\n    if (link) {\n      const existingAccount = await c.context.internalAdapter.findAccount(\n        userInfo.id\n      );\n      if (existingAccount) {\n        if (existingAccount.userId.toString() !== link.userId.toString()) {\n          return redirectOnError(\"account_already_linked_to_different_user\");\n        }\n        const updateData = Object.fromEntries(\n          Object.entries({\n            accessToken: tokens.accessToken,\n            idToken: tokens.idToken,\n            refreshToken: tokens.refreshToken,\n            accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n            refreshTokenExpiresAt: tokens.refreshTokenExpiresAt,\n            scope: tokens.scopes?.join(\",\")\n          }).filter(([_, value]) => value !== void 0)\n        );\n        await c.context.internalAdapter.updateAccount(\n          existingAccount.id,\n          updateData\n        );\n      } else {\n        const newAccount = await c.context.internalAdapter.createAccount(\n          {\n            userId: link.userId,\n            providerId: provider.id,\n            accountId: userInfo.id,\n            ...tokens,\n            scope: tokens.scopes?.join(\",\")\n          },\n          c\n        );\n        if (!newAccount) {\n          return redirectOnError(\"unable_to_link_account\");\n        }\n      }\n      let toRedirectTo2;\n      try {\n        const url = callbackURL;\n        toRedirectTo2 = url.toString();\n      } catch {\n        toRedirectTo2 = callbackURL;\n      }\n      throw c.redirect(toRedirectTo2);\n    }\n    const result = await handleOAuthUserInfo(c, {\n      userInfo: {\n        ...userInfo,\n        email: userInfo.email,\n        name: userInfo.name || userInfo.email\n      },\n      account: {\n        providerId: provider.id,\n        accountId: userInfo.id,\n        ...tokens,\n        scope: tokens.scopes?.join(\",\")\n      },\n      callbackURL,\n      disableSignUp: provider.disableImplicitSignUp && !requestSignUp || provider.options?.disableSignUp,\n      overrideUserInfo: provider.options?.overrideUserInfoOnSignIn\n    });\n    if (result.error) {\n      c.context.logger.error(result.error.split(\" \").join(\"_\"));\n      return redirectOnError(result.error.split(\" \").join(\"_\"));\n    }\n    const { session, user } = result.data;\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setSessionCookie)(c, {\n      session,\n      user\n    });\n    let toRedirectTo;\n    try {\n      const url = result.isRegister ? newUserURL || callbackURL : callbackURL;\n      toRedirectTo = url.toString();\n    } catch {\n      toRedirectTo = result.isRegister ? newUserURL || callbackURL : callbackURL;\n    }\n    throw c.redirect(toRedirectTo);\n  }\n);\n\nconst signOut = createAuthEndpoint(\n  \"/sign-out\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    metadata: {\n      openapi: {\n        description: \"Sign out the current user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const sessionCookieToken = await ctx.getSignedCookie(\n      ctx.context.authCookies.sessionToken.name,\n      ctx.context.secret\n    );\n    if (!sessionCookieToken) {\n      (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.deleteSessionCookie)(ctx);\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n      });\n    }\n    await ctx.context.internalAdapter.deleteSession(sessionCookieToken);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.deleteSessionCookie)(ctx);\n    return ctx.json({\n      success: true\n    });\n  }\n);\n\nfunction redirectError(ctx, callbackURL, query) {\n  const url = callbackURL ? new URL(callbackURL, ctx.baseURL) : new URL(`${ctx.baseURL}/error`);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nfunction redirectCallback(ctx, callbackURL, query) {\n  const url = new URL(callbackURL, ctx.baseURL);\n  if (query)\n    Object.entries(query).forEach(([k, v]) => url.searchParams.set(k, v));\n  return url.href;\n}\nconst requestPasswordReset = createAuthEndpoint(\n  \"/request-password-reset\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The email address of the user to send a password reset email to\"\n      }).email(),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst forgetPassword = createAuthEndpoint(\n  \"/forget-password\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      /**\n       * The email address of the user to send a password reset email to.\n       */\n      email: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The email address of the user to send a password reset email to\"\n      }).email(),\n      /**\n       * The URL to redirect the user to reset their password.\n       * If the token isn't valid or expired, it'll be redirected with a query parameter `?\n       * error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?\n       * token=VALID_TOKEN\n       */\n      redirectTo: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Send a password reset email to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    },\n                    message: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.emailAndPassword?.sendResetPassword) {\n      ctx.context.logger.error(\n        \"Reset password isn't enabled.Please pass an emailAndPassword.sendResetPassword function in your auth config!\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Reset password isn't enabled\"\n      });\n    }\n    const { email, redirectTo } = ctx.body;\n    const user = await ctx.context.internalAdapter.findUserByEmail(email, {\n      includeAccounts: true\n    });\n    if (!user) {\n      ctx.context.logger.error(\"Reset Password: User not found\", { email });\n      return ctx.json({\n        status: true,\n        message: \"If this email exists in our system, check your email for the reset link\"\n      });\n    }\n    const defaultExpiresIn = 60 * 60 * 1;\n    const expiresAt = (0,_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_8__.g)(\n      ctx.context.options.emailAndPassword.resetPasswordTokenExpiresIn || defaultExpiresIn,\n      \"sec\"\n    );\n    const verificationToken = (0,_better_auth_BUPPRXfK_mjs__WEBPACK_IMPORTED_MODULE_9__.g)(24);\n    await ctx.context.internalAdapter.createVerificationValue(\n      {\n        value: user.user.id,\n        identifier: `reset-password:${verificationToken}`,\n        expiresAt\n      },\n      ctx\n    );\n    const callbackURL = redirectTo ? encodeURIComponent(redirectTo) : \"\";\n    const url = `${ctx.context.baseURL}/reset-password/${verificationToken}?callbackURL=${callbackURL}`;\n    await ctx.context.options.emailAndPassword.sendResetPassword(\n      {\n        user: user.user,\n        url,\n        token: verificationToken\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst requestPasswordResetCallback = createAuthEndpoint(\n  \"/reset-password/:token\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The URL to redirect the user to reset their password\"\n      })\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Redirects the user to the callback URL with the token\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { token } = ctx.params;\n    const { callbackURL } = ctx.query;\n    if (!token || !callbackURL) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    const verification = await ctx.context.internalAdapter.findVerificationValue(\n      `reset-password:${token}`\n    );\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw ctx.redirect(\n        redirectError(ctx.context, callbackURL, { error: \"INVALID_TOKEN\" })\n      );\n    }\n    throw ctx.redirect(redirectCallback(ctx.context, callbackURL, { token }));\n  }\n);\nconst forgetPasswordCallback = requestPasswordResetCallback;\nconst resetPassword = createAuthEndpoint(\n  \"/reset-password\",\n  {\n    method: \"POST\",\n    query: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n    }).optional(),\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      newPassword: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The new password to set\"\n      }),\n      token: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The token to reset the password\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Reset the password for a user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const token = ctx.body.token || ctx.query?.token;\n    if (!token) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const { newPassword } = ctx.body;\n    const minLength = ctx.context.password?.config.minPasswordLength;\n    const maxLength = ctx.context.password?.config.maxPasswordLength;\n    if (newPassword.length < minLength) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    if (newPassword.length > maxLength) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const id = `reset-password:${token}`;\n    const verification = await ctx.context.internalAdapter.findVerificationValue(id);\n    if (!verification || verification.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const userId = verification.value;\n    const hashedPassword = await ctx.context.password.hash(newPassword);\n    const accounts = await ctx.context.internalAdapter.findAccounts(userId);\n    const account = accounts.find((ac) => ac.providerId === \"credential\");\n    if (!account) {\n      await ctx.context.internalAdapter.createAccount(\n        {\n          userId,\n          providerId: \"credential\",\n          password: hashedPassword,\n          accountId: userId\n        },\n        ctx\n      );\n      await ctx.context.internalAdapter.deleteVerificationValue(\n        verification.id\n      );\n      return ctx.json({\n        status: true\n      });\n    }\n    await ctx.context.internalAdapter.updatePassword(\n      userId,\n      hashedPassword,\n      ctx\n    );\n    await ctx.context.internalAdapter.deleteVerificationValue(verification.id);\n    if (ctx.context.options.emailAndPassword?.revokeSessionsOnPasswordReset) {\n      await ctx.context.internalAdapter.deleteSessions(userId);\n    }\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nconst updateUser = () => createAuthEndpoint(\n  \"/update-user\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.any()),\n    use: [sessionMiddleware],\n    metadata: {\n      $Infer: {\n        body: {}\n      },\n      openapi: {\n        description: \"Update the current user\",\n        requestBody: {\n          content: {\n            \"application/json\": {\n              schema: {\n                type: \"object\",\n                properties: {\n                  name: {\n                    type: \"string\",\n                    description: \"The name of the user\"\n                  },\n                  image: {\n                    type: \"string\",\n                    description: \"The image of the user\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the update was successful\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const body = ctx.body;\n    if (body.email) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.EMAIL_CAN_NOT_BE_UPDATED\n      });\n    }\n    const { name, image, ...rest } = body;\n    const session = ctx.context.session;\n    if (image === void 0 && name === void 0 && Object.keys(rest).length === 0) {\n      return ctx.json({\n        status: true\n      });\n    }\n    const additionalFields = (0,_better_auth_Cc72UxUH_mjs__WEBPACK_IMPORTED_MODULE_15__.f)(\n      ctx.context.options,\n      rest,\n      \"update\"\n    );\n    const user = await ctx.context.internalAdapter.updateUser(\n      session.user.id,\n      {\n        name,\n        image,\n        ...additionalFields\n      },\n      ctx\n    );\n    await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setSessionCookie)(ctx, {\n      session: session.session,\n      user\n    });\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst changePassword = createAuthEndpoint(\n  \"/change-password\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      /**\n       * The new password to set\n       */\n      newPassword: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The new password to set\"\n      }),\n      /**\n       * The current password of the user\n       */\n      currentPassword: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The current password\"\n      }),\n      /**\n       * revoke all sessions that are not the\n       * current one logged in by the user\n       */\n      revokeOtherSessions: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean({\n        description: \"Revoke all other sessions\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Change the password of the user\",\n        responses: {\n          \"200\": {\n            description: \"Password successfully changed\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    token: {\n                      type: \"string\",\n                      nullable: true,\n                      // Only present if revokeOtherSessions is true\n                      description: \"New session token if other sessions were revoked\"\n                    },\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\",\n                          description: \"The unique identifier of the user\"\n                        },\n                        email: {\n                          type: \"string\",\n                          format: \"email\",\n                          description: \"The email address of the user\"\n                        },\n                        name: {\n                          type: \"string\",\n                          description: \"The name of the user\"\n                        },\n                        image: {\n                          type: \"string\",\n                          format: \"uri\",\n                          nullable: true,\n                          description: \"The profile image URL of the user\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\",\n                          description: \"Whether the email has been verified\"\n                        },\n                        createdAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was created\"\n                        },\n                        updatedAt: {\n                          type: \"string\",\n                          format: \"date-time\",\n                          description: \"When the user was last updated\"\n                        }\n                      },\n                      required: [\n                        \"id\",\n                        \"email\",\n                        \"name\",\n                        \"emailVerified\",\n                        \"createdAt\",\n                        \"updatedAt\"\n                      ]\n                    }\n                  },\n                  required: [\"user\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { newPassword, currentPassword, revokeOtherSessions } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    if (!account || !account.password) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n      });\n    }\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    const verify = await ctx.context.password.verify({\n      hash: account.password,\n      password: currentPassword\n    });\n    if (!verify) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.INVALID_PASSWORD\n      });\n    }\n    await ctx.context.internalAdapter.updateAccount(account.id, {\n      password: passwordHash\n    });\n    let token = null;\n    if (revokeOtherSessions) {\n      await ctx.context.internalAdapter.deleteSessions(session.user.id);\n      const newSession = await ctx.context.internalAdapter.createSession(\n        session.user.id,\n        ctx\n      );\n      if (!newSession) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"INTERNAL_SERVER_ERROR\", {\n          message: BASE_ERROR_CODES.FAILED_TO_GET_SESSION\n        });\n      }\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setSessionCookie)(ctx, {\n        session: newSession,\n        user: session.user\n      });\n      token = newSession.token;\n    }\n    return ctx.json({\n      token,\n      user: {\n        id: session.user.id,\n        email: session.user.email,\n        name: session.user.name,\n        image: session.user.image,\n        emailVerified: session.user.emailVerified,\n        createdAt: session.user.createdAt,\n        updatedAt: session.user.updatedAt\n      }\n    });\n  }\n);\nconst setPassword = createAuthEndpoint(\n  \"/set-password\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      /**\n       * The new password to set\n       */\n      newPassword: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    }),\n    metadata: {\n      SERVER_ONLY: true\n    },\n    use: [sessionMiddleware]\n  },\n  async (ctx) => {\n    const { newPassword } = ctx.body;\n    const session = ctx.context.session;\n    const minPasswordLength = ctx.context.password.config.minPasswordLength;\n    if (newPassword.length < minPasswordLength) {\n      ctx.context.logger.error(\"Password is too short\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_SHORT\n      });\n    }\n    const maxPasswordLength = ctx.context.password.config.maxPasswordLength;\n    if (newPassword.length > maxPasswordLength) {\n      ctx.context.logger.error(\"Password is too long\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.PASSWORD_TOO_LONG\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    const passwordHash = await ctx.context.password.hash(newPassword);\n    if (!account) {\n      await ctx.context.internalAdapter.linkAccount(\n        {\n          userId: session.user.id,\n          providerId: \"credential\",\n          accountId: session.user.id,\n          password: passwordHash\n        },\n        ctx\n      );\n      return ctx.json({\n        status: true\n      });\n    }\n    throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n      message: \"user already has a password\"\n    });\n  }\n);\nconst deleteUser = createAuthEndpoint(\n  \"/delete-user\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      /**\n       * The callback URL to redirect to after the user is deleted\n       * this is only used on delete user callback\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n      /**\n       * The password of the user. If the password isn't provided, session freshness\n       * will be checked.\n       */\n      password: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n      /**\n       * The token to delete the user. If the token is provided, the user will be deleted\n       */\n      token: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Delete the user\",\n        responses: {\n          \"200\": {\n            description: \"User deletion processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the operation was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\", \"Verification email sent\"],\n                      description: \"Status message of the deletion process\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\",\n        {\n          session: ctx.context.session\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"NOT_FOUND\");\n    }\n    const session = ctx.context.session;\n    let canDelete = false;\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    const account = accounts.find(\n      (account2) => account2.providerId === \"credential\" && account2.password\n    );\n    if (ctx.body.password) {\n      if (!account || !account.password) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.CREDENTIAL_ACCOUNT_NOT_FOUND\n        });\n      }\n      const verify = await ctx.context.password.verify({\n        hash: account.password,\n        password: ctx.body.password\n      });\n      if (!verify) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.INVALID_PASSWORD\n        });\n      }\n      canDelete = true;\n    }\n    if (ctx.body.token) {\n      await deleteUserCallback({\n        ...ctx,\n        query: {\n          token: ctx.body.token\n        }\n      });\n      return ctx.json({\n        success: true,\n        message: \"User deleted\"\n      });\n    }\n    if (ctx.context.options.user.deleteUser?.sendDeleteAccountVerification) {\n      if (account && account.password && !canDelete) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.USER_ALREADY_HAS_PASSWORD\n        });\n      }\n      const token = (0,_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_14__.g)(32, \"0-9\", \"a-z\");\n      await ctx.context.internalAdapter.createVerificationValue(\n        {\n          value: session.user.id,\n          identifier: `delete-account-${token}`,\n          expiresAt: new Date(\n            Date.now() + (ctx.context.options.user.deleteUser?.deleteTokenExpiresIn || 60 * 60 * 24) * 1e3\n          )\n        },\n        ctx\n      );\n      const url = `${ctx.context.baseURL}/delete-user/callback?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n      await ctx.context.options.user.deleteUser.sendDeleteAccountVerification(\n        {\n          user: session.user,\n          url,\n          token\n        },\n        ctx.request\n      );\n      return ctx.json({\n        success: true,\n        message: \"Verification email sent\"\n      });\n    }\n    if (ctx.context.options.session?.freshAge) {\n      const currentAge = session.session.createdAt.getTime();\n      const freshAge = ctx.context.options.session.freshAge;\n      const now = Date.now();\n      if (now - currentAge > freshAge) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n          message: BASE_ERROR_CODES.SESSION_EXPIRED\n        });\n      }\n      canDelete = true;\n    }\n    if (!canDelete) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"User cannot be deleted. please provide a password or token\"\n      });\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.deleteSessionCookie)(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst deleteUserCallback = createAuthEndpoint(\n  \"/delete-user/callback\",\n  {\n    method: \"GET\",\n    query: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      token: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n    }),\n    use: [originCheck((ctx) => ctx.query.callbackURL)],\n    metadata: {\n      openapi: {\n        description: \"Callback to complete user deletion with verification token\",\n        responses: {\n          \"200\": {\n            description: \"User successfully deleted\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    success: {\n                      type: \"boolean\",\n                      description: \"Indicates if the deletion was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"User deleted\"],\n                      description: \"Confirmation message\"\n                    }\n                  },\n                  required: [\"success\", \"message\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.deleteUser?.enabled) {\n      ctx.context.logger.error(\n        \"Delete user is disabled. Enable it in the options\"\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"NOT_FOUND\");\n    }\n    const session = await getSessionFromCtx(ctx);\n    if (!session) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.FAILED_TO_GET_USER_INFO\n      });\n    }\n    const token = await ctx.context.internalAdapter.findVerificationValue(\n      `delete-account-${ctx.query.token}`\n    );\n    if (!token || token.expiresAt < /* @__PURE__ */ new Date()) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    if (token.value !== session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.INVALID_TOKEN\n      });\n    }\n    const beforeDelete = ctx.context.options.user.deleteUser?.beforeDelete;\n    if (beforeDelete) {\n      await beforeDelete(session.user, ctx.request);\n    }\n    await ctx.context.internalAdapter.deleteUser(session.user.id);\n    await ctx.context.internalAdapter.deleteSessions(session.user.id);\n    await ctx.context.internalAdapter.deleteAccounts(session.user.id);\n    await ctx.context.internalAdapter.deleteVerificationValue(token.id);\n    (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.deleteSessionCookie)(ctx);\n    const afterDelete = ctx.context.options.user.deleteUser?.afterDelete;\n    if (afterDelete) {\n      await afterDelete(session.user, ctx.request);\n    }\n    if (ctx.query.callbackURL) {\n      throw ctx.redirect(ctx.query.callbackURL || \"/\");\n    }\n    return ctx.json({\n      success: true,\n      message: \"User deleted\"\n    });\n  }\n);\nconst changeEmail = createAuthEndpoint(\n  \"/change-email\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      newEmail: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The new email to set\"\n      }).email(),\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The URL to redirect to after email verification\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        responses: {\n          \"200\": {\n            description: \"Email change request processed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\",\n                      description: \"Indicates if the request was successful\"\n                    },\n                    message: {\n                      type: \"string\",\n                      enum: [\"Email updated\", \"Verification email sent\"],\n                      description: \"Status message of the email change process\",\n                      nullable: true\n                    }\n                  },\n                  required: [\"status\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    if (!ctx.context.options.user?.changeEmail?.enabled) {\n      ctx.context.logger.error(\"Change email is disabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Change email is disabled\"\n      });\n    }\n    const newEmail = ctx.body.newEmail.toLowerCase();\n    if (newEmail === ctx.context.session.user.email) {\n      ctx.context.logger.error(\"Email is the same\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Email is the same\"\n      });\n    }\n    const existingUser = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n    if (existingUser) {\n      ctx.context.logger.error(\"Email already exists\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Couldn't update your email\"\n      });\n    }\n    if (ctx.context.session.user.emailVerified !== true) {\n      const existing = await ctx.context.internalAdapter.findUserByEmail(newEmail);\n      if (existing) {\n        throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"UNPROCESSABLE_ENTITY\", {\n          message: BASE_ERROR_CODES.USER_ALREADY_EXISTS\n        });\n      }\n      await ctx.context.internalAdapter.updateUserByEmail(\n        ctx.context.session.user.email,\n        {\n          email: newEmail\n        },\n        ctx\n      );\n      await (0,_cookies_index_mjs__WEBPACK_IMPORTED_MODULE_1__.setSessionCookie)(ctx, {\n        session: ctx.context.session.session,\n        user: {\n          ...ctx.context.session.user,\n          email: newEmail\n        }\n      });\n      if (ctx.context.options.emailVerification?.sendVerificationEmail) {\n        const token2 = await createEmailVerificationToken(\n          ctx.context.secret,\n          newEmail,\n          void 0,\n          ctx.context.options.emailVerification?.expiresIn\n        );\n        const url2 = `${ctx.context.baseURL}/verify-email?token=${token2}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n        await ctx.context.options.emailVerification.sendVerificationEmail(\n          {\n            user: {\n              ...ctx.context.session.user,\n              email: newEmail\n            },\n            url: url2,\n            token: token2\n          },\n          ctx.request\n        );\n      }\n      return ctx.json({\n        status: true\n      });\n    }\n    if (!ctx.context.options.user.changeEmail.sendChangeEmailVerification) {\n      ctx.context.logger.error(\"Verification email isn't enabled.\");\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Verification email isn't enabled\"\n      });\n    }\n    const token = await createEmailVerificationToken(\n      ctx.context.secret,\n      ctx.context.session.user.email,\n      newEmail,\n      ctx.context.options.emailVerification?.expiresIn\n    );\n    const url = `${ctx.context.baseURL}/verify-email?token=${token}&callbackURL=${ctx.body.callbackURL || \"/\"}`;\n    await ctx.context.options.user.changeEmail.sendChangeEmailVerification(\n      {\n        user: ctx.context.session.user,\n        newEmail,\n        url,\n        token\n      },\n      ctx.request\n    );\n    return ctx.json({\n      status: true\n    });\n  }\n);\n\nfunction sanitize(input) {\n  return input.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#39;\");\n}\nconst html = (errorCode = \"Unknown\") => `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Authentication Error</title>\n    <style>\n        :root {\n            --bg-color: #f8f9fa;\n            --text-color: #212529;\n            --accent-color: #000000;\n            --error-color: #dc3545;\n            --border-color: #e9ecef;\n        }\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            line-height: 1.5;\n        }\n        .error-container {\n            background-color: #ffffff;\n            border-radius: 12px;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);\n            padding: 2.5rem;\n            text-align: center;\n            max-width: 90%;\n            width: 400px;\n        }\n        h1 {\n            color: var(--error-color);\n            font-size: 1.75rem;\n            margin-bottom: 1rem;\n            font-weight: 600;\n        }\n        p {\n            margin-bottom: 1.5rem;\n            color: #495057;\n        }\n        .btn {\n            background-color: var(--accent-color);\n            color: #ffffff;\n            text-decoration: none;\n            padding: 0.75rem 1.5rem;\n            border-radius: 6px;\n            transition: all 0.3s ease;\n            display: inline-block;\n            font-weight: 500;\n            border: 2px solid var(--accent-color);\n        }\n        .btn:hover {\n            background-color: #131721;\n        }\n        .error-code {\n            font-size: 0.875rem;\n            color: #6c757d;\n            margin-top: 1.5rem;\n            padding-top: 1.5rem;\n            border-top: 1px solid var(--border-color);\n        }\n        .icon {\n            font-size: 3rem;\n            margin-bottom: 1rem;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"error-container\">\n        <div class=\"icon\">\\u26A0\\uFE0F</div>\n        <h1>Better Auth Error</h1>\n        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>\n        <a href=\"/\" id=\"returnLink\" class=\"btn\">Return to Application</a>\n        <div class=\"error-code\">Error Code: <span id=\"errorCode\">${sanitize(\n  errorCode\n)}</span></div>\n    </div>\n</body>\n</html>`;\nconst error = createAuthEndpoint(\n  \"/error\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Displays an error page\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"text/html\": {\n                schema: {\n                  type: \"string\",\n                  description: \"The HTML content of the error page\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const query = new URL(c.request?.url || \"\").searchParams.get(\"error\") || \"Unknown\";\n    return new Response(html(query), {\n      headers: {\n        \"Content-Type\": \"text/html\"\n      }\n    });\n  }\n);\n\nconst ok = createAuthEndpoint(\n  \"/ok\",\n  {\n    method: \"GET\",\n    metadata: {\n      ...HIDE_METADATA,\n      openapi: {\n        description: \"Check if the API is working\",\n        responses: {\n          \"200\": {\n            description: \"API is working\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    ok: {\n                      type: \"boolean\",\n                      description: \"Indicates if the API is working\"\n                    }\n                  },\n                  required: [\"ok\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    return ctx.json({\n      ok: true\n    });\n  }\n);\n\nconst listUserAccounts = createAuthEndpoint(\n  \"/list-accounts\",\n  {\n    method: \"GET\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"List all accounts linked to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"array\",\n                  items: {\n                    type: \"object\",\n                    properties: {\n                      id: {\n                        type: \"string\"\n                      },\n                      provider: {\n                        type: \"string\"\n                      },\n                      createdAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      },\n                      updatedAt: {\n                        type: \"string\",\n                        format: \"date-time\"\n                      }\n                    },\n                    accountId: {\n                      type: \"string\"\n                    },\n                    scopes: {\n                      type: \"array\",\n                      items: {\n                        type: \"string\"\n                      }\n                    }\n                  },\n                  required: [\n                    \"id\",\n                    \"provider\",\n                    \"createdAt\",\n                    \"updatedAt\",\n                    \"accountId\",\n                    \"scopes\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const accounts = await c.context.internalAdapter.findAccounts(\n      session.user.id\n    );\n    return c.json(\n      accounts.map((a) => ({\n        id: a.id,\n        provider: a.providerId,\n        createdAt: a.createdAt,\n        updatedAt: a.updatedAt,\n        accountId: a.accountId,\n        scopes: a.scope?.split(\",\") || []\n      }))\n    );\n  }\n);\nconst linkSocialAccount = createAuthEndpoint(\n  \"/link-social\",\n  {\n    method: \"POST\",\n    requireHeaders: true,\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      /**\n       * Callback URL to redirect to after the user has signed in.\n       */\n      callbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The URL to redirect to after the user has signed in\"\n      }).optional(),\n      /**\n       * OAuth2 provider to use\n       */\n      provider: _social_providers_index_mjs__WEBPACK_IMPORTED_MODULE_6__.SocialProviderListEnum,\n      /**\n       * Additional scopes to request when linking the account.\n       * This is useful for requesting additional permissions when\n       * linking a social account compared to the initial authentication.\n       */\n      scopes: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), {\n        description: \"Additional scopes to request from the provider\"\n      }).optional(),\n      /**\n       * The URL to redirect to if there is an error during the link process.\n       */\n      errorCallbackURL: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The URL to redirect to if there is an error during the link process\"\n      }).optional()\n    }),\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Link a social account to the user\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    url: {\n                      type: \"string\",\n                      description: \"The authorization URL to redirect the user to\"\n                    },\n                    redirect: {\n                      type: \"boolean\",\n                      description: \"Indicates if the user should be redirected to the authorization URL\"\n                    }\n                  },\n                  required: [\"url\", \"redirect\"]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (c) => {\n    const session = c.context.session;\n    const provider = c.context.socialProviders.find(\n      (p) => p.id === c.body.provider\n    );\n    if (!provider) {\n      c.context.logger.error(\n        \"Provider not found. Make sure to add the provider in your auth config\",\n        {\n          provider: c.body.provider\n        }\n      );\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"NOT_FOUND\", {\n        message: BASE_ERROR_CODES.PROVIDER_NOT_FOUND\n      });\n    }\n    const state = await (0,_better_auth_dn8_oqOu_mjs__WEBPACK_IMPORTED_MODULE_4__.g)(c, {\n      userId: session.user.id,\n      email: session.user.email\n    });\n    const url = await provider.createAuthorizationURL({\n      state: state.state,\n      codeVerifier: state.codeVerifier,\n      redirectURI: `${c.context.baseURL}/callback/${provider.id}`,\n      scopes: c.body.scopes\n    });\n    return c.json({\n      url: url.toString(),\n      redirect: true\n    });\n  }\n);\nconst unlinkAccount = createAuthEndpoint(\n  \"/unlink-account\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      providerId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      accountId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n    }),\n    use: [freshSessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Unlink an account\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    status: {\n                      type: \"boolean\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId } = ctx.body;\n    const accounts = await ctx.context.internalAdapter.findAccounts(\n      ctx.context.session.user.id\n    );\n    if (accounts.length === 1 && !ctx.context.options.account?.accountLinking?.allowUnlinkingAll) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.FAILED_TO_UNLINK_LAST_ACCOUNT\n      });\n    }\n    const accountExist = accounts.find(\n      (account) => accountId ? account.accountId === accountId && account.providerId === providerId : account.providerId === providerId\n    );\n    if (!accountExist) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: BASE_ERROR_CODES.ACCOUNT_NOT_FOUND\n      });\n    }\n    await ctx.context.internalAdapter.deleteAccount(accountExist.id);\n    return ctx.json({\n      status: true\n    });\n  }\n);\nconst getAccessToken = createAuthEndpoint(\n  \"/get-access-token\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      providerId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Get a valid access token, doing a refresh if needed\",\n        responses: {\n          200: {\n            description: \"A Valid access token\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    if (!ctx.context.socialProviders.find((p) => p.id === providerId)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} is not supported.`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    try {\n      let newTokens = null;\n      if (account.refreshToken && (!account.accessTokenExpiresAt || account.accessTokenExpiresAt.getTime() - Date.now() < 5e3) && provider.refreshAccessToken) {\n        newTokens = await provider.refreshAccessToken(\n          account.refreshToken\n        );\n        await ctx.context.internalAdapter.updateAccount(account.id, {\n          accessToken: newTokens.accessToken,\n          accessTokenExpiresAt: newTokens.accessTokenExpiresAt,\n          refreshToken: newTokens.refreshToken,\n          refreshTokenExpiresAt: newTokens.refreshTokenExpiresAt\n        });\n      }\n      const tokens = {\n        accessToken: newTokens?.accessToken ?? account.accessToken ?? void 0,\n        accessTokenExpiresAt: newTokens?.accessTokenExpiresAt ?? account.accessTokenExpiresAt ?? void 0,\n        scopes: account.scope?.split(\",\") ?? [],\n        idToken: newTokens?.idToken ?? account.idToken ?? void 0\n      };\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Failed to get a valid access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst refreshToken = createAuthEndpoint(\n  \"/refresh-token\",\n  {\n    method: \"POST\",\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      providerId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The provider ID for the OAuth provider\"\n      }),\n      accountId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The account ID associated with the refresh token\"\n      }).optional(),\n      userId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The user ID associated with the account\"\n      }).optional()\n    }),\n    metadata: {\n      openapi: {\n        description: \"Refresh the access token using a refresh token\",\n        responses: {\n          200: {\n            description: \"Access token refreshed successfully\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    tokenType: {\n                      type: \"string\"\n                    },\n                    idToken: {\n                      type: \"string\"\n                    },\n                    accessToken: {\n                      type: \"string\"\n                    },\n                    refreshToken: {\n                      type: \"string\"\n                    },\n                    accessTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    },\n                    refreshTokenExpiresAt: {\n                      type: \"string\",\n                      format: \"date-time\"\n                    }\n                  }\n                }\n              }\n            }\n          },\n          400: {\n            description: \"Invalid refresh token or provider configuration\"\n          }\n        }\n      }\n    }\n  },\n  async (ctx) => {\n    const { providerId, accountId, userId } = ctx.body;\n    const req = ctx.request;\n    const session = await getSessionFromCtx(ctx);\n    if (req && !session) {\n      throw ctx.error(\"UNAUTHORIZED\");\n    }\n    let resolvedUserId = session?.user?.id || userId;\n    if (!resolvedUserId) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: `Either userId or session is required`\n      });\n    }\n    if (!ctx.context.socialProviders.find((p) => p.id === providerId)) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} is not supported.`\n      });\n    }\n    const accounts = await ctx.context.internalAdapter.findAccounts(resolvedUserId);\n    const account = accounts.find(\n      (acc) => accountId ? acc.id === accountId && acc.providerId === providerId : acc.providerId === providerId\n    );\n    if (!account) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} not found.`\n      });\n    }\n    if (!provider.refreshAccessToken) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: `Provider ${providerId} does not support token refreshing.`\n      });\n    }\n    try {\n      const tokens = await provider.refreshAccessToken(\n        account.refreshToken\n      );\n      await ctx.context.internalAdapter.updateAccount(account.id, {\n        accessToken: tokens.accessToken,\n        accessTokenExpiresAt: tokens.accessTokenExpiresAt,\n        refreshToken: tokens.refreshToken,\n        refreshTokenExpiresAt: tokens.refreshTokenExpiresAt\n      });\n      return ctx.json(tokens);\n    } catch (error) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Failed to refresh access token\",\n        cause: error\n      });\n    }\n  }\n);\nconst accountInfo = createAuthEndpoint(\n  \"/account-info\",\n  {\n    method: \"POST\",\n    use: [sessionMiddleware],\n    metadata: {\n      openapi: {\n        description: \"Get the account info provided by the provider\",\n        responses: {\n          \"200\": {\n            description: \"Success\",\n            content: {\n              \"application/json\": {\n                schema: {\n                  type: \"object\",\n                  properties: {\n                    user: {\n                      type: \"object\",\n                      properties: {\n                        id: {\n                          type: \"string\"\n                        },\n                        name: {\n                          type: \"string\"\n                        },\n                        email: {\n                          type: \"string\"\n                        },\n                        image: {\n                          type: \"string\"\n                        },\n                        emailVerified: {\n                          type: \"boolean\"\n                        }\n                      },\n                      required: [\"id\", \"emailVerified\"]\n                    },\n                    data: {\n                      type: \"object\",\n                      properties: {},\n                      additionalProperties: true\n                    }\n                  },\n                  required: [\"user\", \"data\"],\n                  additionalProperties: false\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    body: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      accountId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string({\n        description: \"The provider given account id for which to get the account info\"\n      })\n    })\n  },\n  async (ctx) => {\n    const account = await ctx.context.internalAdapter.findAccount(\n      ctx.body.accountId\n    );\n    if (!account || account.userId !== ctx.context.session.user.id) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"BAD_REQUEST\", {\n        message: \"Account not found\"\n      });\n    }\n    const provider = ctx.context.socialProviders.find(\n      (p) => p.id === account.providerId\n    );\n    if (!provider) {\n      throw new better_call__WEBPACK_IMPORTED_MODULE_2__.APIError(\"INTERNAL_SERVER_ERROR\", {\n        message: `Provider account provider is ${account.providerId} but it is not configured`\n      });\n    }\n    const tokens = await getAccessToken({\n      ...ctx,\n      body: {\n        accountId: account.id,\n        providerId: account.providerId\n      },\n      returnHeaders: false\n    });\n    const info = await provider.getUserInfo(tokens);\n    return ctx.json(info);\n  }\n);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.oUCDPPbQ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   s: () => (/* binding */ safeJSONParse)\n/* harmony export */ });\nfunction safeJSONParse(data) {\n  function reviver(_, value) {\n    if (typeof value === \"string\") {\n      const iso8601Regex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n      if (iso8601Regex.test(value)) {\n        const date = new Date(value);\n        if (!isNaN(date.getTime())) {\n          return date;\n        }\n      }\n    }\n    return value;\n  }\n  try {\n    return JSON.parse(data, reviver);\n  } catch {\n    return null;\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGgudEI1ZVU2RVkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUU4QiIsInNvdXJjZXMiOlsiL1VzZXJzL2JhaWxleXBhcmtlci9Eb2N1bWVudHMvQ29kaW5nL3JhcGlkLWRldi1leHBvLWZ1bGxzdGFjay1zdGFydGVyLXJlcG8vYmFja2VuZC9ub2RlX21vZHVsZXMvYmV0dGVyLWF1dGgvZGlzdC9zaGFyZWQvYmV0dGVyLWF1dGgudEI1ZVU2RVkubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHNhZmVKU09OUGFyc2UoZGF0YSkge1xuICBmdW5jdGlvbiByZXZpdmVyKF8sIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgaXNvODYwMVJlZ2V4ID0gL15cXGR7NH0tXFxkezJ9LVxcZHsyfVRcXGR7Mn06XFxkezJ9OlxcZHsyfSg/OlxcLlxcZCspP1okLztcbiAgICAgIGlmIChpc284NjAxUmVnZXgudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc05hTihkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhLCByZXZpdmVyKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgc2FmZUpTT05QYXJzZSBhcyBzIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/shared/better-auth.tB5eU6EY.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/better-auth/dist/social-providers/index.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LANG: () => (/* binding */ LANG),\n/* harmony export */   SocialProviderListEnum: () => (/* binding */ SocialProviderListEnum),\n/* harmony export */   apple: () => (/* binding */ apple),\n/* harmony export */   discord: () => (/* binding */ discord),\n/* harmony export */   dropbox: () => (/* binding */ dropbox),\n/* harmony export */   facebook: () => (/* binding */ facebook),\n/* harmony export */   getApplePublicKey: () => (/* binding */ getApplePublicKey),\n/* harmony export */   github: () => (/* binding */ github),\n/* harmony export */   gitlab: () => (/* binding */ gitlab),\n/* harmony export */   google: () => (/* binding */ google),\n/* harmony export */   kick: () => (/* binding */ kick),\n/* harmony export */   linkedin: () => (/* binding */ linkedin),\n/* harmony export */   microsoft: () => (/* binding */ microsoft),\n/* harmony export */   reddit: () => (/* binding */ reddit),\n/* harmony export */   roblox: () => (/* binding */ roblox),\n/* harmony export */   socialProviderList: () => (/* binding */ socialProviderList),\n/* harmony export */   socialProviders: () => (/* binding */ socialProviders),\n/* harmony export */   spotify: () => (/* binding */ spotify),\n/* harmony export */   tiktok: () => (/* binding */ tiktok),\n/* harmony export */   twitch: () => (/* binding */ twitch),\n/* harmony export */   twitter: () => (/* binding */ twitter),\n/* harmony export */   vk: () => (/* binding */ vk),\n/* harmony export */   zoom: () => (/* binding */ zoom)\n/* harmony export */ });\n/* harmony import */ var _better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @better-fetch/fetch */ \"(rsc)/./node_modules/@better-fetch/fetch/dist/index.js\");\n/* harmony import */ var better_call__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! better-call */ \"(rsc)/./node_modules/better-call/dist/index.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/util/decode_protected_header.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwt/verify.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/util/decode_jwt.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/key/import.js\");\n/* harmony import */ var jose__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/jose/dist/node/esm/jwks/remote.js\");\n/* harmony import */ var _shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/better-auth.DufyW0qf.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DufyW0qf.mjs\");\n/* harmony import */ var _better_auth_utils_hash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @better-auth/utils/hash */ \"(rsc)/./node_modules/@better-auth/utils/dist/hash.mjs\");\n/* harmony import */ var _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @better-auth/utils/base64 */ \"(rsc)/./node_modules/@better-auth/utils/dist/base64.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/dist/esm/index.js\");\n/* harmony import */ var _better_auth_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @better-auth/utils */ \"(rsc)/./node_modules/@better-auth/utils/dist/index.mjs\");\n/* harmony import */ var _better_auth_utils_hex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @better-auth/utils/hex */ \"(rsc)/./node_modules/@better-auth/utils/dist/hex.mjs\");\n/* harmony import */ var _shared_better_auth_B4Qoxdgc_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../shared/better-auth.B4Qoxdgc.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.B4Qoxdgc.mjs\");\n/* harmony import */ var _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../shared/better-auth.DdzSJf-n.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.DdzSJf-n.mjs\");\n/* harmony import */ var _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../shared/better-auth.Cqykj82J.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.Cqykj82J.mjs\");\n/* harmony import */ var _better_auth_utils_random__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @better-auth/utils/random */ \"(rsc)/./node_modules/@better-auth/utils/dist/random.mjs\");\n/* harmony import */ var _shared_better_auth_CW6D9eSx_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../shared/better-auth.CW6D9eSx.mjs */ \"(rsc)/./node_modules/better-auth/dist/shared/better-auth.CW6D9eSx.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst apple = (options) => {\n  const tokenEndpoint = \"https://appleid.apple.com/auth/token\";\n  return {\n    id: \"apple\",\n    name: \"Apple\",\n    async createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scope = options.disableDefaultScope ? [] : [\"email\", \"name\"];\n      options.scope && _scope.push(...options.scope);\n      scopes && _scope.push(...scopes);\n      const url = await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"apple\",\n        options,\n        authorizationEndpoint: \"https://appleid.apple.com/auth/authorize\",\n        scopes: _scope,\n        state,\n        redirectURI,\n        responseMode: \"form_post\",\n        responseType: \"code id_token\"\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const decodedHeader = (0,jose__WEBPACK_IMPORTED_MODULE_13__.decodeProtectedHeader)(token);\n      const { kid, alg: jwtAlg } = decodedHeader;\n      if (!kid || !jwtAlg) return false;\n      const publicKey = await getApplePublicKey(kid);\n      const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_14__.jwtVerify)(token, publicKey, {\n        algorithms: [jwtAlg],\n        issuer: \"https://appleid.apple.com\",\n        audience: options.appBundleIdentifier || options.clientId,\n        maxTokenAge: \"1h\"\n      });\n      [\"email_verified\", \"is_private_email\"].forEach((field) => {\n        if (jwtClaims[field] !== void 0) {\n          jwtClaims[field] = Boolean(jwtClaims[field]);\n        }\n      });\n      if (nonce && jwtClaims.nonce !== nonce) {\n        return false;\n      }\n      return !!jwtClaims;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://appleid.apple.com/auth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const profile = (0,jose__WEBPACK_IMPORTED_MODULE_15__.decodeJwt)(token.idToken);\n      if (!profile) {\n        return null;\n      }\n      const name = token.user ? `${token.user.name?.firstName} ${token.user.name?.lastName}` : profile.name || profile.email;\n      const emailVerified = typeof profile.email_verified === \"boolean\" ? profile.email_verified : profile.email_verified === \"true\";\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name,\n          emailVerified,\n          email: profile.email,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\nconst getApplePublicKey = async (kid) => {\n  const APPLE_BASE_URL = \"https://appleid.apple.com\";\n  const JWKS_APPLE_URI = \"/auth/keys\";\n  const { data } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(`${APPLE_BASE_URL}${JWKS_APPLE_URI}`);\n  if (!data?.keys) {\n    throw new better_call__WEBPACK_IMPORTED_MODULE_1__.APIError(\"BAD_REQUEST\", {\n      message: \"Keys not found\"\n    });\n  }\n  const jwk = data.keys.find((key) => key.kid === kid);\n  if (!jwk) {\n    throw new Error(`JWK with kid ${kid} not found`);\n  }\n  return await (0,jose__WEBPACK_IMPORTED_MODULE_16__.importJWK)(jwk, jwk.alg);\n};\n\nconst discord = (options) => {\n  return {\n    id: \"discord\",\n    name: \"Discord\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identify\", \"email\"];\n      scopes && _scopes.push(...scopes);\n      options.scope && _scopes.push(...options.scope);\n      return new URL(\n        `https://discord.com/api/oauth2/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"none\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://discord.com/api/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://discord.com/api/users/@me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (profile.avatar === null) {\n        const defaultAvatarNumber = profile.discriminator === \"0\" ? Number(BigInt(profile.id) >> BigInt(22)) % 6 : parseInt(profile.discriminator) % 5;\n        profile.image_url = `https://cdn.discordapp.com/embed/avatars/${defaultAvatarNumber}.png`;\n      } else {\n        const format = profile.avatar.startsWith(\"a_\") ? \"gif\" : \"png\";\n        profile.image_url = `https://cdn.discordapp.com/avatars/${profile.id}/${profile.avatar}.${format}`;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.global_name || profile.username || \"\",\n          email: profile.email,\n          emailVerified: profile.verified,\n          image: profile.image_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst facebook = (options) => {\n  return {\n    id: \"facebook\",\n    name: \"Facebook\",\n    async createAuthorizationURL({ state, scopes, redirectURI, loginHint }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"public_profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"facebook\",\n        options,\n        authorizationEndpoint: \"https://www.facebook.com/v21.0/dialog/oauth\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        additionalParams: options.configId ? {\n          config_id: options.configId\n        } : {}\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://graph.facebook.com/oauth/access_token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      if (token.split(\".\").length) {\n        try {\n          const { payload: jwtClaims } = await (0,jose__WEBPACK_IMPORTED_MODULE_14__.jwtVerify)(\n            token,\n            (0,jose__WEBPACK_IMPORTED_MODULE_17__.createRemoteJWKSet)(\n              new URL(\"https://www.facebook.com/.well-known/oauth/openid/jwks\")\n            ),\n            {\n              algorithms: [\"RS256\"],\n              audience: options.clientId,\n              issuer: \"https://www.facebook.com\"\n            }\n          );\n          if (nonce && jwtClaims.nonce !== nonce) {\n            return false;\n          }\n          return !!jwtClaims;\n        } catch (error) {\n          return false;\n        }\n      }\n      return true;\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://graph.facebook.com/v18.0/oauth/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (token.idToken) {\n        const profile2 = (0,jose__WEBPACK_IMPORTED_MODULE_15__.decodeJwt)(token.idToken);\n        const user = {\n          id: profile2.sub,\n          name: profile2.name,\n          email: profile2.email,\n          picture: {\n            data: {\n              url: profile2.picture,\n              height: 100,\n              width: 100,\n              is_silhouette: false\n            }\n          }\n        };\n        const userMap2 = await options.mapProfileToUser?.({\n          ...user,\n          email_verified: true\n        });\n        return {\n          user: {\n            ...user,\n            emailVerified: true,\n            ...userMap2\n          },\n          data: profile2\n        };\n      }\n      const fields = [\n        \"id\",\n        \"name\",\n        \"email\",\n        \"picture\",\n        ...options?.fields || []\n      ];\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://graph.facebook.com/me?fields=\" + fields.join(\",\"),\n        {\n          auth: {\n            type: \"Bearer\",\n            token: token.accessToken\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.picture.data.url,\n          emailVerified: profile.email_verified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst github = (options) => {\n  const tokenEndpoint = \"https://github.com/login/oauth/access_token\";\n  return {\n    id: \"github\",\n    name: \"GitHub\",\n    createAuthorizationURL({ state, scopes, loginHint, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"read:user\", \"user:email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"github\",\n        options,\n        authorizationEndpoint: \"https://github.com/login/oauth/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        loginHint,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://github.com/login/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.github.com/user\",\n        {\n          headers: {\n            \"User-Agent\": \"better-auth\",\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const { data: emails } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\"https://api.github.com/user/emails\", {\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`,\n          \"User-Agent\": \"better-auth\"\n        }\n      });\n      if (!profile.email && emails) {\n        profile.email = (emails.find((e) => e.primary) ?? emails[0])?.email;\n      }\n      const emailVerified = emails?.find((e) => e.email === profile.email)?.verified ?? false;\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id.toString(),\n          name: profile.name || profile.login,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst google = (options) => {\n  return {\n    id: \"google\",\n    name: \"Google\",\n    async createAuthorizationURL({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI,\n      loginHint,\n      display\n    }) {\n      if (!options.clientId || !options.clientSecret) {\n        _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_10__.l.error(\n          \"Client Id and Client Secret is required for Google. Make sure to provide them in the options.\"\n        );\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_9__.B(\"CLIENT_ID_AND_SECRET_REQUIRED\");\n      }\n      if (!codeVerifier) {\n        throw new _shared_better_auth_DdzSJf_n_mjs__WEBPACK_IMPORTED_MODULE_9__.B(\"codeVerifier is required for Google\");\n      }\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"profile\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const url = await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"google\",\n        options,\n        authorizationEndpoint: \"https://accounts.google.com/o/oauth2/auth\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI,\n        prompt: options.prompt,\n        accessType: options.accessType,\n        display: display || options.display,\n        loginHint,\n        hd: options.hd\n      });\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://oauth2.googleapis.com/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.googleapis.com/oauth2/v4/token\"\n      });\n    },\n    async verifyIdToken(token, nonce) {\n      if (options.disableIdTokenSignIn) {\n        return false;\n      }\n      if (options.verifyIdToken) {\n        return options.verifyIdToken(token, nonce);\n      }\n      const googlePublicKeyUrl = `https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${token}`;\n      const { data: tokenInfo } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(googlePublicKeyUrl);\n      if (!tokenInfo) {\n        return false;\n      }\n      const isValid = tokenInfo.aud === options.clientId && (tokenInfo.iss === \"https://accounts.google.com\" || tokenInfo.iss === \"accounts.google.com\");\n      return isValid;\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = (0,jose__WEBPACK_IMPORTED_MODULE_15__.decodeJwt)(token.idToken);\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: user.email_verified,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    options\n  };\n};\n\nconst microsoft = (options) => {\n  const tenant = options.tenantId || \"common\";\n  const authorizationEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/authorize`;\n  const tokenEndpoint = `https://login.microsoftonline.com/${tenant}/oauth2/v2.0/token`;\n  return {\n    id: \"microsoft\",\n    name: \"Microsoft EntraID\",\n    createAuthorizationURL(data) {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      data.scopes && scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"microsoft\",\n        options,\n        authorizationEndpoint,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        scopes,\n        redirectURI: data.redirectURI,\n        prompt: options.prompt\n      });\n    },\n    validateAuthorizationCode({ code, codeVerifier, redirectURI }) {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      if (!token.idToken) {\n        return null;\n      }\n      const user = (0,jose__WEBPACK_IMPORTED_MODULE_15__.decodeJwt)(token.idToken);\n      const profilePhotoSize = options.profilePhotoSize || 48;\n      await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        `https://graph.microsoft.com/v1.0/me/photos/${profilePhotoSize}x${profilePhotoSize}/$value`,\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          },\n          async onResponse(context) {\n            if (options.disableProfilePhoto || !context.response.ok) {\n              return;\n            }\n            try {\n              const response = context.response.clone();\n              const pictureBuffer = await response.arrayBuffer();\n              const pictureBase64 = _better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(pictureBuffer);\n              user.picture = `data:image/jpeg;base64, ${pictureBase64}`;\n            } catch (e) {\n              _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_10__.l.error(\n                e && typeof e === \"object\" && \"name\" in e ? e.name : \"\",\n                e\n              );\n            }\n          }\n        }\n      );\n      const userMap = await options.mapProfileToUser?.(user);\n      return {\n        user: {\n          id: user.sub,\n          name: user.name,\n          email: user.email,\n          image: user.picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: user\n      };\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      const scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\", \"email\", \"User.Read\", \"offline_access\"];\n      options.scope && scopes.push(...options.scope);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientSecret: options.clientSecret\n        },\n        extraParams: {\n          scope: scopes.join(\" \")\n          // Include the scopes in request to microsoft\n        },\n        tokenEndpoint\n      });\n    },\n    options\n  };\n};\n\nconst spotify = (options) => {\n  return {\n    id: \"spotify\",\n    name: \"Spotify\",\n    createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user-read-email\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"spotify\",\n        options,\n        authorizationEndpoint: \"https://accounts.spotify.com/authorize\",\n        scopes: _scopes,\n        state,\n        codeVerifier,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://accounts.spotify.com/api/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.spotify.com/v1/me\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          email: profile.email,\n          image: profile.images[0]?.url,\n          emailVerified: false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitch = (options) => {\n  return {\n    id: \"twitch\",\n    name: \"Twitch\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read:email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"twitch\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.twitch.tv/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        claims: options.claims || [\n          \"email\",\n          \"email_verified\",\n          \"preferred_username\",\n          \"picture\"\n        ]\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.twitch.tv/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const idToken = token.idToken;\n      if (!idToken) {\n        _shared_better_auth_Cqykj82J_mjs__WEBPACK_IMPORTED_MODULE_10__.l.error(\"No idToken found in token\");\n        return null;\n      }\n      const profile = (0,jose__WEBPACK_IMPORTED_MODULE_15__.decodeJwt)(idToken);\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.preferred_username,\n          email: profile.email,\n          image: profile.picture,\n          emailVerified: false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst twitter = (options) => {\n  return {\n    id: \"twitter\",\n    name: \"Twitter\",\n    createAuthorizationURL(data) {\n      const _scopes = options.disableDefaultScope ? [] : [\"users.read\", \"tweet.read\", \"offline.access\", \"users.email\"];\n      options.scope && _scopes.push(...options.scope);\n      data.scopes && _scopes.push(...data.scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"twitter\",\n        options,\n        authorizationEndpoint: \"https://x.com/i/oauth2/authorize\",\n        scopes: _scopes,\n        state: data.state,\n        codeVerifier: data.codeVerifier,\n        redirectURI: data.redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        authentication: \"basic\",\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.x.com/2/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error: profileError } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.x.com/2/users/me?user.fields=profile_image_url\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (profileError) {\n        return null;\n      }\n      const { data: emailData, error: emailError } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\"https://api.x.com/2/users/me?user.fields=confirmed_email\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      if (!emailError && emailData?.data?.confirmed_email) {\n        profile.data.email = emailData.data.confirmed_email;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.data.id,\n          name: profile.data.name,\n          email: profile.data.email || profile.data.username || null,\n          image: profile.data.profile_image_url,\n          emailVerified: profile.data.verified || false,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst dropbox = (options) => {\n  const tokenEndpoint = \"https://api.dropboxapi.com/oauth2/token\";\n  return {\n    id: \"dropbox\",\n    name: \"Dropbox\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"account_info.read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"dropbox\",\n        options,\n        authorizationEndpoint: \"https://www.dropbox.com/oauth2/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier\n      });\n    },\n    validateAuthorizationCode: async ({ code, codeVerifier, redirectURI }) => {\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://api.dropbox.com/oauth2/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.dropboxapi.com/2/users/get_current_account\",\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.account_id,\n          name: profile.name?.display_name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.profile_photo_url,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst linkedin = (options) => {\n  const authorizationEndpoint = \"https://www.linkedin.com/oauth/v2/authorization\";\n  const tokenEndpoint = \"https://www.linkedin.com/oauth/v2/accessToken\";\n  return {\n    id: \"linkedin\",\n    name: \"Linkedin\",\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      redirectURI,\n      loginHint\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"profile\", \"email\", \"openid\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"linkedin\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        loginHint,\n        redirectURI\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.linkedin.com/v2/userinfo\",\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.name,\n          email: profile.email,\n          emailVerified: profile.email_verified || false,\n          image: profile.picture,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst cleanDoubleSlashes = (input = \"\") => {\n  return input.split(\"://\").map((str) => str.replace(/\\/{2,}/g, \"/\")).join(\"://\");\n};\nconst issuerToEndpoints = (issuer) => {\n  let baseUrl = issuer || \"https://gitlab.com\";\n  return {\n    authorizationEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/authorize`),\n    tokenEndpoint: cleanDoubleSlashes(`${baseUrl}/oauth/token`),\n    userinfoEndpoint: cleanDoubleSlashes(`${baseUrl}/api/v4/user`)\n  };\n};\nconst gitlab = (options) => {\n  const { authorizationEndpoint, tokenEndpoint, userinfoEndpoint } = issuerToEndpoints(options.issuer);\n  const issuerId = \"gitlab\";\n  const issuerName = \"Gitlab\";\n  return {\n    id: issuerId,\n    name: issuerName,\n    createAuthorizationURL: async ({\n      state,\n      scopes,\n      codeVerifier,\n      loginHint,\n      redirectURI\n    }) => {\n      const _scopes = options.disableDefaultScope ? [] : [\"read_user\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: issuerId,\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier,\n        loginHint\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        codeVerifier,\n        tokenEndpoint\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://gitlab.com/oauth/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        userinfoEndpoint,\n        { headers: { authorization: `Bearer ${token.accessToken}` } }\n      );\n      if (error || profile.state !== \"active\" || profile.locked) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id.toString(),\n          name: profile.name ?? profile.username,\n          email: profile.email,\n          image: profile.avatar_url,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst tiktok = (options) => {\n  return {\n    id: \"tiktok\",\n    name: \"TikTok\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user.info.profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://www.tiktok.com/v2/auth/authorize?scope=${_scopes.join(\n          \",\"\n        )}&response_type=code&client_key=${options.clientKey}&client_secret=${options.clientSecret}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://open.tiktokapis.com/v2/oauth/token/\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const fields = [\n        \"open_id\",\n        \"avatar_large_url\",\n        \"display_name\",\n        \"username\"\n      ];\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        `https://open.tiktokapis.com/v2/user/info/?fields=${fields.join(\",\")}`,\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      return {\n        user: {\n          email: profile.data.user.email || profile.data.user.username,\n          id: profile.data.user.open_id,\n          name: profile.data.user.display_name || profile.data.user.username,\n          image: profile.data.user.avatar_large_url,\n          /** @note Tiktok does not provide emailVerified or even email*/\n          emailVerified: profile.data.user.email ? true : false\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst reddit = (options) => {\n  return {\n    id: \"reddit\",\n    name: \"Reddit\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"identity\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"reddit\",\n        options,\n        authorizationEndpoint: \"https://www.reddit.com/api/v1/authorize\",\n        scopes: _scopes,\n        state,\n        redirectURI,\n        duration: options.duration\n      });\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      const body = new URLSearchParams({\n        grant_type: \"authorization_code\",\n        code,\n        redirect_uri: options.redirectURI || redirectURI\n      });\n      const headers = {\n        \"content-type\": \"application/x-www-form-urlencoded\",\n        accept: \"text/plain\",\n        \"user-agent\": \"better-auth\",\n        Authorization: `Basic ${_better_auth_utils_base64__WEBPACK_IMPORTED_MODULE_4__.base64.encode(\n          `${options.clientId}:${options.clientSecret}`\n        )}`\n      };\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://www.reddit.com/api/v1/access_token\",\n        {\n          method: \"POST\",\n          headers,\n          body: body.toString()\n        }\n      );\n      if (error) {\n        throw error;\n      }\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.b)(data);\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://www.reddit.com/api/v1/access_token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://oauth.reddit.com/api/v1/me\",\n        {\n          headers: {\n            Authorization: `Bearer ${token.accessToken}`,\n            \"User-Agent\": \"better-auth\"\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.name,\n          email: profile.oauth_client_id,\n          emailVerified: profile.has_verified_email,\n          image: profile.icon_img?.split(\"?\")[0],\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst roblox = (options) => {\n  return {\n    id: \"roblox\",\n    name: \"Roblox\",\n    createAuthorizationURL({ state, scopes, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"openid\", \"profile\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return new URL(\n        `https://apis.roblox.com/oauth/v1/authorize?scope=${_scopes.join(\n          \"+\"\n        )}&response_type=code&client_id=${options.clientId}&redirect_uri=${encodeURIComponent(\n          options.redirectURI || redirectURI\n        )}&state=${state}&prompt=${options.prompt || \"select_account+consent\"}`\n      );\n    },\n    validateAuthorizationCode: async ({ code, redirectURI }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\",\n        authentication: \"post\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://apis.roblox.com/oauth/v1/token\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://apis.roblox.com/oauth/v1/userinfo\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.sub,\n          name: profile.nickname || profile.preferred_username || \"\",\n          image: profile.picture,\n          email: profile.preferred_username || null,\n          // Roblox does not provide email\n          emailVerified: true,\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    },\n    options\n  };\n};\n\nvar LANG = /* @__PURE__ */ ((LANG2) => {\n  LANG2[LANG2[\"RUS\"] = 0] = \"RUS\";\n  LANG2[LANG2[\"UKR\"] = 1] = \"UKR\";\n  LANG2[LANG2[\"ENG\"] = 3] = \"ENG\";\n  LANG2[LANG2[\"SPA\"] = 4] = \"SPA\";\n  LANG2[LANG2[\"GERMAN\"] = 6] = \"GERMAN\";\n  LANG2[LANG2[\"POL\"] = 15] = \"POL\";\n  LANG2[LANG2[\"FRA\"] = 16] = \"FRA\";\n  LANG2[LANG2[\"TURKEY\"] = 82] = \"TURKEY\";\n  return LANG2;\n})(LANG || {});\nconst vk = (options) => {\n  return {\n    id: \"vk\",\n    name: \"VK\",\n    async createAuthorizationURL({ state, scopes, codeVerifier, redirectURI }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"email\", \"phone\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      const authorizationEndpoint = \"https://id.vk.com/authorize\";\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"vk\",\n        options,\n        authorizationEndpoint,\n        scopes: _scopes,\n        state,\n        redirectURI,\n        codeVerifier\n      });\n    },\n    validateAuthorizationCode: async ({\n      code,\n      codeVerifier,\n      redirectURI,\n      deviceId\n    }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        codeVerifier,\n        redirectURI: options.redirectURI || redirectURI,\n        options,\n        deviceId,\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    refreshAccessToken: options.refreshAccessToken ? options.refreshAccessToken : async (refreshToken) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.r)({\n        refreshToken,\n        options: {\n          clientId: options.clientId,\n          clientKey: options.clientKey,\n          clientSecret: options.clientSecret\n        },\n        tokenEndpoint: \"https://id.vk.com/oauth2/auth\"\n      });\n    },\n    async getUserInfo(data) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(data);\n      }\n      if (!data.accessToken) {\n        return null;\n      }\n      const formBody = new URLSearchParams({\n        access_token: data.accessToken,\n        client_id: options.clientId\n      }).toString();\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://id.vk.com/oauth2/user_info\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          },\n          body: formBody\n        }\n      );\n      if (error) {\n        return null;\n      }\n      if (!profile.user.email) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user.user_id,\n          first_name: profile.user.first_name,\n          last_name: profile.user.last_name,\n          email: profile.user.email,\n          image: profile.user.avatar,\n          /** @note VK does not provide emailVerified*/\n          emailVerified: !!profile.user.email,\n          birthday: profile.user.birthday,\n          sex: profile.user.sex,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst kick = (options) => {\n  return {\n    id: \"kick\",\n    name: \"Kick\",\n    createAuthorizationURL({ state, scopes, redirectURI, codeVerifier }) {\n      const _scopes = options.disableDefaultScope ? [] : [\"user:read\"];\n      options.scope && _scopes.push(...options.scope);\n      scopes && _scopes.push(...scopes);\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.c)({\n        id: \"kick\",\n        redirectURI,\n        options,\n        authorizationEndpoint: \"https://id.kick.com/oauth/authorize\",\n        scopes: _scopes,\n        codeVerifier,\n        state\n      });\n    },\n    async validateAuthorizationCode({ code, redirectURI, codeVerifier }) {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI,\n        options,\n        tokenEndpoint: \"https://id.kick.com/oauth/token\",\n        codeVerifier\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\"https://api.kick.com/public/v1/users\", {\n        method: \"GET\",\n        headers: {\n          Authorization: `Bearer ${token.accessToken}`\n        }\n      });\n      if (error) {\n        return null;\n      }\n      const profile = data.data[0];\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.user_id,\n          name: profile.name,\n          email: profile.email,\n          image: profile.profile_picture,\n          emailVerified: true,\n          ...userMap\n        },\n        data: profile\n      };\n    },\n    options\n  };\n};\n\nconst zoom = (userOptions) => {\n  const options = {\n    pkce: true,\n    ...userOptions\n  };\n  return {\n    id: \"zoom\",\n    name: \"Zoom\",\n    createAuthorizationURL: async ({ state, redirectURI, codeVerifier }) => {\n      const params = new URLSearchParams({\n        response_type: \"code\",\n        redirect_uri: options.redirectURI ? options.redirectURI : redirectURI,\n        client_id: options.clientId,\n        state\n      });\n      if (options.pkce) {\n        const codeChallenge = await (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.g)(codeVerifier);\n        params.set(\"code_challenge_method\", \"S256\");\n        params.set(\"code_challenge\", codeChallenge);\n      }\n      const url = new URL(\"https://zoom.us/oauth/authorize\");\n      url.search = params.toString();\n      return url;\n    },\n    validateAuthorizationCode: async ({ code, redirectURI, codeVerifier }) => {\n      return (0,_shared_better_auth_DufyW0qf_mjs__WEBPACK_IMPORTED_MODULE_2__.v)({\n        code,\n        redirectURI: options.redirectURI || redirectURI,\n        codeVerifier,\n        options,\n        tokenEndpoint: \"https://zoom.us/oauth/token\",\n        authentication: \"post\"\n      });\n    },\n    async getUserInfo(token) {\n      if (options.getUserInfo) {\n        return options.getUserInfo(token);\n      }\n      const { data: profile, error } = await (0,_better_fetch_fetch__WEBPACK_IMPORTED_MODULE_0__.betterFetch)(\n        \"https://api.zoom.us/v2/users/me\",\n        {\n          headers: {\n            authorization: `Bearer ${token.accessToken}`\n          }\n        }\n      );\n      if (error) {\n        return null;\n      }\n      const userMap = await options.mapProfileToUser?.(profile);\n      return {\n        user: {\n          id: profile.id,\n          name: profile.display_name,\n          image: profile.pic_url,\n          email: profile.email,\n          emailVerified: Boolean(profile.verified),\n          ...userMap\n        },\n        data: {\n          ...profile\n        }\n      };\n    }\n  };\n};\n\nconst socialProviders = {\n  apple,\n  discord,\n  facebook,\n  github,\n  microsoft,\n  google,\n  spotify,\n  twitch,\n  twitter,\n  dropbox,\n  kick,\n  linkedin,\n  gitlab,\n  tiktok,\n  reddit,\n  roblox,\n  vk,\n  zoom\n};\nconst socialProviderList = Object.keys(socialProviders);\nconst SocialProviderListEnum = zod__WEBPACK_IMPORTED_MODULE_5__.z[\"enum\"](socialProviderList).or(zod__WEBPACK_IMPORTED_MODULE_5__.z.string());\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/better-auth/dist/social-providers/index.mjs\n");

/***/ })

};
;